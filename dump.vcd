$date
	Thu Feb 29 21:49:51 2024
$end
$version
	Questa Intel Starter FPGA Edition Version 2021.2
$end
$timescale
	1ns
$end

$scope module cpu_tb $end
$var wire 1 ! PC [15] $end
$var wire 1 " PC [14] $end
$var wire 1 # PC [13] $end
$var wire 1 $ PC [12] $end
$var wire 1 % PC [11] $end
$var wire 1 & PC [10] $end
$var wire 1 ' PC [9] $end
$var wire 1 ( PC [8] $end
$var wire 1 ) PC [7] $end
$var wire 1 * PC [6] $end
$var wire 1 + PC [5] $end
$var wire 1 , PC [4] $end
$var wire 1 - PC [3] $end
$var wire 1 . PC [2] $end
$var wire 1 / PC [1] $end
$var wire 1 0 PC [0] $end
$var wire 1 1 Inst [15] $end
$var wire 1 2 Inst [14] $end
$var wire 1 3 Inst [13] $end
$var wire 1 4 Inst [12] $end
$var wire 1 5 Inst [11] $end
$var wire 1 6 Inst [10] $end
$var wire 1 7 Inst [9] $end
$var wire 1 8 Inst [8] $end
$var wire 1 9 Inst [7] $end
$var wire 1 : Inst [6] $end
$var wire 1 ; Inst [5] $end
$var wire 1 < Inst [4] $end
$var wire 1 = Inst [3] $end
$var wire 1 > Inst [2] $end
$var wire 1 ? Inst [1] $end
$var wire 1 @ Inst [0] $end
$var wire 1 A RegWrite $end
$var wire 1 B WriteRegister [3] $end
$var wire 1 C WriteRegister [2] $end
$var wire 1 D WriteRegister [1] $end
$var wire 1 E WriteRegister [0] $end
$var wire 1 F WriteData [15] $end
$var wire 1 G WriteData [14] $end
$var wire 1 H WriteData [13] $end
$var wire 1 I WriteData [12] $end
$var wire 1 J WriteData [11] $end
$var wire 1 K WriteData [10] $end
$var wire 1 L WriteData [9] $end
$var wire 1 M WriteData [8] $end
$var wire 1 N WriteData [7] $end
$var wire 1 O WriteData [6] $end
$var wire 1 P WriteData [5] $end
$var wire 1 Q WriteData [4] $end
$var wire 1 R WriteData [3] $end
$var wire 1 S WriteData [2] $end
$var wire 1 T WriteData [1] $end
$var wire 1 U WriteData [0] $end
$var wire 1 V MemWrite $end
$var wire 1 W MemRead $end
$var wire 1 X MemAddress [15] $end
$var wire 1 Y MemAddress [14] $end
$var wire 1 Z MemAddress [13] $end
$var wire 1 [ MemAddress [12] $end
$var wire 1 \ MemAddress [11] $end
$var wire 1 ] MemAddress [10] $end
$var wire 1 ^ MemAddress [9] $end
$var wire 1 _ MemAddress [8] $end
$var wire 1 ` MemAddress [7] $end
$var wire 1 a MemAddress [6] $end
$var wire 1 b MemAddress [5] $end
$var wire 1 c MemAddress [4] $end
$var wire 1 d MemAddress [3] $end
$var wire 1 e MemAddress [2] $end
$var wire 1 f MemAddress [1] $end
$var wire 1 g MemAddress [0] $end
$var wire 1 h MemData [15] $end
$var wire 1 i MemData [14] $end
$var wire 1 j MemData [13] $end
$var wire 1 k MemData [12] $end
$var wire 1 l MemData [11] $end
$var wire 1 m MemData [10] $end
$var wire 1 n MemData [9] $end
$var wire 1 o MemData [8] $end
$var wire 1 p MemData [7] $end
$var wire 1 q MemData [6] $end
$var wire 1 r MemData [5] $end
$var wire 1 s MemData [4] $end
$var wire 1 t MemData [3] $end
$var wire 1 u MemData [2] $end
$var wire 1 v MemData [1] $end
$var wire 1 w MemData [0] $end
$var wire 1 x Halt $end
$var integer 32 y inst_count $end
$var integer 32 z cycle_count $end
$var integer 32 { trace_file $end
$var integer 32 | sim_log_file $end
$var reg 1 } clk $end
$var reg 1 ~ rst_n $end

$scope module DUT $end
$var wire 1 !! clk $end
$var wire 1 "! rst_n $end
$var wire 1 x hlt $end
$var wire 1 ! pc [15] $end
$var wire 1 " pc [14] $end
$var wire 1 # pc [13] $end
$var wire 1 $ pc [12] $end
$var wire 1 % pc [11] $end
$var wire 1 & pc [10] $end
$var wire 1 ' pc [9] $end
$var wire 1 ( pc [8] $end
$var wire 1 ) pc [7] $end
$var wire 1 * pc [6] $end
$var wire 1 + pc [5] $end
$var wire 1 , pc [4] $end
$var wire 1 - pc [3] $end
$var wire 1 . pc [2] $end
$var wire 1 / pc [1] $end
$var wire 1 0 pc [0] $end
$var wire 1 #! RegWrite $end
$var wire 1 $! MemRead $end
$var wire 1 %! MemWrite $end
$var wire 1 &! Branch $end
$var wire 1 '! MemtoReg $end
$var wire 1 (! ALUSrc $end
$var wire 1 )! ALUOp [3] $end
$var wire 1 *! ALUOp [2] $end
$var wire 1 +! ALUOp [1] $end
$var wire 1 ,! ALUOp [0] $end
$var wire 1 -! pcs_select $end
$var wire 1 .! hlt_select $end
$var wire 1 /! ALUSrc8bit $end
$var wire 1 0! pc_in [15] $end
$var wire 1 1! pc_in [14] $end
$var wire 1 2! pc_in [13] $end
$var wire 1 3! pc_in [12] $end
$var wire 1 4! pc_in [11] $end
$var wire 1 5! pc_in [10] $end
$var wire 1 6! pc_in [9] $end
$var wire 1 7! pc_in [8] $end
$var wire 1 8! pc_in [7] $end
$var wire 1 9! pc_in [6] $end
$var wire 1 :! pc_in [5] $end
$var wire 1 ;! pc_in [4] $end
$var wire 1 <! pc_in [3] $end
$var wire 1 =! pc_in [2] $end
$var wire 1 >! pc_in [1] $end
$var wire 1 ?! pc_in [0] $end
$var wire 1 @! instruction [15] $end
$var wire 1 A! instruction [14] $end
$var wire 1 B! instruction [13] $end
$var wire 1 C! instruction [12] $end
$var wire 1 D! instruction [11] $end
$var wire 1 E! instruction [10] $end
$var wire 1 F! instruction [9] $end
$var wire 1 G! instruction [8] $end
$var wire 1 H! instruction [7] $end
$var wire 1 I! instruction [6] $end
$var wire 1 J! instruction [5] $end
$var wire 1 K! instruction [4] $end
$var wire 1 L! instruction [3] $end
$var wire 1 M! instruction [2] $end
$var wire 1 N! instruction [1] $end
$var wire 1 O! instruction [0] $end
$var wire 1 P! mem_out [15] $end
$var wire 1 Q! mem_out [14] $end
$var wire 1 R! mem_out [13] $end
$var wire 1 S! mem_out [12] $end
$var wire 1 T! mem_out [11] $end
$var wire 1 U! mem_out [10] $end
$var wire 1 V! mem_out [9] $end
$var wire 1 W! mem_out [8] $end
$var wire 1 X! mem_out [7] $end
$var wire 1 Y! mem_out [6] $end
$var wire 1 Z! mem_out [5] $end
$var wire 1 [! mem_out [4] $end
$var wire 1 \! mem_out [3] $end
$var wire 1 ]! mem_out [2] $end
$var wire 1 ^! mem_out [1] $end
$var wire 1 _! mem_out [0] $end
$var wire 1 `! pc_increment [15] $end
$var wire 1 a! pc_increment [14] $end
$var wire 1 b! pc_increment [13] $end
$var wire 1 c! pc_increment [12] $end
$var wire 1 d! pc_increment [11] $end
$var wire 1 e! pc_increment [10] $end
$var wire 1 f! pc_increment [9] $end
$var wire 1 g! pc_increment [8] $end
$var wire 1 h! pc_increment [7] $end
$var wire 1 i! pc_increment [6] $end
$var wire 1 j! pc_increment [5] $end
$var wire 1 k! pc_increment [4] $end
$var wire 1 l! pc_increment [3] $end
$var wire 1 m! pc_increment [2] $end
$var wire 1 n! pc_increment [1] $end
$var wire 1 o! pc_increment [0] $end
$var wire 1 p! pc_branch [15] $end
$var wire 1 q! pc_branch [14] $end
$var wire 1 r! pc_branch [13] $end
$var wire 1 s! pc_branch [12] $end
$var wire 1 t! pc_branch [11] $end
$var wire 1 u! pc_branch [10] $end
$var wire 1 v! pc_branch [9] $end
$var wire 1 w! pc_branch [8] $end
$var wire 1 x! pc_branch [7] $end
$var wire 1 y! pc_branch [6] $end
$var wire 1 z! pc_branch [5] $end
$var wire 1 {! pc_branch [4] $end
$var wire 1 |! pc_branch [3] $end
$var wire 1 }! pc_branch [2] $end
$var wire 1 ~! pc_branch [1] $end
$var wire 1 !" pc_branch [0] $end
$var wire 1 "" datain [15] $end
$var wire 1 #" datain [14] $end
$var wire 1 $" datain [13] $end
$var wire 1 %" datain [12] $end
$var wire 1 &" datain [11] $end
$var wire 1 '" datain [10] $end
$var wire 1 (" datain [9] $end
$var wire 1 )" datain [8] $end
$var wire 1 *" datain [7] $end
$var wire 1 +" datain [6] $end
$var wire 1 ," datain [5] $end
$var wire 1 -" datain [4] $end
$var wire 1 ." datain [3] $end
$var wire 1 /" datain [2] $end
$var wire 1 0" datain [1] $end
$var wire 1 1" datain [0] $end
$var wire 1 2" dataout1 [15] $end
$var wire 1 3" dataout1 [14] $end
$var wire 1 4" dataout1 [13] $end
$var wire 1 5" dataout1 [12] $end
$var wire 1 6" dataout1 [11] $end
$var wire 1 7" dataout1 [10] $end
$var wire 1 8" dataout1 [9] $end
$var wire 1 9" dataout1 [8] $end
$var wire 1 :" dataout1 [7] $end
$var wire 1 ;" dataout1 [6] $end
$var wire 1 <" dataout1 [5] $end
$var wire 1 =" dataout1 [4] $end
$var wire 1 >" dataout1 [3] $end
$var wire 1 ?" dataout1 [2] $end
$var wire 1 @" dataout1 [1] $end
$var wire 1 A" dataout1 [0] $end
$var wire 1 B" dataout2 [15] $end
$var wire 1 C" dataout2 [14] $end
$var wire 1 D" dataout2 [13] $end
$var wire 1 E" dataout2 [12] $end
$var wire 1 F" dataout2 [11] $end
$var wire 1 G" dataout2 [10] $end
$var wire 1 H" dataout2 [9] $end
$var wire 1 I" dataout2 [8] $end
$var wire 1 J" dataout2 [7] $end
$var wire 1 K" dataout2 [6] $end
$var wire 1 L" dataout2 [5] $end
$var wire 1 M" dataout2 [4] $end
$var wire 1 N" dataout2 [3] $end
$var wire 1 O" dataout2 [2] $end
$var wire 1 P" dataout2 [1] $end
$var wire 1 Q" dataout2 [0] $end
$var wire 1 R" Flags [2] $end
$var wire 1 S" Flags [1] $end
$var wire 1 T" Flags [0] $end
$var wire 1 U" aluin2 [15] $end
$var wire 1 V" aluin2 [14] $end
$var wire 1 W" aluin2 [13] $end
$var wire 1 X" aluin2 [12] $end
$var wire 1 Y" aluin2 [11] $end
$var wire 1 Z" aluin2 [10] $end
$var wire 1 [" aluin2 [9] $end
$var wire 1 \" aluin2 [8] $end
$var wire 1 ]" aluin2 [7] $end
$var wire 1 ^" aluin2 [6] $end
$var wire 1 _" aluin2 [5] $end
$var wire 1 `" aluin2 [4] $end
$var wire 1 a" aluin2 [3] $end
$var wire 1 b" aluin2 [2] $end
$var wire 1 c" aluin2 [1] $end
$var wire 1 d" aluin2 [0] $end
$var wire 1 e" aluout [15] $end
$var wire 1 f" aluout [14] $end
$var wire 1 g" aluout [13] $end
$var wire 1 h" aluout [12] $end
$var wire 1 i" aluout [11] $end
$var wire 1 j" aluout [10] $end
$var wire 1 k" aluout [9] $end
$var wire 1 l" aluout [8] $end
$var wire 1 m" aluout [7] $end
$var wire 1 n" aluout [6] $end
$var wire 1 o" aluout [5] $end
$var wire 1 p" aluout [4] $end
$var wire 1 q" aluout [3] $end
$var wire 1 r" aluout [2] $end
$var wire 1 s" aluout [1] $end
$var wire 1 t" aluout [0] $end
$var wire 1 u" error $end

$scope module imem $end
$var parameter 32 v" ADDR_WIDTH $end
$var wire 1 @! data_out [15] $end
$var wire 1 A! data_out [14] $end
$var wire 1 B! data_out [13] $end
$var wire 1 C! data_out [12] $end
$var wire 1 D! data_out [11] $end
$var wire 1 E! data_out [10] $end
$var wire 1 F! data_out [9] $end
$var wire 1 G! data_out [8] $end
$var wire 1 H! data_out [7] $end
$var wire 1 I! data_out [6] $end
$var wire 1 J! data_out [5] $end
$var wire 1 K! data_out [4] $end
$var wire 1 L! data_out [3] $end
$var wire 1 M! data_out [2] $end
$var wire 1 N! data_out [1] $end
$var wire 1 O! data_out [0] $end
$var wire 1 w" data_in [15] $end
$var wire 1 x" data_in [14] $end
$var wire 1 y" data_in [13] $end
$var wire 1 z" data_in [12] $end
$var wire 1 {" data_in [11] $end
$var wire 1 |" data_in [10] $end
$var wire 1 }" data_in [9] $end
$var wire 1 ~" data_in [8] $end
$var wire 1 !# data_in [7] $end
$var wire 1 "# data_in [6] $end
$var wire 1 ## data_in [5] $end
$var wire 1 $# data_in [4] $end
$var wire 1 %# data_in [3] $end
$var wire 1 &# data_in [2] $end
$var wire 1 '# data_in [1] $end
$var wire 1 (# data_in [0] $end
$var wire 1 0! addr [15] $end
$var wire 1 1! addr [14] $end
$var wire 1 2! addr [13] $end
$var wire 1 3! addr [12] $end
$var wire 1 4! addr [11] $end
$var wire 1 5! addr [10] $end
$var wire 1 6! addr [9] $end
$var wire 1 7! addr [8] $end
$var wire 1 8! addr [7] $end
$var wire 1 9! addr [6] $end
$var wire 1 :! addr [5] $end
$var wire 1 ;! addr [4] $end
$var wire 1 <! addr [3] $end
$var wire 1 =! addr [2] $end
$var wire 1 >! addr [1] $end
$var wire 1 ?! addr [0] $end
$var wire 1 )# enable $end
$var wire 1 *# wr $end
$var wire 1 !! clk $end
$var wire 1 "! rst $end
$var reg 1 +# loaded $end
$upscope $end

$scope module increment $end
$var wire 1 0! A [15] $end
$var wire 1 1! A [14] $end
$var wire 1 2! A [13] $end
$var wire 1 3! A [12] $end
$var wire 1 4! A [11] $end
$var wire 1 5! A [10] $end
$var wire 1 6! A [9] $end
$var wire 1 7! A [8] $end
$var wire 1 8! A [7] $end
$var wire 1 9! A [6] $end
$var wire 1 :! A [5] $end
$var wire 1 ;! A [4] $end
$var wire 1 <! A [3] $end
$var wire 1 =! A [2] $end
$var wire 1 >! A [1] $end
$var wire 1 ?! A [0] $end
$var wire 1 ,# B [15] $end
$var wire 1 -# B [14] $end
$var wire 1 .# B [13] $end
$var wire 1 /# B [12] $end
$var wire 1 0# B [11] $end
$var wire 1 1# B [10] $end
$var wire 1 2# B [9] $end
$var wire 1 3# B [8] $end
$var wire 1 4# B [7] $end
$var wire 1 5# B [6] $end
$var wire 1 6# B [5] $end
$var wire 1 7# B [4] $end
$var wire 1 8# B [3] $end
$var wire 1 9# B [2] $end
$var wire 1 :# B [1] $end
$var wire 1 ;# B [0] $end
$var wire 1 <# sub $end
$var wire 1 `! Sum [15] $end
$var wire 1 a! Sum [14] $end
$var wire 1 b! Sum [13] $end
$var wire 1 c! Sum [12] $end
$var wire 1 d! Sum [11] $end
$var wire 1 e! Sum [10] $end
$var wire 1 f! Sum [9] $end
$var wire 1 g! Sum [8] $end
$var wire 1 h! Sum [7] $end
$var wire 1 i! Sum [6] $end
$var wire 1 j! Sum [5] $end
$var wire 1 k! Sum [4] $end
$var wire 1 l! Sum [3] $end
$var wire 1 m! Sum [2] $end
$var wire 1 n! Sum [1] $end
$var wire 1 o! Sum [0] $end
$var wire 1 =# sat $end
$var wire 1 ># B_comp [15] $end
$var wire 1 ?# B_comp [14] $end
$var wire 1 @# B_comp [13] $end
$var wire 1 A# B_comp [12] $end
$var wire 1 B# B_comp [11] $end
$var wire 1 C# B_comp [10] $end
$var wire 1 D# B_comp [9] $end
$var wire 1 E# B_comp [8] $end
$var wire 1 F# B_comp [7] $end
$var wire 1 G# B_comp [6] $end
$var wire 1 H# B_comp [5] $end
$var wire 1 I# B_comp [4] $end
$var wire 1 J# B_comp [3] $end
$var wire 1 K# B_comp [2] $end
$var wire 1 L# B_comp [1] $end
$var wire 1 M# B_comp [0] $end
$var wire 1 N# C [3] $end
$var wire 1 O# C [2] $end
$var wire 1 P# C [1] $end
$var wire 1 Q# C [0] $end
$var wire 1 R# sum_res [15] $end
$var wire 1 S# sum_res [14] $end
$var wire 1 T# sum_res [13] $end
$var wire 1 U# sum_res [12] $end
$var wire 1 V# sum_res [11] $end
$var wire 1 W# sum_res [10] $end
$var wire 1 X# sum_res [9] $end
$var wire 1 Y# sum_res [8] $end
$var wire 1 Z# sum_res [7] $end
$var wire 1 [# sum_res [6] $end
$var wire 1 \# sum_res [5] $end
$var wire 1 ]# sum_res [4] $end
$var wire 1 ^# sum_res [3] $end
$var wire 1 _# sum_res [2] $end
$var wire 1 `# sum_res [1] $end
$var wire 1 a# sum_res [0] $end
$var wire 1 b# ovfl_pos $end
$var wire 1 c# ovfl_neg $end
$var wire 1 d# G $end
$var wire 1 e# P $end

$scope module lsb $end
$var wire 1 <! A [3] $end
$var wire 1 =! A [2] $end
$var wire 1 >! A [1] $end
$var wire 1 ?! A [0] $end
$var wire 1 J# B [3] $end
$var wire 1 K# B [2] $end
$var wire 1 L# B [1] $end
$var wire 1 M# B [0] $end
$var wire 1 ^# Sum [3] $end
$var wire 1 _# Sum [2] $end
$var wire 1 `# Sum [1] $end
$var wire 1 a# Sum [0] $end
$var wire 1 <# Cin $end
$var wire 1 Q# Cout $end
$var wire 1 f# C [3] $end
$var wire 1 g# C [2] $end
$var wire 1 h# C [1] $end
$var wire 1 i# C [0] $end
$var wire 1 j# ovfl_pos $end
$var wire 1 k# ovfl_neg $end
$var wire 1 l# P [3] $end
$var wire 1 m# P [2] $end
$var wire 1 n# P [1] $end
$var wire 1 o# P [0] $end
$var wire 1 p# G [3] $end
$var wire 1 q# G [2] $end
$var wire 1 r# G [1] $end
$var wire 1 s# G [0] $end
$upscope $end

$scope module mb1 $end
$var wire 1 8! A [3] $end
$var wire 1 9! A [2] $end
$var wire 1 :! A [1] $end
$var wire 1 ;! A [0] $end
$var wire 1 F# B [3] $end
$var wire 1 G# B [2] $end
$var wire 1 H# B [1] $end
$var wire 1 I# B [0] $end
$var wire 1 Z# Sum [3] $end
$var wire 1 [# Sum [2] $end
$var wire 1 \# Sum [1] $end
$var wire 1 ]# Sum [0] $end
$var wire 1 Q# Cin $end
$var wire 1 P# Cout $end
$var wire 1 t# C [3] $end
$var wire 1 u# C [2] $end
$var wire 1 v# C [1] $end
$var wire 1 w# C [0] $end
$var wire 1 x# ovfl_pos $end
$var wire 1 y# ovfl_neg $end
$var wire 1 z# P [3] $end
$var wire 1 {# P [2] $end
$var wire 1 |# P [1] $end
$var wire 1 }# P [0] $end
$var wire 1 ~# G [3] $end
$var wire 1 !$ G [2] $end
$var wire 1 "$ G [1] $end
$var wire 1 #$ G [0] $end
$upscope $end

$scope module mb2 $end
$var wire 1 4! A [3] $end
$var wire 1 5! A [2] $end
$var wire 1 6! A [1] $end
$var wire 1 7! A [0] $end
$var wire 1 B# B [3] $end
$var wire 1 C# B [2] $end
$var wire 1 D# B [1] $end
$var wire 1 E# B [0] $end
$var wire 1 V# Sum [3] $end
$var wire 1 W# Sum [2] $end
$var wire 1 X# Sum [1] $end
$var wire 1 Y# Sum [0] $end
$var wire 1 P# Cin $end
$var wire 1 O# Cout $end
$var wire 1 $$ C [3] $end
$var wire 1 %$ C [2] $end
$var wire 1 &$ C [1] $end
$var wire 1 '$ C [0] $end
$var wire 1 ($ ovfl_pos $end
$var wire 1 )$ ovfl_neg $end
$var wire 1 *$ P [3] $end
$var wire 1 +$ P [2] $end
$var wire 1 ,$ P [1] $end
$var wire 1 -$ P [0] $end
$var wire 1 .$ G [3] $end
$var wire 1 /$ G [2] $end
$var wire 1 0$ G [1] $end
$var wire 1 1$ G [0] $end
$upscope $end

$scope module msb $end
$var wire 1 0! A [3] $end
$var wire 1 1! A [2] $end
$var wire 1 2! A [1] $end
$var wire 1 3! A [0] $end
$var wire 1 ># B [3] $end
$var wire 1 ?# B [2] $end
$var wire 1 @# B [1] $end
$var wire 1 A# B [0] $end
$var wire 1 R# Sum [3] $end
$var wire 1 S# Sum [2] $end
$var wire 1 T# Sum [1] $end
$var wire 1 U# Sum [0] $end
$var wire 1 O# Cin $end
$var wire 1 N# Cout $end
$var wire 1 2$ C [3] $end
$var wire 1 3$ C [2] $end
$var wire 1 4$ C [1] $end
$var wire 1 5$ C [0] $end
$var wire 1 6$ ovfl_pos $end
$var wire 1 7$ ovfl_neg $end
$var wire 1 8$ P [3] $end
$var wire 1 9$ P [2] $end
$var wire 1 :$ P [1] $end
$var wire 1 ;$ P [0] $end
$var wire 1 <$ G [3] $end
$var wire 1 =$ G [2] $end
$var wire 1 >$ G [1] $end
$var wire 1 ?$ G [0] $end
$upscope $end
$upscope $end

$scope module pccontrol $end
$var wire 1 D! C [2] $end
$var wire 1 E! C [1] $end
$var wire 1 F! C [0] $end
$var wire 1 G! I [8] $end
$var wire 1 H! I [7] $end
$var wire 1 I! I [6] $end
$var wire 1 J! I [5] $end
$var wire 1 K! I [4] $end
$var wire 1 L! I [3] $end
$var wire 1 M! I [2] $end
$var wire 1 N! I [1] $end
$var wire 1 O! I [0] $end
$var wire 1 R" F [2] $end
$var wire 1 S" F [1] $end
$var wire 1 T" F [0] $end
$var wire 1 `! PC_in [15] $end
$var wire 1 a! PC_in [14] $end
$var wire 1 b! PC_in [13] $end
$var wire 1 c! PC_in [12] $end
$var wire 1 d! PC_in [11] $end
$var wire 1 e! PC_in [10] $end
$var wire 1 f! PC_in [9] $end
$var wire 1 g! PC_in [8] $end
$var wire 1 h! PC_in [7] $end
$var wire 1 i! PC_in [6] $end
$var wire 1 j! PC_in [5] $end
$var wire 1 k! PC_in [4] $end
$var wire 1 l! PC_in [3] $end
$var wire 1 m! PC_in [2] $end
$var wire 1 n! PC_in [1] $end
$var wire 1 o! PC_in [0] $end
$var reg 16 @$ PC_out [15:0] $end
$var wire 1 A$ pc_branch [15] $end
$var wire 1 B$ pc_branch [14] $end
$var wire 1 C$ pc_branch [13] $end
$var wire 1 D$ pc_branch [12] $end
$var wire 1 E$ pc_branch [11] $end
$var wire 1 F$ pc_branch [10] $end
$var wire 1 G$ pc_branch [9] $end
$var wire 1 H$ pc_branch [8] $end
$var wire 1 I$ pc_branch [7] $end
$var wire 1 J$ pc_branch [6] $end
$var wire 1 K$ pc_branch [5] $end
$var wire 1 L$ pc_branch [4] $end
$var wire 1 M$ pc_branch [3] $end
$var wire 1 N$ pc_branch [2] $end
$var wire 1 O$ pc_branch [1] $end
$var wire 1 P$ pc_branch [0] $end
$var reg 1 Q$ error $end

$scope module branch $end
$var wire 1 `! A [15] $end
$var wire 1 a! A [14] $end
$var wire 1 b! A [13] $end
$var wire 1 c! A [12] $end
$var wire 1 d! A [11] $end
$var wire 1 e! A [10] $end
$var wire 1 f! A [9] $end
$var wire 1 g! A [8] $end
$var wire 1 h! A [7] $end
$var wire 1 i! A [6] $end
$var wire 1 j! A [5] $end
$var wire 1 k! A [4] $end
$var wire 1 l! A [3] $end
$var wire 1 m! A [2] $end
$var wire 1 n! A [1] $end
$var wire 1 o! A [0] $end
$var wire 1 R$ B [15] $end
$var wire 1 S$ B [14] $end
$var wire 1 T$ B [13] $end
$var wire 1 U$ B [12] $end
$var wire 1 V$ B [11] $end
$var wire 1 W$ B [10] $end
$var wire 1 G! B [9] $end
$var wire 1 H! B [8] $end
$var wire 1 I! B [7] $end
$var wire 1 J! B [6] $end
$var wire 1 K! B [5] $end
$var wire 1 L! B [4] $end
$var wire 1 M! B [3] $end
$var wire 1 N! B [2] $end
$var wire 1 O! B [1] $end
$var wire 1 X$ B [0] $end
$var wire 1 Y$ sub $end
$var wire 1 A$ Sum [15] $end
$var wire 1 B$ Sum [14] $end
$var wire 1 C$ Sum [13] $end
$var wire 1 D$ Sum [12] $end
$var wire 1 E$ Sum [11] $end
$var wire 1 F$ Sum [10] $end
$var wire 1 G$ Sum [9] $end
$var wire 1 H$ Sum [8] $end
$var wire 1 I$ Sum [7] $end
$var wire 1 J$ Sum [6] $end
$var wire 1 K$ Sum [5] $end
$var wire 1 L$ Sum [4] $end
$var wire 1 M$ Sum [3] $end
$var wire 1 N$ Sum [2] $end
$var wire 1 O$ Sum [1] $end
$var wire 1 P$ Sum [0] $end
$var wire 1 Z$ sat $end
$var wire 1 [$ B_comp [15] $end
$var wire 1 \$ B_comp [14] $end
$var wire 1 ]$ B_comp [13] $end
$var wire 1 ^$ B_comp [12] $end
$var wire 1 _$ B_comp [11] $end
$var wire 1 `$ B_comp [10] $end
$var wire 1 a$ B_comp [9] $end
$var wire 1 b$ B_comp [8] $end
$var wire 1 c$ B_comp [7] $end
$var wire 1 d$ B_comp [6] $end
$var wire 1 e$ B_comp [5] $end
$var wire 1 f$ B_comp [4] $end
$var wire 1 g$ B_comp [3] $end
$var wire 1 h$ B_comp [2] $end
$var wire 1 i$ B_comp [1] $end
$var wire 1 j$ B_comp [0] $end
$var wire 1 k$ C [3] $end
$var wire 1 l$ C [2] $end
$var wire 1 m$ C [1] $end
$var wire 1 n$ C [0] $end
$var wire 1 o$ sum_res [15] $end
$var wire 1 p$ sum_res [14] $end
$var wire 1 q$ sum_res [13] $end
$var wire 1 r$ sum_res [12] $end
$var wire 1 s$ sum_res [11] $end
$var wire 1 t$ sum_res [10] $end
$var wire 1 u$ sum_res [9] $end
$var wire 1 v$ sum_res [8] $end
$var wire 1 w$ sum_res [7] $end
$var wire 1 x$ sum_res [6] $end
$var wire 1 y$ sum_res [5] $end
$var wire 1 z$ sum_res [4] $end
$var wire 1 {$ sum_res [3] $end
$var wire 1 |$ sum_res [2] $end
$var wire 1 }$ sum_res [1] $end
$var wire 1 ~$ sum_res [0] $end
$var wire 1 !% ovfl_pos $end
$var wire 1 "% ovfl_neg $end
$var wire 1 #% G $end
$var wire 1 $% P $end

$scope module lsb $end
$var wire 1 l! A [3] $end
$var wire 1 m! A [2] $end
$var wire 1 n! A [1] $end
$var wire 1 o! A [0] $end
$var wire 1 g$ B [3] $end
$var wire 1 h$ B [2] $end
$var wire 1 i$ B [1] $end
$var wire 1 j$ B [0] $end
$var wire 1 {$ Sum [3] $end
$var wire 1 |$ Sum [2] $end
$var wire 1 }$ Sum [1] $end
$var wire 1 ~$ Sum [0] $end
$var wire 1 Y$ Cin $end
$var wire 1 n$ Cout $end
$var wire 1 %% C [3] $end
$var wire 1 &% C [2] $end
$var wire 1 '% C [1] $end
$var wire 1 (% C [0] $end
$var wire 1 )% ovfl_pos $end
$var wire 1 *% ovfl_neg $end
$var wire 1 +% P [3] $end
$var wire 1 ,% P [2] $end
$var wire 1 -% P [1] $end
$var wire 1 .% P [0] $end
$var wire 1 /% G [3] $end
$var wire 1 0% G [2] $end
$var wire 1 1% G [1] $end
$var wire 1 2% G [0] $end
$upscope $end

$scope module mb1 $end
$var wire 1 h! A [3] $end
$var wire 1 i! A [2] $end
$var wire 1 j! A [1] $end
$var wire 1 k! A [0] $end
$var wire 1 c$ B [3] $end
$var wire 1 d$ B [2] $end
$var wire 1 e$ B [1] $end
$var wire 1 f$ B [0] $end
$var wire 1 w$ Sum [3] $end
$var wire 1 x$ Sum [2] $end
$var wire 1 y$ Sum [1] $end
$var wire 1 z$ Sum [0] $end
$var wire 1 n$ Cin $end
$var wire 1 m$ Cout $end
$var wire 1 3% C [3] $end
$var wire 1 4% C [2] $end
$var wire 1 5% C [1] $end
$var wire 1 6% C [0] $end
$var wire 1 7% ovfl_pos $end
$var wire 1 8% ovfl_neg $end
$var wire 1 9% P [3] $end
$var wire 1 :% P [2] $end
$var wire 1 ;% P [1] $end
$var wire 1 <% P [0] $end
$var wire 1 =% G [3] $end
$var wire 1 >% G [2] $end
$var wire 1 ?% G [1] $end
$var wire 1 @% G [0] $end
$upscope $end

$scope module mb2 $end
$var wire 1 d! A [3] $end
$var wire 1 e! A [2] $end
$var wire 1 f! A [1] $end
$var wire 1 g! A [0] $end
$var wire 1 _$ B [3] $end
$var wire 1 `$ B [2] $end
$var wire 1 a$ B [1] $end
$var wire 1 b$ B [0] $end
$var wire 1 s$ Sum [3] $end
$var wire 1 t$ Sum [2] $end
$var wire 1 u$ Sum [1] $end
$var wire 1 v$ Sum [0] $end
$var wire 1 m$ Cin $end
$var wire 1 l$ Cout $end
$var wire 1 A% C [3] $end
$var wire 1 B% C [2] $end
$var wire 1 C% C [1] $end
$var wire 1 D% C [0] $end
$var wire 1 E% ovfl_pos $end
$var wire 1 F% ovfl_neg $end
$var wire 1 G% P [3] $end
$var wire 1 H% P [2] $end
$var wire 1 I% P [1] $end
$var wire 1 J% P [0] $end
$var wire 1 K% G [3] $end
$var wire 1 L% G [2] $end
$var wire 1 M% G [1] $end
$var wire 1 N% G [0] $end
$upscope $end

$scope module msb $end
$var wire 1 `! A [3] $end
$var wire 1 a! A [2] $end
$var wire 1 b! A [1] $end
$var wire 1 c! A [0] $end
$var wire 1 [$ B [3] $end
$var wire 1 \$ B [2] $end
$var wire 1 ]$ B [1] $end
$var wire 1 ^$ B [0] $end
$var wire 1 o$ Sum [3] $end
$var wire 1 p$ Sum [2] $end
$var wire 1 q$ Sum [1] $end
$var wire 1 r$ Sum [0] $end
$var wire 1 l$ Cin $end
$var wire 1 k$ Cout $end
$var wire 1 O% C [3] $end
$var wire 1 P% C [2] $end
$var wire 1 Q% C [1] $end
$var wire 1 R% C [0] $end
$var wire 1 S% ovfl_pos $end
$var wire 1 T% ovfl_neg $end
$var wire 1 U% P [3] $end
$var wire 1 V% P [2] $end
$var wire 1 W% P [1] $end
$var wire 1 X% P [0] $end
$var wire 1 Y% G [3] $end
$var wire 1 Z% G [2] $end
$var wire 1 [% G [1] $end
$var wire 1 \% G [0] $end
$upscope $end
$upscope $end
$upscope $end

$scope module controlunit $end
$var wire 1 L! instruction [3] $end
$var wire 1 M! instruction [2] $end
$var wire 1 N! instruction [1] $end
$var wire 1 O! instruction [0] $end
$var reg 1 ]% RegWrite $end
$var reg 1 ^% MemRead $end
$var reg 1 _% MemWrite $end
$var reg 1 `% Branch $end
$var reg 1 a% MemtoReg $end
$var reg 1 b% ALUSrc $end
$var reg 1 c% pcs_select $end
$var reg 1 d% hlt_select $end
$var reg 1 e% ALUSrc8bit $end
$var reg 1 f% error $end
$upscope $end

$scope module regfile $end
$var wire 1 !! clk $end
$var wire 1 "! rst $end
$var wire 1 H! SrcReg1 [3] $end
$var wire 1 I! SrcReg1 [2] $end
$var wire 1 J! SrcReg1 [1] $end
$var wire 1 K! SrcReg1 [0] $end
$var wire 1 L! SrcReg2 [3] $end
$var wire 1 M! SrcReg2 [2] $end
$var wire 1 N! SrcReg2 [1] $end
$var wire 1 O! SrcReg2 [0] $end
$var wire 1 D! DstReg [3] $end
$var wire 1 E! DstReg [2] $end
$var wire 1 F! DstReg [1] $end
$var wire 1 G! DstReg [0] $end
$var wire 1 #! WriteReg $end
$var wire 1 "" DstData [15] $end
$var wire 1 #" DstData [14] $end
$var wire 1 $" DstData [13] $end
$var wire 1 %" DstData [12] $end
$var wire 1 &" DstData [11] $end
$var wire 1 '" DstData [10] $end
$var wire 1 (" DstData [9] $end
$var wire 1 )" DstData [8] $end
$var wire 1 *" DstData [7] $end
$var wire 1 +" DstData [6] $end
$var wire 1 ," DstData [5] $end
$var wire 1 -" DstData [4] $end
$var wire 1 ." DstData [3] $end
$var wire 1 /" DstData [2] $end
$var wire 1 0" DstData [1] $end
$var wire 1 1" DstData [0] $end
$var wire 1 2" SrcData1 [15] $end
$var wire 1 3" SrcData1 [14] $end
$var wire 1 4" SrcData1 [13] $end
$var wire 1 5" SrcData1 [12] $end
$var wire 1 6" SrcData1 [11] $end
$var wire 1 7" SrcData1 [10] $end
$var wire 1 8" SrcData1 [9] $end
$var wire 1 9" SrcData1 [8] $end
$var wire 1 :" SrcData1 [7] $end
$var wire 1 ;" SrcData1 [6] $end
$var wire 1 <" SrcData1 [5] $end
$var wire 1 =" SrcData1 [4] $end
$var wire 1 >" SrcData1 [3] $end
$var wire 1 ?" SrcData1 [2] $end
$var wire 1 @" SrcData1 [1] $end
$var wire 1 A" SrcData1 [0] $end
$var wire 1 B" SrcData2 [15] $end
$var wire 1 C" SrcData2 [14] $end
$var wire 1 D" SrcData2 [13] $end
$var wire 1 E" SrcData2 [12] $end
$var wire 1 F" SrcData2 [11] $end
$var wire 1 G" SrcData2 [10] $end
$var wire 1 H" SrcData2 [9] $end
$var wire 1 I" SrcData2 [8] $end
$var wire 1 J" SrcData2 [7] $end
$var wire 1 K" SrcData2 [6] $end
$var wire 1 L" SrcData2 [5] $end
$var wire 1 M" SrcData2 [4] $end
$var wire 1 N" SrcData2 [3] $end
$var wire 1 O" SrcData2 [2] $end
$var wire 1 P" SrcData2 [1] $end
$var wire 1 Q" SrcData2 [0] $end
$var wire 1 g% read_en1 [15] $end
$var wire 1 h% read_en1 [14] $end
$var wire 1 i% read_en1 [13] $end
$var wire 1 j% read_en1 [12] $end
$var wire 1 k% read_en1 [11] $end
$var wire 1 l% read_en1 [10] $end
$var wire 1 m% read_en1 [9] $end
$var wire 1 n% read_en1 [8] $end
$var wire 1 o% read_en1 [7] $end
$var wire 1 p% read_en1 [6] $end
$var wire 1 q% read_en1 [5] $end
$var wire 1 r% read_en1 [4] $end
$var wire 1 s% read_en1 [3] $end
$var wire 1 t% read_en1 [2] $end
$var wire 1 u% read_en1 [1] $end
$var wire 1 v% read_en1 [0] $end
$var wire 1 w% read_en2 [15] $end
$var wire 1 x% read_en2 [14] $end
$var wire 1 y% read_en2 [13] $end
$var wire 1 z% read_en2 [12] $end
$var wire 1 {% read_en2 [11] $end
$var wire 1 |% read_en2 [10] $end
$var wire 1 }% read_en2 [9] $end
$var wire 1 ~% read_en2 [8] $end
$var wire 1 !& read_en2 [7] $end
$var wire 1 "& read_en2 [6] $end
$var wire 1 #& read_en2 [5] $end
$var wire 1 $& read_en2 [4] $end
$var wire 1 %& read_en2 [3] $end
$var wire 1 && read_en2 [2] $end
$var wire 1 '& read_en2 [1] $end
$var wire 1 (& read_en2 [0] $end
$var wire 1 )& write_en [15] $end
$var wire 1 *& write_en [14] $end
$var wire 1 +& write_en [13] $end
$var wire 1 ,& write_en [12] $end
$var wire 1 -& write_en [11] $end
$var wire 1 .& write_en [10] $end
$var wire 1 /& write_en [9] $end
$var wire 1 0& write_en [8] $end
$var wire 1 1& write_en [7] $end
$var wire 1 2& write_en [6] $end
$var wire 1 3& write_en [5] $end
$var wire 1 4& write_en [4] $end
$var wire 1 5& write_en [3] $end
$var wire 1 6& write_en [2] $end
$var wire 1 7& write_en [1] $end
$var wire 1 8& write_en [0] $end
$var wire 1 9& data1 [15] $end
$var wire 1 :& data1 [14] $end
$var wire 1 ;& data1 [13] $end
$var wire 1 <& data1 [12] $end
$var wire 1 =& data1 [11] $end
$var wire 1 >& data1 [10] $end
$var wire 1 ?& data1 [9] $end
$var wire 1 @& data1 [8] $end
$var wire 1 A& data1 [7] $end
$var wire 1 B& data1 [6] $end
$var wire 1 C& data1 [5] $end
$var wire 1 D& data1 [4] $end
$var wire 1 E& data1 [3] $end
$var wire 1 F& data1 [2] $end
$var wire 1 G& data1 [1] $end
$var wire 1 H& data1 [0] $end
$var wire 1 I& data2 [15] $end
$var wire 1 J& data2 [14] $end
$var wire 1 K& data2 [13] $end
$var wire 1 L& data2 [12] $end
$var wire 1 M& data2 [11] $end
$var wire 1 N& data2 [10] $end
$var wire 1 O& data2 [9] $end
$var wire 1 P& data2 [8] $end
$var wire 1 Q& data2 [7] $end
$var wire 1 R& data2 [6] $end
$var wire 1 S& data2 [5] $end
$var wire 1 T& data2 [4] $end
$var wire 1 U& data2 [3] $end
$var wire 1 V& data2 [2] $end
$var wire 1 W& data2 [1] $end
$var wire 1 X& data2 [0] $end

$scope module regdec1 $end
$var wire 1 H! RegId [3] $end
$var wire 1 I! RegId [2] $end
$var wire 1 J! RegId [1] $end
$var wire 1 K! RegId [0] $end
$var wire 1 g% Wordline [15] $end
$var wire 1 h% Wordline [14] $end
$var wire 1 i% Wordline [13] $end
$var wire 1 j% Wordline [12] $end
$var wire 1 k% Wordline [11] $end
$var wire 1 l% Wordline [10] $end
$var wire 1 m% Wordline [9] $end
$var wire 1 n% Wordline [8] $end
$var wire 1 o% Wordline [7] $end
$var wire 1 p% Wordline [6] $end
$var wire 1 q% Wordline [5] $end
$var wire 1 r% Wordline [4] $end
$var wire 1 s% Wordline [3] $end
$var wire 1 t% Wordline [2] $end
$var wire 1 u% Wordline [1] $end
$var wire 1 v% Wordline [0] $end
$var wire 1 Y& shift1 [15] $end
$var wire 1 Z& shift1 [14] $end
$var wire 1 [& shift1 [13] $end
$var wire 1 \& shift1 [12] $end
$var wire 1 ]& shift1 [11] $end
$var wire 1 ^& shift1 [10] $end
$var wire 1 _& shift1 [9] $end
$var wire 1 `& shift1 [8] $end
$var wire 1 a& shift1 [7] $end
$var wire 1 b& shift1 [6] $end
$var wire 1 c& shift1 [5] $end
$var wire 1 d& shift1 [4] $end
$var wire 1 e& shift1 [3] $end
$var wire 1 f& shift1 [2] $end
$var wire 1 g& shift1 [1] $end
$var wire 1 h& shift1 [0] $end
$var wire 1 i& shift2 [15] $end
$var wire 1 j& shift2 [14] $end
$var wire 1 k& shift2 [13] $end
$var wire 1 l& shift2 [12] $end
$var wire 1 m& shift2 [11] $end
$var wire 1 n& shift2 [10] $end
$var wire 1 o& shift2 [9] $end
$var wire 1 p& shift2 [8] $end
$var wire 1 q& shift2 [7] $end
$var wire 1 r& shift2 [6] $end
$var wire 1 s& shift2 [5] $end
$var wire 1 t& shift2 [4] $end
$var wire 1 u& shift2 [3] $end
$var wire 1 v& shift2 [2] $end
$var wire 1 w& shift2 [1] $end
$var wire 1 x& shift2 [0] $end
$var wire 1 y& shift4 [15] $end
$var wire 1 z& shift4 [14] $end
$var wire 1 {& shift4 [13] $end
$var wire 1 |& shift4 [12] $end
$var wire 1 }& shift4 [11] $end
$var wire 1 ~& shift4 [10] $end
$var wire 1 !' shift4 [9] $end
$var wire 1 "' shift4 [8] $end
$var wire 1 #' shift4 [7] $end
$var wire 1 $' shift4 [6] $end
$var wire 1 %' shift4 [5] $end
$var wire 1 &' shift4 [4] $end
$var wire 1 '' shift4 [3] $end
$var wire 1 (' shift4 [2] $end
$var wire 1 )' shift4 [1] $end
$var wire 1 *' shift4 [0] $end
$upscope $end

$scope module regdec2 $end
$var wire 1 L! RegId [3] $end
$var wire 1 M! RegId [2] $end
$var wire 1 N! RegId [1] $end
$var wire 1 O! RegId [0] $end
$var wire 1 w% Wordline [15] $end
$var wire 1 x% Wordline [14] $end
$var wire 1 y% Wordline [13] $end
$var wire 1 z% Wordline [12] $end
$var wire 1 {% Wordline [11] $end
$var wire 1 |% Wordline [10] $end
$var wire 1 }% Wordline [9] $end
$var wire 1 ~% Wordline [8] $end
$var wire 1 !& Wordline [7] $end
$var wire 1 "& Wordline [6] $end
$var wire 1 #& Wordline [5] $end
$var wire 1 $& Wordline [4] $end
$var wire 1 %& Wordline [3] $end
$var wire 1 && Wordline [2] $end
$var wire 1 '& Wordline [1] $end
$var wire 1 (& Wordline [0] $end
$var wire 1 +' shift1 [15] $end
$var wire 1 ,' shift1 [14] $end
$var wire 1 -' shift1 [13] $end
$var wire 1 .' shift1 [12] $end
$var wire 1 /' shift1 [11] $end
$var wire 1 0' shift1 [10] $end
$var wire 1 1' shift1 [9] $end
$var wire 1 2' shift1 [8] $end
$var wire 1 3' shift1 [7] $end
$var wire 1 4' shift1 [6] $end
$var wire 1 5' shift1 [5] $end
$var wire 1 6' shift1 [4] $end
$var wire 1 7' shift1 [3] $end
$var wire 1 8' shift1 [2] $end
$var wire 1 9' shift1 [1] $end
$var wire 1 :' shift1 [0] $end
$var wire 1 ;' shift2 [15] $end
$var wire 1 <' shift2 [14] $end
$var wire 1 =' shift2 [13] $end
$var wire 1 >' shift2 [12] $end
$var wire 1 ?' shift2 [11] $end
$var wire 1 @' shift2 [10] $end
$var wire 1 A' shift2 [9] $end
$var wire 1 B' shift2 [8] $end
$var wire 1 C' shift2 [7] $end
$var wire 1 D' shift2 [6] $end
$var wire 1 E' shift2 [5] $end
$var wire 1 F' shift2 [4] $end
$var wire 1 G' shift2 [3] $end
$var wire 1 H' shift2 [2] $end
$var wire 1 I' shift2 [1] $end
$var wire 1 J' shift2 [0] $end
$var wire 1 K' shift4 [15] $end
$var wire 1 L' shift4 [14] $end
$var wire 1 M' shift4 [13] $end
$var wire 1 N' shift4 [12] $end
$var wire 1 O' shift4 [11] $end
$var wire 1 P' shift4 [10] $end
$var wire 1 Q' shift4 [9] $end
$var wire 1 R' shift4 [8] $end
$var wire 1 S' shift4 [7] $end
$var wire 1 T' shift4 [6] $end
$var wire 1 U' shift4 [5] $end
$var wire 1 V' shift4 [4] $end
$var wire 1 W' shift4 [3] $end
$var wire 1 X' shift4 [2] $end
$var wire 1 Y' shift4 [1] $end
$var wire 1 Z' shift4 [0] $end
$upscope $end

$scope module writedec $end
$var wire 1 D! RegId [3] $end
$var wire 1 E! RegId [2] $end
$var wire 1 F! RegId [1] $end
$var wire 1 G! RegId [0] $end
$var wire 1 #! WriteReg $end
$var wire 1 )& Wordline [15] $end
$var wire 1 *& Wordline [14] $end
$var wire 1 +& Wordline [13] $end
$var wire 1 ,& Wordline [12] $end
$var wire 1 -& Wordline [11] $end
$var wire 1 .& Wordline [10] $end
$var wire 1 /& Wordline [9] $end
$var wire 1 0& Wordline [8] $end
$var wire 1 1& Wordline [7] $end
$var wire 1 2& Wordline [6] $end
$var wire 1 3& Wordline [5] $end
$var wire 1 4& Wordline [4] $end
$var wire 1 5& Wordline [3] $end
$var wire 1 6& Wordline [2] $end
$var wire 1 7& Wordline [1] $end
$var wire 1 8& Wordline [0] $end
$var wire 1 [' shift1 [15] $end
$var wire 1 \' shift1 [14] $end
$var wire 1 ]' shift1 [13] $end
$var wire 1 ^' shift1 [12] $end
$var wire 1 _' shift1 [11] $end
$var wire 1 `' shift1 [10] $end
$var wire 1 a' shift1 [9] $end
$var wire 1 b' shift1 [8] $end
$var wire 1 c' shift1 [7] $end
$var wire 1 d' shift1 [6] $end
$var wire 1 e' shift1 [5] $end
$var wire 1 f' shift1 [4] $end
$var wire 1 g' shift1 [3] $end
$var wire 1 h' shift1 [2] $end
$var wire 1 i' shift1 [1] $end
$var wire 1 j' shift1 [0] $end
$var wire 1 k' shift2 [15] $end
$var wire 1 l' shift2 [14] $end
$var wire 1 m' shift2 [13] $end
$var wire 1 n' shift2 [12] $end
$var wire 1 o' shift2 [11] $end
$var wire 1 p' shift2 [10] $end
$var wire 1 q' shift2 [9] $end
$var wire 1 r' shift2 [8] $end
$var wire 1 s' shift2 [7] $end
$var wire 1 t' shift2 [6] $end
$var wire 1 u' shift2 [5] $end
$var wire 1 v' shift2 [4] $end
$var wire 1 w' shift2 [3] $end
$var wire 1 x' shift2 [2] $end
$var wire 1 y' shift2 [1] $end
$var wire 1 z' shift2 [0] $end
$var wire 1 {' shift4 [15] $end
$var wire 1 |' shift4 [14] $end
$var wire 1 }' shift4 [13] $end
$var wire 1 ~' shift4 [12] $end
$var wire 1 !( shift4 [11] $end
$var wire 1 "( shift4 [10] $end
$var wire 1 #( shift4 [9] $end
$var wire 1 $( shift4 [8] $end
$var wire 1 %( shift4 [7] $end
$var wire 1 &( shift4 [6] $end
$var wire 1 '( shift4 [5] $end
$var wire 1 (( shift4 [4] $end
$var wire 1 )( shift4 [3] $end
$var wire 1 *( shift4 [2] $end
$var wire 1 +( shift4 [1] $end
$var wire 1 ,( shift4 [0] $end
$upscope $end

$scope module regs[15] $end
$var wire 1 !! clk $end
$var wire 1 "! rst $end
$var wire 1 "" D [15] $end
$var wire 1 #" D [14] $end
$var wire 1 $" D [13] $end
$var wire 1 %" D [12] $end
$var wire 1 &" D [11] $end
$var wire 1 '" D [10] $end
$var wire 1 (" D [9] $end
$var wire 1 )" D [8] $end
$var wire 1 *" D [7] $end
$var wire 1 +" D [6] $end
$var wire 1 ," D [5] $end
$var wire 1 -" D [4] $end
$var wire 1 ." D [3] $end
$var wire 1 /" D [2] $end
$var wire 1 0" D [1] $end
$var wire 1 1" D [0] $end
$var wire 1 )& WriteReg $end
$var wire 1 g% ReadEnable1 $end
$var wire 1 w% ReadEnable2 $end
$var wire 1 9& Bitline1 [15] $end
$var wire 1 :& Bitline1 [14] $end
$var wire 1 ;& Bitline1 [13] $end
$var wire 1 <& Bitline1 [12] $end
$var wire 1 =& Bitline1 [11] $end
$var wire 1 >& Bitline1 [10] $end
$var wire 1 ?& Bitline1 [9] $end
$var wire 1 @& Bitline1 [8] $end
$var wire 1 A& Bitline1 [7] $end
$var wire 1 B& Bitline1 [6] $end
$var wire 1 C& Bitline1 [5] $end
$var wire 1 D& Bitline1 [4] $end
$var wire 1 E& Bitline1 [3] $end
$var wire 1 F& Bitline1 [2] $end
$var wire 1 G& Bitline1 [1] $end
$var wire 1 H& Bitline1 [0] $end
$var wire 1 I& Bitline2 [15] $end
$var wire 1 J& Bitline2 [14] $end
$var wire 1 K& Bitline2 [13] $end
$var wire 1 L& Bitline2 [12] $end
$var wire 1 M& Bitline2 [11] $end
$var wire 1 N& Bitline2 [10] $end
$var wire 1 O& Bitline2 [9] $end
$var wire 1 P& Bitline2 [8] $end
$var wire 1 Q& Bitline2 [7] $end
$var wire 1 R& Bitline2 [6] $end
$var wire 1 S& Bitline2 [5] $end
$var wire 1 T& Bitline2 [4] $end
$var wire 1 U& Bitline2 [3] $end
$var wire 1 V& Bitline2 [2] $end
$var wire 1 W& Bitline2 [1] $end
$var wire 1 X& Bitline2 [0] $end

$scope module cells[15] $end
$var wire 1 !! clk $end
$var wire 1 "! rst $end
$var wire 1 "" D $end
$var wire 1 )& WriteEnable $end
$var wire 1 g% ReadEnable1 $end
$var wire 1 w% ReadEnable2 $end
$var wire 1 9& Bitline1 $end
$var wire 1 I& Bitline2 $end
$var wire 1 -( Q $end

$scope module flop $end
$var wire 1 -( q $end
$var wire 1 "" d $end
$var wire 1 )& wen $end
$var wire 1 !! clk $end
$var wire 1 "! rst $end
$var reg 1 .( state $end
$upscope $end
$upscope $end

$scope module cells[14] $end
$var wire 1 !! clk $end
$var wire 1 "! rst $end
$var wire 1 #" D $end
$var wire 1 )& WriteEnable $end
$var wire 1 g% ReadEnable1 $end
$var wire 1 w% ReadEnable2 $end
$var wire 1 :& Bitline1 $end
$var wire 1 J& Bitline2 $end
$var wire 1 /( Q $end

$scope module flop $end
$var wire 1 /( q $end
$var wire 1 #" d $end
$var wire 1 )& wen $end
$var wire 1 !! clk $end
$var wire 1 "! rst $end
$var reg 1 0( state $end
$upscope $end
$upscope $end

$scope module cells[13] $end
$var wire 1 !! clk $end
$var wire 1 "! rst $end
$var wire 1 $" D $end
$var wire 1 )& WriteEnable $end
$var wire 1 g% ReadEnable1 $end
$var wire 1 w% ReadEnable2 $end
$var wire 1 ;& Bitline1 $end
$var wire 1 K& Bitline2 $end
$var wire 1 1( Q $end

$scope module flop $end
$var wire 1 1( q $end
$var wire 1 $" d $end
$var wire 1 )& wen $end
$var wire 1 !! clk $end
$var wire 1 "! rst $end
$var reg 1 2( state $end
$upscope $end
$upscope $end

$scope module cells[12] $end
$var wire 1 !! clk $end
$var wire 1 "! rst $end
$var wire 1 %" D $end
$var wire 1 )& WriteEnable $end
$var wire 1 g% ReadEnable1 $end
$var wire 1 w% ReadEnable2 $end
$var wire 1 <& Bitline1 $end
$var wire 1 L& Bitline2 $end
$var wire 1 3( Q $end

$scope module flop $end
$var wire 1 3( q $end
$var wire 1 %" d $end
$var wire 1 )& wen $end
$var wire 1 !! clk $end
$var wire 1 "! rst $end
$var reg 1 4( state $end
$upscope $end
$upscope $end

$scope module cells[11] $end
$var wire 1 !! clk $end
$var wire 1 "! rst $end
$var wire 1 &" D $end
$var wire 1 )& WriteEnable $end
$var wire 1 g% ReadEnable1 $end
$var wire 1 w% ReadEnable2 $end
$var wire 1 =& Bitline1 $end
$var wire 1 M& Bitline2 $end
$var wire 1 5( Q $end

$scope module flop $end
$var wire 1 5( q $end
$var wire 1 &" d $end
$var wire 1 )& wen $end
$var wire 1 !! clk $end
$var wire 1 "! rst $end
$var reg 1 6( state $end
$upscope $end
$upscope $end

$scope module cells[10] $end
$var wire 1 !! clk $end
$var wire 1 "! rst $end
$var wire 1 '" D $end
$var wire 1 )& WriteEnable $end
$var wire 1 g% ReadEnable1 $end
$var wire 1 w% ReadEnable2 $end
$var wire 1 >& Bitline1 $end
$var wire 1 N& Bitline2 $end
$var wire 1 7( Q $end

$scope module flop $end
$var wire 1 7( q $end
$var wire 1 '" d $end
$var wire 1 )& wen $end
$var wire 1 !! clk $end
$var wire 1 "! rst $end
$var reg 1 8( state $end
$upscope $end
$upscope $end

$scope module cells[9] $end
$var wire 1 !! clk $end
$var wire 1 "! rst $end
$var wire 1 (" D $end
$var wire 1 )& WriteEnable $end
$var wire 1 g% ReadEnable1 $end
$var wire 1 w% ReadEnable2 $end
$var wire 1 ?& Bitline1 $end
$var wire 1 O& Bitline2 $end
$var wire 1 9( Q $end

$scope module flop $end
$var wire 1 9( q $end
$var wire 1 (" d $end
$var wire 1 )& wen $end
$var wire 1 !! clk $end
$var wire 1 "! rst $end
$var reg 1 :( state $end
$upscope $end
$upscope $end

$scope module cells[8] $end
$var wire 1 !! clk $end
$var wire 1 "! rst $end
$var wire 1 )" D $end
$var wire 1 )& WriteEnable $end
$var wire 1 g% ReadEnable1 $end
$var wire 1 w% ReadEnable2 $end
$var wire 1 @& Bitline1 $end
$var wire 1 P& Bitline2 $end
$var wire 1 ;( Q $end

$scope module flop $end
$var wire 1 ;( q $end
$var wire 1 )" d $end
$var wire 1 )& wen $end
$var wire 1 !! clk $end
$var wire 1 "! rst $end
$var reg 1 <( state $end
$upscope $end
$upscope $end

$scope module cells[7] $end
$var wire 1 !! clk $end
$var wire 1 "! rst $end
$var wire 1 *" D $end
$var wire 1 )& WriteEnable $end
$var wire 1 g% ReadEnable1 $end
$var wire 1 w% ReadEnable2 $end
$var wire 1 A& Bitline1 $end
$var wire 1 Q& Bitline2 $end
$var wire 1 =( Q $end

$scope module flop $end
$var wire 1 =( q $end
$var wire 1 *" d $end
$var wire 1 )& wen $end
$var wire 1 !! clk $end
$var wire 1 "! rst $end
$var reg 1 >( state $end
$upscope $end
$upscope $end

$scope module cells[6] $end
$var wire 1 !! clk $end
$var wire 1 "! rst $end
$var wire 1 +" D $end
$var wire 1 )& WriteEnable $end
$var wire 1 g% ReadEnable1 $end
$var wire 1 w% ReadEnable2 $end
$var wire 1 B& Bitline1 $end
$var wire 1 R& Bitline2 $end
$var wire 1 ?( Q $end

$scope module flop $end
$var wire 1 ?( q $end
$var wire 1 +" d $end
$var wire 1 )& wen $end
$var wire 1 !! clk $end
$var wire 1 "! rst $end
$var reg 1 @( state $end
$upscope $end
$upscope $end

$scope module cells[5] $end
$var wire 1 !! clk $end
$var wire 1 "! rst $end
$var wire 1 ," D $end
$var wire 1 )& WriteEnable $end
$var wire 1 g% ReadEnable1 $end
$var wire 1 w% ReadEnable2 $end
$var wire 1 C& Bitline1 $end
$var wire 1 S& Bitline2 $end
$var wire 1 A( Q $end

$scope module flop $end
$var wire 1 A( q $end
$var wire 1 ," d $end
$var wire 1 )& wen $end
$var wire 1 !! clk $end
$var wire 1 "! rst $end
$var reg 1 B( state $end
$upscope $end
$upscope $end

$scope module cells[4] $end
$var wire 1 !! clk $end
$var wire 1 "! rst $end
$var wire 1 -" D $end
$var wire 1 )& WriteEnable $end
$var wire 1 g% ReadEnable1 $end
$var wire 1 w% ReadEnable2 $end
$var wire 1 D& Bitline1 $end
$var wire 1 T& Bitline2 $end
$var wire 1 C( Q $end

$scope module flop $end
$var wire 1 C( q $end
$var wire 1 -" d $end
$var wire 1 )& wen $end
$var wire 1 !! clk $end
$var wire 1 "! rst $end
$var reg 1 D( state $end
$upscope $end
$upscope $end

$scope module cells[3] $end
$var wire 1 !! clk $end
$var wire 1 "! rst $end
$var wire 1 ." D $end
$var wire 1 )& WriteEnable $end
$var wire 1 g% ReadEnable1 $end
$var wire 1 w% ReadEnable2 $end
$var wire 1 E& Bitline1 $end
$var wire 1 U& Bitline2 $end
$var wire 1 E( Q $end

$scope module flop $end
$var wire 1 E( q $end
$var wire 1 ." d $end
$var wire 1 )& wen $end
$var wire 1 !! clk $end
$var wire 1 "! rst $end
$var reg 1 F( state $end
$upscope $end
$upscope $end

$scope module cells[2] $end
$var wire 1 !! clk $end
$var wire 1 "! rst $end
$var wire 1 /" D $end
$var wire 1 )& WriteEnable $end
$var wire 1 g% ReadEnable1 $end
$var wire 1 w% ReadEnable2 $end
$var wire 1 F& Bitline1 $end
$var wire 1 V& Bitline2 $end
$var wire 1 G( Q $end

$scope module flop $end
$var wire 1 G( q $end
$var wire 1 /" d $end
$var wire 1 )& wen $end
$var wire 1 !! clk $end
$var wire 1 "! rst $end
$var reg 1 H( state $end
$upscope $end
$upscope $end

$scope module cells[1] $end
$var wire 1 !! clk $end
$var wire 1 "! rst $end
$var wire 1 0" D $end
$var wire 1 )& WriteEnable $end
$var wire 1 g% ReadEnable1 $end
$var wire 1 w% ReadEnable2 $end
$var wire 1 G& Bitline1 $end
$var wire 1 W& Bitline2 $end
$var wire 1 I( Q $end

$scope module flop $end
$var wire 1 I( q $end
$var wire 1 0" d $end
$var wire 1 )& wen $end
$var wire 1 !! clk $end
$var wire 1 "! rst $end
$var reg 1 J( state $end
$upscope $end
$upscope $end

$scope module cells[0] $end
$var wire 1 !! clk $end
$var wire 1 "! rst $end
$var wire 1 1" D $end
$var wire 1 )& WriteEnable $end
$var wire 1 g% ReadEnable1 $end
$var wire 1 w% ReadEnable2 $end
$var wire 1 H& Bitline1 $end
$var wire 1 X& Bitline2 $end
$var wire 1 K( Q $end

$scope module flop $end
$var wire 1 K( q $end
$var wire 1 1" d $end
$var wire 1 )& wen $end
$var wire 1 !! clk $end
$var wire 1 "! rst $end
$var reg 1 L( state $end
$upscope $end
$upscope $end
$upscope $end

$scope module regs[14] $end
$var wire 1 !! clk $end
$var wire 1 "! rst $end
$var wire 1 "" D [15] $end
$var wire 1 #" D [14] $end
$var wire 1 $" D [13] $end
$var wire 1 %" D [12] $end
$var wire 1 &" D [11] $end
$var wire 1 '" D [10] $end
$var wire 1 (" D [9] $end
$var wire 1 )" D [8] $end
$var wire 1 *" D [7] $end
$var wire 1 +" D [6] $end
$var wire 1 ," D [5] $end
$var wire 1 -" D [4] $end
$var wire 1 ." D [3] $end
$var wire 1 /" D [2] $end
$var wire 1 0" D [1] $end
$var wire 1 1" D [0] $end
$var wire 1 *& WriteReg $end
$var wire 1 h% ReadEnable1 $end
$var wire 1 x% ReadEnable2 $end
$var wire 1 9& Bitline1 [15] $end
$var wire 1 :& Bitline1 [14] $end
$var wire 1 ;& Bitline1 [13] $end
$var wire 1 <& Bitline1 [12] $end
$var wire 1 =& Bitline1 [11] $end
$var wire 1 >& Bitline1 [10] $end
$var wire 1 ?& Bitline1 [9] $end
$var wire 1 @& Bitline1 [8] $end
$var wire 1 A& Bitline1 [7] $end
$var wire 1 B& Bitline1 [6] $end
$var wire 1 C& Bitline1 [5] $end
$var wire 1 D& Bitline1 [4] $end
$var wire 1 E& Bitline1 [3] $end
$var wire 1 F& Bitline1 [2] $end
$var wire 1 G& Bitline1 [1] $end
$var wire 1 H& Bitline1 [0] $end
$var wire 1 I& Bitline2 [15] $end
$var wire 1 J& Bitline2 [14] $end
$var wire 1 K& Bitline2 [13] $end
$var wire 1 L& Bitline2 [12] $end
$var wire 1 M& Bitline2 [11] $end
$var wire 1 N& Bitline2 [10] $end
$var wire 1 O& Bitline2 [9] $end
$var wire 1 P& Bitline2 [8] $end
$var wire 1 Q& Bitline2 [7] $end
$var wire 1 R& Bitline2 [6] $end
$var wire 1 S& Bitline2 [5] $end
$var wire 1 T& Bitline2 [4] $end
$var wire 1 U& Bitline2 [3] $end
$var wire 1 V& Bitline2 [2] $end
$var wire 1 W& Bitline2 [1] $end
$var wire 1 X& Bitline2 [0] $end

$scope module cells[15] $end
$var wire 1 !! clk $end
$var wire 1 "! rst $end
$var wire 1 "" D $end
$var wire 1 *& WriteEnable $end
$var wire 1 h% ReadEnable1 $end
$var wire 1 x% ReadEnable2 $end
$var wire 1 9& Bitline1 $end
$var wire 1 I& Bitline2 $end
$var wire 1 M( Q $end

$scope module flop $end
$var wire 1 M( q $end
$var wire 1 "" d $end
$var wire 1 *& wen $end
$var wire 1 !! clk $end
$var wire 1 "! rst $end
$var reg 1 N( state $end
$upscope $end
$upscope $end

$scope module cells[14] $end
$var wire 1 !! clk $end
$var wire 1 "! rst $end
$var wire 1 #" D $end
$var wire 1 *& WriteEnable $end
$var wire 1 h% ReadEnable1 $end
$var wire 1 x% ReadEnable2 $end
$var wire 1 :& Bitline1 $end
$var wire 1 J& Bitline2 $end
$var wire 1 O( Q $end

$scope module flop $end
$var wire 1 O( q $end
$var wire 1 #" d $end
$var wire 1 *& wen $end
$var wire 1 !! clk $end
$var wire 1 "! rst $end
$var reg 1 P( state $end
$upscope $end
$upscope $end

$scope module cells[13] $end
$var wire 1 !! clk $end
$var wire 1 "! rst $end
$var wire 1 $" D $end
$var wire 1 *& WriteEnable $end
$var wire 1 h% ReadEnable1 $end
$var wire 1 x% ReadEnable2 $end
$var wire 1 ;& Bitline1 $end
$var wire 1 K& Bitline2 $end
$var wire 1 Q( Q $end

$scope module flop $end
$var wire 1 Q( q $end
$var wire 1 $" d $end
$var wire 1 *& wen $end
$var wire 1 !! clk $end
$var wire 1 "! rst $end
$var reg 1 R( state $end
$upscope $end
$upscope $end

$scope module cells[12] $end
$var wire 1 !! clk $end
$var wire 1 "! rst $end
$var wire 1 %" D $end
$var wire 1 *& WriteEnable $end
$var wire 1 h% ReadEnable1 $end
$var wire 1 x% ReadEnable2 $end
$var wire 1 <& Bitline1 $end
$var wire 1 L& Bitline2 $end
$var wire 1 S( Q $end

$scope module flop $end
$var wire 1 S( q $end
$var wire 1 %" d $end
$var wire 1 *& wen $end
$var wire 1 !! clk $end
$var wire 1 "! rst $end
$var reg 1 T( state $end
$upscope $end
$upscope $end

$scope module cells[11] $end
$var wire 1 !! clk $end
$var wire 1 "! rst $end
$var wire 1 &" D $end
$var wire 1 *& WriteEnable $end
$var wire 1 h% ReadEnable1 $end
$var wire 1 x% ReadEnable2 $end
$var wire 1 =& Bitline1 $end
$var wire 1 M& Bitline2 $end
$var wire 1 U( Q $end

$scope module flop $end
$var wire 1 U( q $end
$var wire 1 &" d $end
$var wire 1 *& wen $end
$var wire 1 !! clk $end
$var wire 1 "! rst $end
$var reg 1 V( state $end
$upscope $end
$upscope $end

$scope module cells[10] $end
$var wire 1 !! clk $end
$var wire 1 "! rst $end
$var wire 1 '" D $end
$var wire 1 *& WriteEnable $end
$var wire 1 h% ReadEnable1 $end
$var wire 1 x% ReadEnable2 $end
$var wire 1 >& Bitline1 $end
$var wire 1 N& Bitline2 $end
$var wire 1 W( Q $end

$scope module flop $end
$var wire 1 W( q $end
$var wire 1 '" d $end
$var wire 1 *& wen $end
$var wire 1 !! clk $end
$var wire 1 "! rst $end
$var reg 1 X( state $end
$upscope $end
$upscope $end

$scope module cells[9] $end
$var wire 1 !! clk $end
$var wire 1 "! rst $end
$var wire 1 (" D $end
$var wire 1 *& WriteEnable $end
$var wire 1 h% ReadEnable1 $end
$var wire 1 x% ReadEnable2 $end
$var wire 1 ?& Bitline1 $end
$var wire 1 O& Bitline2 $end
$var wire 1 Y( Q $end

$scope module flop $end
$var wire 1 Y( q $end
$var wire 1 (" d $end
$var wire 1 *& wen $end
$var wire 1 !! clk $end
$var wire 1 "! rst $end
$var reg 1 Z( state $end
$upscope $end
$upscope $end

$scope module cells[8] $end
$var wire 1 !! clk $end
$var wire 1 "! rst $end
$var wire 1 )" D $end
$var wire 1 *& WriteEnable $end
$var wire 1 h% ReadEnable1 $end
$var wire 1 x% ReadEnable2 $end
$var wire 1 @& Bitline1 $end
$var wire 1 P& Bitline2 $end
$var wire 1 [( Q $end

$scope module flop $end
$var wire 1 [( q $end
$var wire 1 )" d $end
$var wire 1 *& wen $end
$var wire 1 !! clk $end
$var wire 1 "! rst $end
$var reg 1 \( state $end
$upscope $end
$upscope $end

$scope module cells[7] $end
$var wire 1 !! clk $end
$var wire 1 "! rst $end
$var wire 1 *" D $end
$var wire 1 *& WriteEnable $end
$var wire 1 h% ReadEnable1 $end
$var wire 1 x% ReadEnable2 $end
$var wire 1 A& Bitline1 $end
$var wire 1 Q& Bitline2 $end
$var wire 1 ]( Q $end

$scope module flop $end
$var wire 1 ]( q $end
$var wire 1 *" d $end
$var wire 1 *& wen $end
$var wire 1 !! clk $end
$var wire 1 "! rst $end
$var reg 1 ^( state $end
$upscope $end
$upscope $end

$scope module cells[6] $end
$var wire 1 !! clk $end
$var wire 1 "! rst $end
$var wire 1 +" D $end
$var wire 1 *& WriteEnable $end
$var wire 1 h% ReadEnable1 $end
$var wire 1 x% ReadEnable2 $end
$var wire 1 B& Bitline1 $end
$var wire 1 R& Bitline2 $end
$var wire 1 _( Q $end

$scope module flop $end
$var wire 1 _( q $end
$var wire 1 +" d $end
$var wire 1 *& wen $end
$var wire 1 !! clk $end
$var wire 1 "! rst $end
$var reg 1 `( state $end
$upscope $end
$upscope $end

$scope module cells[5] $end
$var wire 1 !! clk $end
$var wire 1 "! rst $end
$var wire 1 ," D $end
$var wire 1 *& WriteEnable $end
$var wire 1 h% ReadEnable1 $end
$var wire 1 x% ReadEnable2 $end
$var wire 1 C& Bitline1 $end
$var wire 1 S& Bitline2 $end
$var wire 1 a( Q $end

$scope module flop $end
$var wire 1 a( q $end
$var wire 1 ," d $end
$var wire 1 *& wen $end
$var wire 1 !! clk $end
$var wire 1 "! rst $end
$var reg 1 b( state $end
$upscope $end
$upscope $end

$scope module cells[4] $end
$var wire 1 !! clk $end
$var wire 1 "! rst $end
$var wire 1 -" D $end
$var wire 1 *& WriteEnable $end
$var wire 1 h% ReadEnable1 $end
$var wire 1 x% ReadEnable2 $end
$var wire 1 D& Bitline1 $end
$var wire 1 T& Bitline2 $end
$var wire 1 c( Q $end

$scope module flop $end
$var wire 1 c( q $end
$var wire 1 -" d $end
$var wire 1 *& wen $end
$var wire 1 !! clk $end
$var wire 1 "! rst $end
$var reg 1 d( state $end
$upscope $end
$upscope $end

$scope module cells[3] $end
$var wire 1 !! clk $end
$var wire 1 "! rst $end
$var wire 1 ." D $end
$var wire 1 *& WriteEnable $end
$var wire 1 h% ReadEnable1 $end
$var wire 1 x% ReadEnable2 $end
$var wire 1 E& Bitline1 $end
$var wire 1 U& Bitline2 $end
$var wire 1 e( Q $end

$scope module flop $end
$var wire 1 e( q $end
$var wire 1 ." d $end
$var wire 1 *& wen $end
$var wire 1 !! clk $end
$var wire 1 "! rst $end
$var reg 1 f( state $end
$upscope $end
$upscope $end

$scope module cells[2] $end
$var wire 1 !! clk $end
$var wire 1 "! rst $end
$var wire 1 /" D $end
$var wire 1 *& WriteEnable $end
$var wire 1 h% ReadEnable1 $end
$var wire 1 x% ReadEnable2 $end
$var wire 1 F& Bitline1 $end
$var wire 1 V& Bitline2 $end
$var wire 1 g( Q $end

$scope module flop $end
$var wire 1 g( q $end
$var wire 1 /" d $end
$var wire 1 *& wen $end
$var wire 1 !! clk $end
$var wire 1 "! rst $end
$var reg 1 h( state $end
$upscope $end
$upscope $end

$scope module cells[1] $end
$var wire 1 !! clk $end
$var wire 1 "! rst $end
$var wire 1 0" D $end
$var wire 1 *& WriteEnable $end
$var wire 1 h% ReadEnable1 $end
$var wire 1 x% ReadEnable2 $end
$var wire 1 G& Bitline1 $end
$var wire 1 W& Bitline2 $end
$var wire 1 i( Q $end

$scope module flop $end
$var wire 1 i( q $end
$var wire 1 0" d $end
$var wire 1 *& wen $end
$var wire 1 !! clk $end
$var wire 1 "! rst $end
$var reg 1 j( state $end
$upscope $end
$upscope $end

$scope module cells[0] $end
$var wire 1 !! clk $end
$var wire 1 "! rst $end
$var wire 1 1" D $end
$var wire 1 *& WriteEnable $end
$var wire 1 h% ReadEnable1 $end
$var wire 1 x% ReadEnable2 $end
$var wire 1 H& Bitline1 $end
$var wire 1 X& Bitline2 $end
$var wire 1 k( Q $end

$scope module flop $end
$var wire 1 k( q $end
$var wire 1 1" d $end
$var wire 1 *& wen $end
$var wire 1 !! clk $end
$var wire 1 "! rst $end
$var reg 1 l( state $end
$upscope $end
$upscope $end
$upscope $end

$scope module regs[13] $end
$var wire 1 !! clk $end
$var wire 1 "! rst $end
$var wire 1 "" D [15] $end
$var wire 1 #" D [14] $end
$var wire 1 $" D [13] $end
$var wire 1 %" D [12] $end
$var wire 1 &" D [11] $end
$var wire 1 '" D [10] $end
$var wire 1 (" D [9] $end
$var wire 1 )" D [8] $end
$var wire 1 *" D [7] $end
$var wire 1 +" D [6] $end
$var wire 1 ," D [5] $end
$var wire 1 -" D [4] $end
$var wire 1 ." D [3] $end
$var wire 1 /" D [2] $end
$var wire 1 0" D [1] $end
$var wire 1 1" D [0] $end
$var wire 1 +& WriteReg $end
$var wire 1 i% ReadEnable1 $end
$var wire 1 y% ReadEnable2 $end
$var wire 1 9& Bitline1 [15] $end
$var wire 1 :& Bitline1 [14] $end
$var wire 1 ;& Bitline1 [13] $end
$var wire 1 <& Bitline1 [12] $end
$var wire 1 =& Bitline1 [11] $end
$var wire 1 >& Bitline1 [10] $end
$var wire 1 ?& Bitline1 [9] $end
$var wire 1 @& Bitline1 [8] $end
$var wire 1 A& Bitline1 [7] $end
$var wire 1 B& Bitline1 [6] $end
$var wire 1 C& Bitline1 [5] $end
$var wire 1 D& Bitline1 [4] $end
$var wire 1 E& Bitline1 [3] $end
$var wire 1 F& Bitline1 [2] $end
$var wire 1 G& Bitline1 [1] $end
$var wire 1 H& Bitline1 [0] $end
$var wire 1 I& Bitline2 [15] $end
$var wire 1 J& Bitline2 [14] $end
$var wire 1 K& Bitline2 [13] $end
$var wire 1 L& Bitline2 [12] $end
$var wire 1 M& Bitline2 [11] $end
$var wire 1 N& Bitline2 [10] $end
$var wire 1 O& Bitline2 [9] $end
$var wire 1 P& Bitline2 [8] $end
$var wire 1 Q& Bitline2 [7] $end
$var wire 1 R& Bitline2 [6] $end
$var wire 1 S& Bitline2 [5] $end
$var wire 1 T& Bitline2 [4] $end
$var wire 1 U& Bitline2 [3] $end
$var wire 1 V& Bitline2 [2] $end
$var wire 1 W& Bitline2 [1] $end
$var wire 1 X& Bitline2 [0] $end

$scope module cells[15] $end
$var wire 1 !! clk $end
$var wire 1 "! rst $end
$var wire 1 "" D $end
$var wire 1 +& WriteEnable $end
$var wire 1 i% ReadEnable1 $end
$var wire 1 y% ReadEnable2 $end
$var wire 1 9& Bitline1 $end
$var wire 1 I& Bitline2 $end
$var wire 1 m( Q $end

$scope module flop $end
$var wire 1 m( q $end
$var wire 1 "" d $end
$var wire 1 +& wen $end
$var wire 1 !! clk $end
$var wire 1 "! rst $end
$var reg 1 n( state $end
$upscope $end
$upscope $end

$scope module cells[14] $end
$var wire 1 !! clk $end
$var wire 1 "! rst $end
$var wire 1 #" D $end
$var wire 1 +& WriteEnable $end
$var wire 1 i% ReadEnable1 $end
$var wire 1 y% ReadEnable2 $end
$var wire 1 :& Bitline1 $end
$var wire 1 J& Bitline2 $end
$var wire 1 o( Q $end

$scope module flop $end
$var wire 1 o( q $end
$var wire 1 #" d $end
$var wire 1 +& wen $end
$var wire 1 !! clk $end
$var wire 1 "! rst $end
$var reg 1 p( state $end
$upscope $end
$upscope $end

$scope module cells[13] $end
$var wire 1 !! clk $end
$var wire 1 "! rst $end
$var wire 1 $" D $end
$var wire 1 +& WriteEnable $end
$var wire 1 i% ReadEnable1 $end
$var wire 1 y% ReadEnable2 $end
$var wire 1 ;& Bitline1 $end
$var wire 1 K& Bitline2 $end
$var wire 1 q( Q $end

$scope module flop $end
$var wire 1 q( q $end
$var wire 1 $" d $end
$var wire 1 +& wen $end
$var wire 1 !! clk $end
$var wire 1 "! rst $end
$var reg 1 r( state $end
$upscope $end
$upscope $end

$scope module cells[12] $end
$var wire 1 !! clk $end
$var wire 1 "! rst $end
$var wire 1 %" D $end
$var wire 1 +& WriteEnable $end
$var wire 1 i% ReadEnable1 $end
$var wire 1 y% ReadEnable2 $end
$var wire 1 <& Bitline1 $end
$var wire 1 L& Bitline2 $end
$var wire 1 s( Q $end

$scope module flop $end
$var wire 1 s( q $end
$var wire 1 %" d $end
$var wire 1 +& wen $end
$var wire 1 !! clk $end
$var wire 1 "! rst $end
$var reg 1 t( state $end
$upscope $end
$upscope $end

$scope module cells[11] $end
$var wire 1 !! clk $end
$var wire 1 "! rst $end
$var wire 1 &" D $end
$var wire 1 +& WriteEnable $end
$var wire 1 i% ReadEnable1 $end
$var wire 1 y% ReadEnable2 $end
$var wire 1 =& Bitline1 $end
$var wire 1 M& Bitline2 $end
$var wire 1 u( Q $end

$scope module flop $end
$var wire 1 u( q $end
$var wire 1 &" d $end
$var wire 1 +& wen $end
$var wire 1 !! clk $end
$var wire 1 "! rst $end
$var reg 1 v( state $end
$upscope $end
$upscope $end

$scope module cells[10] $end
$var wire 1 !! clk $end
$var wire 1 "! rst $end
$var wire 1 '" D $end
$var wire 1 +& WriteEnable $end
$var wire 1 i% ReadEnable1 $end
$var wire 1 y% ReadEnable2 $end
$var wire 1 >& Bitline1 $end
$var wire 1 N& Bitline2 $end
$var wire 1 w( Q $end

$scope module flop $end
$var wire 1 w( q $end
$var wire 1 '" d $end
$var wire 1 +& wen $end
$var wire 1 !! clk $end
$var wire 1 "! rst $end
$var reg 1 x( state $end
$upscope $end
$upscope $end

$scope module cells[9] $end
$var wire 1 !! clk $end
$var wire 1 "! rst $end
$var wire 1 (" D $end
$var wire 1 +& WriteEnable $end
$var wire 1 i% ReadEnable1 $end
$var wire 1 y% ReadEnable2 $end
$var wire 1 ?& Bitline1 $end
$var wire 1 O& Bitline2 $end
$var wire 1 y( Q $end

$scope module flop $end
$var wire 1 y( q $end
$var wire 1 (" d $end
$var wire 1 +& wen $end
$var wire 1 !! clk $end
$var wire 1 "! rst $end
$var reg 1 z( state $end
$upscope $end
$upscope $end

$scope module cells[8] $end
$var wire 1 !! clk $end
$var wire 1 "! rst $end
$var wire 1 )" D $end
$var wire 1 +& WriteEnable $end
$var wire 1 i% ReadEnable1 $end
$var wire 1 y% ReadEnable2 $end
$var wire 1 @& Bitline1 $end
$var wire 1 P& Bitline2 $end
$var wire 1 {( Q $end

$scope module flop $end
$var wire 1 {( q $end
$var wire 1 )" d $end
$var wire 1 +& wen $end
$var wire 1 !! clk $end
$var wire 1 "! rst $end
$var reg 1 |( state $end
$upscope $end
$upscope $end

$scope module cells[7] $end
$var wire 1 !! clk $end
$var wire 1 "! rst $end
$var wire 1 *" D $end
$var wire 1 +& WriteEnable $end
$var wire 1 i% ReadEnable1 $end
$var wire 1 y% ReadEnable2 $end
$var wire 1 A& Bitline1 $end
$var wire 1 Q& Bitline2 $end
$var wire 1 }( Q $end

$scope module flop $end
$var wire 1 }( q $end
$var wire 1 *" d $end
$var wire 1 +& wen $end
$var wire 1 !! clk $end
$var wire 1 "! rst $end
$var reg 1 ~( state $end
$upscope $end
$upscope $end

$scope module cells[6] $end
$var wire 1 !! clk $end
$var wire 1 "! rst $end
$var wire 1 +" D $end
$var wire 1 +& WriteEnable $end
$var wire 1 i% ReadEnable1 $end
$var wire 1 y% ReadEnable2 $end
$var wire 1 B& Bitline1 $end
$var wire 1 R& Bitline2 $end
$var wire 1 !) Q $end

$scope module flop $end
$var wire 1 !) q $end
$var wire 1 +" d $end
$var wire 1 +& wen $end
$var wire 1 !! clk $end
$var wire 1 "! rst $end
$var reg 1 ") state $end
$upscope $end
$upscope $end

$scope module cells[5] $end
$var wire 1 !! clk $end
$var wire 1 "! rst $end
$var wire 1 ," D $end
$var wire 1 +& WriteEnable $end
$var wire 1 i% ReadEnable1 $end
$var wire 1 y% ReadEnable2 $end
$var wire 1 C& Bitline1 $end
$var wire 1 S& Bitline2 $end
$var wire 1 #) Q $end

$scope module flop $end
$var wire 1 #) q $end
$var wire 1 ," d $end
$var wire 1 +& wen $end
$var wire 1 !! clk $end
$var wire 1 "! rst $end
$var reg 1 $) state $end
$upscope $end
$upscope $end

$scope module cells[4] $end
$var wire 1 !! clk $end
$var wire 1 "! rst $end
$var wire 1 -" D $end
$var wire 1 +& WriteEnable $end
$var wire 1 i% ReadEnable1 $end
$var wire 1 y% ReadEnable2 $end
$var wire 1 D& Bitline1 $end
$var wire 1 T& Bitline2 $end
$var wire 1 %) Q $end

$scope module flop $end
$var wire 1 %) q $end
$var wire 1 -" d $end
$var wire 1 +& wen $end
$var wire 1 !! clk $end
$var wire 1 "! rst $end
$var reg 1 &) state $end
$upscope $end
$upscope $end

$scope module cells[3] $end
$var wire 1 !! clk $end
$var wire 1 "! rst $end
$var wire 1 ." D $end
$var wire 1 +& WriteEnable $end
$var wire 1 i% ReadEnable1 $end
$var wire 1 y% ReadEnable2 $end
$var wire 1 E& Bitline1 $end
$var wire 1 U& Bitline2 $end
$var wire 1 ') Q $end

$scope module flop $end
$var wire 1 ') q $end
$var wire 1 ." d $end
$var wire 1 +& wen $end
$var wire 1 !! clk $end
$var wire 1 "! rst $end
$var reg 1 () state $end
$upscope $end
$upscope $end

$scope module cells[2] $end
$var wire 1 !! clk $end
$var wire 1 "! rst $end
$var wire 1 /" D $end
$var wire 1 +& WriteEnable $end
$var wire 1 i% ReadEnable1 $end
$var wire 1 y% ReadEnable2 $end
$var wire 1 F& Bitline1 $end
$var wire 1 V& Bitline2 $end
$var wire 1 )) Q $end

$scope module flop $end
$var wire 1 )) q $end
$var wire 1 /" d $end
$var wire 1 +& wen $end
$var wire 1 !! clk $end
$var wire 1 "! rst $end
$var reg 1 *) state $end
$upscope $end
$upscope $end

$scope module cells[1] $end
$var wire 1 !! clk $end
$var wire 1 "! rst $end
$var wire 1 0" D $end
$var wire 1 +& WriteEnable $end
$var wire 1 i% ReadEnable1 $end
$var wire 1 y% ReadEnable2 $end
$var wire 1 G& Bitline1 $end
$var wire 1 W& Bitline2 $end
$var wire 1 +) Q $end

$scope module flop $end
$var wire 1 +) q $end
$var wire 1 0" d $end
$var wire 1 +& wen $end
$var wire 1 !! clk $end
$var wire 1 "! rst $end
$var reg 1 ,) state $end
$upscope $end
$upscope $end

$scope module cells[0] $end
$var wire 1 !! clk $end
$var wire 1 "! rst $end
$var wire 1 1" D $end
$var wire 1 +& WriteEnable $end
$var wire 1 i% ReadEnable1 $end
$var wire 1 y% ReadEnable2 $end
$var wire 1 H& Bitline1 $end
$var wire 1 X& Bitline2 $end
$var wire 1 -) Q $end

$scope module flop $end
$var wire 1 -) q $end
$var wire 1 1" d $end
$var wire 1 +& wen $end
$var wire 1 !! clk $end
$var wire 1 "! rst $end
$var reg 1 .) state $end
$upscope $end
$upscope $end
$upscope $end

$scope module regs[12] $end
$var wire 1 !! clk $end
$var wire 1 "! rst $end
$var wire 1 "" D [15] $end
$var wire 1 #" D [14] $end
$var wire 1 $" D [13] $end
$var wire 1 %" D [12] $end
$var wire 1 &" D [11] $end
$var wire 1 '" D [10] $end
$var wire 1 (" D [9] $end
$var wire 1 )" D [8] $end
$var wire 1 *" D [7] $end
$var wire 1 +" D [6] $end
$var wire 1 ," D [5] $end
$var wire 1 -" D [4] $end
$var wire 1 ." D [3] $end
$var wire 1 /" D [2] $end
$var wire 1 0" D [1] $end
$var wire 1 1" D [0] $end
$var wire 1 ,& WriteReg $end
$var wire 1 j% ReadEnable1 $end
$var wire 1 z% ReadEnable2 $end
$var wire 1 9& Bitline1 [15] $end
$var wire 1 :& Bitline1 [14] $end
$var wire 1 ;& Bitline1 [13] $end
$var wire 1 <& Bitline1 [12] $end
$var wire 1 =& Bitline1 [11] $end
$var wire 1 >& Bitline1 [10] $end
$var wire 1 ?& Bitline1 [9] $end
$var wire 1 @& Bitline1 [8] $end
$var wire 1 A& Bitline1 [7] $end
$var wire 1 B& Bitline1 [6] $end
$var wire 1 C& Bitline1 [5] $end
$var wire 1 D& Bitline1 [4] $end
$var wire 1 E& Bitline1 [3] $end
$var wire 1 F& Bitline1 [2] $end
$var wire 1 G& Bitline1 [1] $end
$var wire 1 H& Bitline1 [0] $end
$var wire 1 I& Bitline2 [15] $end
$var wire 1 J& Bitline2 [14] $end
$var wire 1 K& Bitline2 [13] $end
$var wire 1 L& Bitline2 [12] $end
$var wire 1 M& Bitline2 [11] $end
$var wire 1 N& Bitline2 [10] $end
$var wire 1 O& Bitline2 [9] $end
$var wire 1 P& Bitline2 [8] $end
$var wire 1 Q& Bitline2 [7] $end
$var wire 1 R& Bitline2 [6] $end
$var wire 1 S& Bitline2 [5] $end
$var wire 1 T& Bitline2 [4] $end
$var wire 1 U& Bitline2 [3] $end
$var wire 1 V& Bitline2 [2] $end
$var wire 1 W& Bitline2 [1] $end
$var wire 1 X& Bitline2 [0] $end

$scope module cells[15] $end
$var wire 1 !! clk $end
$var wire 1 "! rst $end
$var wire 1 "" D $end
$var wire 1 ,& WriteEnable $end
$var wire 1 j% ReadEnable1 $end
$var wire 1 z% ReadEnable2 $end
$var wire 1 9& Bitline1 $end
$var wire 1 I& Bitline2 $end
$var wire 1 /) Q $end

$scope module flop $end
$var wire 1 /) q $end
$var wire 1 "" d $end
$var wire 1 ,& wen $end
$var wire 1 !! clk $end
$var wire 1 "! rst $end
$var reg 1 0) state $end
$upscope $end
$upscope $end

$scope module cells[14] $end
$var wire 1 !! clk $end
$var wire 1 "! rst $end
$var wire 1 #" D $end
$var wire 1 ,& WriteEnable $end
$var wire 1 j% ReadEnable1 $end
$var wire 1 z% ReadEnable2 $end
$var wire 1 :& Bitline1 $end
$var wire 1 J& Bitline2 $end
$var wire 1 1) Q $end

$scope module flop $end
$var wire 1 1) q $end
$var wire 1 #" d $end
$var wire 1 ,& wen $end
$var wire 1 !! clk $end
$var wire 1 "! rst $end
$var reg 1 2) state $end
$upscope $end
$upscope $end

$scope module cells[13] $end
$var wire 1 !! clk $end
$var wire 1 "! rst $end
$var wire 1 $" D $end
$var wire 1 ,& WriteEnable $end
$var wire 1 j% ReadEnable1 $end
$var wire 1 z% ReadEnable2 $end
$var wire 1 ;& Bitline1 $end
$var wire 1 K& Bitline2 $end
$var wire 1 3) Q $end

$scope module flop $end
$var wire 1 3) q $end
$var wire 1 $" d $end
$var wire 1 ,& wen $end
$var wire 1 !! clk $end
$var wire 1 "! rst $end
$var reg 1 4) state $end
$upscope $end
$upscope $end

$scope module cells[12] $end
$var wire 1 !! clk $end
$var wire 1 "! rst $end
$var wire 1 %" D $end
$var wire 1 ,& WriteEnable $end
$var wire 1 j% ReadEnable1 $end
$var wire 1 z% ReadEnable2 $end
$var wire 1 <& Bitline1 $end
$var wire 1 L& Bitline2 $end
$var wire 1 5) Q $end

$scope module flop $end
$var wire 1 5) q $end
$var wire 1 %" d $end
$var wire 1 ,& wen $end
$var wire 1 !! clk $end
$var wire 1 "! rst $end
$var reg 1 6) state $end
$upscope $end
$upscope $end

$scope module cells[11] $end
$var wire 1 !! clk $end
$var wire 1 "! rst $end
$var wire 1 &" D $end
$var wire 1 ,& WriteEnable $end
$var wire 1 j% ReadEnable1 $end
$var wire 1 z% ReadEnable2 $end
$var wire 1 =& Bitline1 $end
$var wire 1 M& Bitline2 $end
$var wire 1 7) Q $end

$scope module flop $end
$var wire 1 7) q $end
$var wire 1 &" d $end
$var wire 1 ,& wen $end
$var wire 1 !! clk $end
$var wire 1 "! rst $end
$var reg 1 8) state $end
$upscope $end
$upscope $end

$scope module cells[10] $end
$var wire 1 !! clk $end
$var wire 1 "! rst $end
$var wire 1 '" D $end
$var wire 1 ,& WriteEnable $end
$var wire 1 j% ReadEnable1 $end
$var wire 1 z% ReadEnable2 $end
$var wire 1 >& Bitline1 $end
$var wire 1 N& Bitline2 $end
$var wire 1 9) Q $end

$scope module flop $end
$var wire 1 9) q $end
$var wire 1 '" d $end
$var wire 1 ,& wen $end
$var wire 1 !! clk $end
$var wire 1 "! rst $end
$var reg 1 :) state $end
$upscope $end
$upscope $end

$scope module cells[9] $end
$var wire 1 !! clk $end
$var wire 1 "! rst $end
$var wire 1 (" D $end
$var wire 1 ,& WriteEnable $end
$var wire 1 j% ReadEnable1 $end
$var wire 1 z% ReadEnable2 $end
$var wire 1 ?& Bitline1 $end
$var wire 1 O& Bitline2 $end
$var wire 1 ;) Q $end

$scope module flop $end
$var wire 1 ;) q $end
$var wire 1 (" d $end
$var wire 1 ,& wen $end
$var wire 1 !! clk $end
$var wire 1 "! rst $end
$var reg 1 <) state $end
$upscope $end
$upscope $end

$scope module cells[8] $end
$var wire 1 !! clk $end
$var wire 1 "! rst $end
$var wire 1 )" D $end
$var wire 1 ,& WriteEnable $end
$var wire 1 j% ReadEnable1 $end
$var wire 1 z% ReadEnable2 $end
$var wire 1 @& Bitline1 $end
$var wire 1 P& Bitline2 $end
$var wire 1 =) Q $end

$scope module flop $end
$var wire 1 =) q $end
$var wire 1 )" d $end
$var wire 1 ,& wen $end
$var wire 1 !! clk $end
$var wire 1 "! rst $end
$var reg 1 >) state $end
$upscope $end
$upscope $end

$scope module cells[7] $end
$var wire 1 !! clk $end
$var wire 1 "! rst $end
$var wire 1 *" D $end
$var wire 1 ,& WriteEnable $end
$var wire 1 j% ReadEnable1 $end
$var wire 1 z% ReadEnable2 $end
$var wire 1 A& Bitline1 $end
$var wire 1 Q& Bitline2 $end
$var wire 1 ?) Q $end

$scope module flop $end
$var wire 1 ?) q $end
$var wire 1 *" d $end
$var wire 1 ,& wen $end
$var wire 1 !! clk $end
$var wire 1 "! rst $end
$var reg 1 @) state $end
$upscope $end
$upscope $end

$scope module cells[6] $end
$var wire 1 !! clk $end
$var wire 1 "! rst $end
$var wire 1 +" D $end
$var wire 1 ,& WriteEnable $end
$var wire 1 j% ReadEnable1 $end
$var wire 1 z% ReadEnable2 $end
$var wire 1 B& Bitline1 $end
$var wire 1 R& Bitline2 $end
$var wire 1 A) Q $end

$scope module flop $end
$var wire 1 A) q $end
$var wire 1 +" d $end
$var wire 1 ,& wen $end
$var wire 1 !! clk $end
$var wire 1 "! rst $end
$var reg 1 B) state $end
$upscope $end
$upscope $end

$scope module cells[5] $end
$var wire 1 !! clk $end
$var wire 1 "! rst $end
$var wire 1 ," D $end
$var wire 1 ,& WriteEnable $end
$var wire 1 j% ReadEnable1 $end
$var wire 1 z% ReadEnable2 $end
$var wire 1 C& Bitline1 $end
$var wire 1 S& Bitline2 $end
$var wire 1 C) Q $end

$scope module flop $end
$var wire 1 C) q $end
$var wire 1 ," d $end
$var wire 1 ,& wen $end
$var wire 1 !! clk $end
$var wire 1 "! rst $end
$var reg 1 D) state $end
$upscope $end
$upscope $end

$scope module cells[4] $end
$var wire 1 !! clk $end
$var wire 1 "! rst $end
$var wire 1 -" D $end
$var wire 1 ,& WriteEnable $end
$var wire 1 j% ReadEnable1 $end
$var wire 1 z% ReadEnable2 $end
$var wire 1 D& Bitline1 $end
$var wire 1 T& Bitline2 $end
$var wire 1 E) Q $end

$scope module flop $end
$var wire 1 E) q $end
$var wire 1 -" d $end
$var wire 1 ,& wen $end
$var wire 1 !! clk $end
$var wire 1 "! rst $end
$var reg 1 F) state $end
$upscope $end
$upscope $end

$scope module cells[3] $end
$var wire 1 !! clk $end
$var wire 1 "! rst $end
$var wire 1 ." D $end
$var wire 1 ,& WriteEnable $end
$var wire 1 j% ReadEnable1 $end
$var wire 1 z% ReadEnable2 $end
$var wire 1 E& Bitline1 $end
$var wire 1 U& Bitline2 $end
$var wire 1 G) Q $end

$scope module flop $end
$var wire 1 G) q $end
$var wire 1 ." d $end
$var wire 1 ,& wen $end
$var wire 1 !! clk $end
$var wire 1 "! rst $end
$var reg 1 H) state $end
$upscope $end
$upscope $end

$scope module cells[2] $end
$var wire 1 !! clk $end
$var wire 1 "! rst $end
$var wire 1 /" D $end
$var wire 1 ,& WriteEnable $end
$var wire 1 j% ReadEnable1 $end
$var wire 1 z% ReadEnable2 $end
$var wire 1 F& Bitline1 $end
$var wire 1 V& Bitline2 $end
$var wire 1 I) Q $end

$scope module flop $end
$var wire 1 I) q $end
$var wire 1 /" d $end
$var wire 1 ,& wen $end
$var wire 1 !! clk $end
$var wire 1 "! rst $end
$var reg 1 J) state $end
$upscope $end
$upscope $end

$scope module cells[1] $end
$var wire 1 !! clk $end
$var wire 1 "! rst $end
$var wire 1 0" D $end
$var wire 1 ,& WriteEnable $end
$var wire 1 j% ReadEnable1 $end
$var wire 1 z% ReadEnable2 $end
$var wire 1 G& Bitline1 $end
$var wire 1 W& Bitline2 $end
$var wire 1 K) Q $end

$scope module flop $end
$var wire 1 K) q $end
$var wire 1 0" d $end
$var wire 1 ,& wen $end
$var wire 1 !! clk $end
$var wire 1 "! rst $end
$var reg 1 L) state $end
$upscope $end
$upscope $end

$scope module cells[0] $end
$var wire 1 !! clk $end
$var wire 1 "! rst $end
$var wire 1 1" D $end
$var wire 1 ,& WriteEnable $end
$var wire 1 j% ReadEnable1 $end
$var wire 1 z% ReadEnable2 $end
$var wire 1 H& Bitline1 $end
$var wire 1 X& Bitline2 $end
$var wire 1 M) Q $end

$scope module flop $end
$var wire 1 M) q $end
$var wire 1 1" d $end
$var wire 1 ,& wen $end
$var wire 1 !! clk $end
$var wire 1 "! rst $end
$var reg 1 N) state $end
$upscope $end
$upscope $end
$upscope $end

$scope module regs[11] $end
$var wire 1 !! clk $end
$var wire 1 "! rst $end
$var wire 1 "" D [15] $end
$var wire 1 #" D [14] $end
$var wire 1 $" D [13] $end
$var wire 1 %" D [12] $end
$var wire 1 &" D [11] $end
$var wire 1 '" D [10] $end
$var wire 1 (" D [9] $end
$var wire 1 )" D [8] $end
$var wire 1 *" D [7] $end
$var wire 1 +" D [6] $end
$var wire 1 ," D [5] $end
$var wire 1 -" D [4] $end
$var wire 1 ." D [3] $end
$var wire 1 /" D [2] $end
$var wire 1 0" D [1] $end
$var wire 1 1" D [0] $end
$var wire 1 -& WriteReg $end
$var wire 1 k% ReadEnable1 $end
$var wire 1 {% ReadEnable2 $end
$var wire 1 9& Bitline1 [15] $end
$var wire 1 :& Bitline1 [14] $end
$var wire 1 ;& Bitline1 [13] $end
$var wire 1 <& Bitline1 [12] $end
$var wire 1 =& Bitline1 [11] $end
$var wire 1 >& Bitline1 [10] $end
$var wire 1 ?& Bitline1 [9] $end
$var wire 1 @& Bitline1 [8] $end
$var wire 1 A& Bitline1 [7] $end
$var wire 1 B& Bitline1 [6] $end
$var wire 1 C& Bitline1 [5] $end
$var wire 1 D& Bitline1 [4] $end
$var wire 1 E& Bitline1 [3] $end
$var wire 1 F& Bitline1 [2] $end
$var wire 1 G& Bitline1 [1] $end
$var wire 1 H& Bitline1 [0] $end
$var wire 1 I& Bitline2 [15] $end
$var wire 1 J& Bitline2 [14] $end
$var wire 1 K& Bitline2 [13] $end
$var wire 1 L& Bitline2 [12] $end
$var wire 1 M& Bitline2 [11] $end
$var wire 1 N& Bitline2 [10] $end
$var wire 1 O& Bitline2 [9] $end
$var wire 1 P& Bitline2 [8] $end
$var wire 1 Q& Bitline2 [7] $end
$var wire 1 R& Bitline2 [6] $end
$var wire 1 S& Bitline2 [5] $end
$var wire 1 T& Bitline2 [4] $end
$var wire 1 U& Bitline2 [3] $end
$var wire 1 V& Bitline2 [2] $end
$var wire 1 W& Bitline2 [1] $end
$var wire 1 X& Bitline2 [0] $end

$scope module cells[15] $end
$var wire 1 !! clk $end
$var wire 1 "! rst $end
$var wire 1 "" D $end
$var wire 1 -& WriteEnable $end
$var wire 1 k% ReadEnable1 $end
$var wire 1 {% ReadEnable2 $end
$var wire 1 9& Bitline1 $end
$var wire 1 I& Bitline2 $end
$var wire 1 O) Q $end

$scope module flop $end
$var wire 1 O) q $end
$var wire 1 "" d $end
$var wire 1 -& wen $end
$var wire 1 !! clk $end
$var wire 1 "! rst $end
$var reg 1 P) state $end
$upscope $end
$upscope $end

$scope module cells[14] $end
$var wire 1 !! clk $end
$var wire 1 "! rst $end
$var wire 1 #" D $end
$var wire 1 -& WriteEnable $end
$var wire 1 k% ReadEnable1 $end
$var wire 1 {% ReadEnable2 $end
$var wire 1 :& Bitline1 $end
$var wire 1 J& Bitline2 $end
$var wire 1 Q) Q $end

$scope module flop $end
$var wire 1 Q) q $end
$var wire 1 #" d $end
$var wire 1 -& wen $end
$var wire 1 !! clk $end
$var wire 1 "! rst $end
$var reg 1 R) state $end
$upscope $end
$upscope $end

$scope module cells[13] $end
$var wire 1 !! clk $end
$var wire 1 "! rst $end
$var wire 1 $" D $end
$var wire 1 -& WriteEnable $end
$var wire 1 k% ReadEnable1 $end
$var wire 1 {% ReadEnable2 $end
$var wire 1 ;& Bitline1 $end
$var wire 1 K& Bitline2 $end
$var wire 1 S) Q $end

$scope module flop $end
$var wire 1 S) q $end
$var wire 1 $" d $end
$var wire 1 -& wen $end
$var wire 1 !! clk $end
$var wire 1 "! rst $end
$var reg 1 T) state $end
$upscope $end
$upscope $end

$scope module cells[12] $end
$var wire 1 !! clk $end
$var wire 1 "! rst $end
$var wire 1 %" D $end
$var wire 1 -& WriteEnable $end
$var wire 1 k% ReadEnable1 $end
$var wire 1 {% ReadEnable2 $end
$var wire 1 <& Bitline1 $end
$var wire 1 L& Bitline2 $end
$var wire 1 U) Q $end

$scope module flop $end
$var wire 1 U) q $end
$var wire 1 %" d $end
$var wire 1 -& wen $end
$var wire 1 !! clk $end
$var wire 1 "! rst $end
$var reg 1 V) state $end
$upscope $end
$upscope $end

$scope module cells[11] $end
$var wire 1 !! clk $end
$var wire 1 "! rst $end
$var wire 1 &" D $end
$var wire 1 -& WriteEnable $end
$var wire 1 k% ReadEnable1 $end
$var wire 1 {% ReadEnable2 $end
$var wire 1 =& Bitline1 $end
$var wire 1 M& Bitline2 $end
$var wire 1 W) Q $end

$scope module flop $end
$var wire 1 W) q $end
$var wire 1 &" d $end
$var wire 1 -& wen $end
$var wire 1 !! clk $end
$var wire 1 "! rst $end
$var reg 1 X) state $end
$upscope $end
$upscope $end

$scope module cells[10] $end
$var wire 1 !! clk $end
$var wire 1 "! rst $end
$var wire 1 '" D $end
$var wire 1 -& WriteEnable $end
$var wire 1 k% ReadEnable1 $end
$var wire 1 {% ReadEnable2 $end
$var wire 1 >& Bitline1 $end
$var wire 1 N& Bitline2 $end
$var wire 1 Y) Q $end

$scope module flop $end
$var wire 1 Y) q $end
$var wire 1 '" d $end
$var wire 1 -& wen $end
$var wire 1 !! clk $end
$var wire 1 "! rst $end
$var reg 1 Z) state $end
$upscope $end
$upscope $end

$scope module cells[9] $end
$var wire 1 !! clk $end
$var wire 1 "! rst $end
$var wire 1 (" D $end
$var wire 1 -& WriteEnable $end
$var wire 1 k% ReadEnable1 $end
$var wire 1 {% ReadEnable2 $end
$var wire 1 ?& Bitline1 $end
$var wire 1 O& Bitline2 $end
$var wire 1 [) Q $end

$scope module flop $end
$var wire 1 [) q $end
$var wire 1 (" d $end
$var wire 1 -& wen $end
$var wire 1 !! clk $end
$var wire 1 "! rst $end
$var reg 1 \) state $end
$upscope $end
$upscope $end

$scope module cells[8] $end
$var wire 1 !! clk $end
$var wire 1 "! rst $end
$var wire 1 )" D $end
$var wire 1 -& WriteEnable $end
$var wire 1 k% ReadEnable1 $end
$var wire 1 {% ReadEnable2 $end
$var wire 1 @& Bitline1 $end
$var wire 1 P& Bitline2 $end
$var wire 1 ]) Q $end

$scope module flop $end
$var wire 1 ]) q $end
$var wire 1 )" d $end
$var wire 1 -& wen $end
$var wire 1 !! clk $end
$var wire 1 "! rst $end
$var reg 1 ^) state $end
$upscope $end
$upscope $end

$scope module cells[7] $end
$var wire 1 !! clk $end
$var wire 1 "! rst $end
$var wire 1 *" D $end
$var wire 1 -& WriteEnable $end
$var wire 1 k% ReadEnable1 $end
$var wire 1 {% ReadEnable2 $end
$var wire 1 A& Bitline1 $end
$var wire 1 Q& Bitline2 $end
$var wire 1 _) Q $end

$scope module flop $end
$var wire 1 _) q $end
$var wire 1 *" d $end
$var wire 1 -& wen $end
$var wire 1 !! clk $end
$var wire 1 "! rst $end
$var reg 1 `) state $end
$upscope $end
$upscope $end

$scope module cells[6] $end
$var wire 1 !! clk $end
$var wire 1 "! rst $end
$var wire 1 +" D $end
$var wire 1 -& WriteEnable $end
$var wire 1 k% ReadEnable1 $end
$var wire 1 {% ReadEnable2 $end
$var wire 1 B& Bitline1 $end
$var wire 1 R& Bitline2 $end
$var wire 1 a) Q $end

$scope module flop $end
$var wire 1 a) q $end
$var wire 1 +" d $end
$var wire 1 -& wen $end
$var wire 1 !! clk $end
$var wire 1 "! rst $end
$var reg 1 b) state $end
$upscope $end
$upscope $end

$scope module cells[5] $end
$var wire 1 !! clk $end
$var wire 1 "! rst $end
$var wire 1 ," D $end
$var wire 1 -& WriteEnable $end
$var wire 1 k% ReadEnable1 $end
$var wire 1 {% ReadEnable2 $end
$var wire 1 C& Bitline1 $end
$var wire 1 S& Bitline2 $end
$var wire 1 c) Q $end

$scope module flop $end
$var wire 1 c) q $end
$var wire 1 ," d $end
$var wire 1 -& wen $end
$var wire 1 !! clk $end
$var wire 1 "! rst $end
$var reg 1 d) state $end
$upscope $end
$upscope $end

$scope module cells[4] $end
$var wire 1 !! clk $end
$var wire 1 "! rst $end
$var wire 1 -" D $end
$var wire 1 -& WriteEnable $end
$var wire 1 k% ReadEnable1 $end
$var wire 1 {% ReadEnable2 $end
$var wire 1 D& Bitline1 $end
$var wire 1 T& Bitline2 $end
$var wire 1 e) Q $end

$scope module flop $end
$var wire 1 e) q $end
$var wire 1 -" d $end
$var wire 1 -& wen $end
$var wire 1 !! clk $end
$var wire 1 "! rst $end
$var reg 1 f) state $end
$upscope $end
$upscope $end

$scope module cells[3] $end
$var wire 1 !! clk $end
$var wire 1 "! rst $end
$var wire 1 ." D $end
$var wire 1 -& WriteEnable $end
$var wire 1 k% ReadEnable1 $end
$var wire 1 {% ReadEnable2 $end
$var wire 1 E& Bitline1 $end
$var wire 1 U& Bitline2 $end
$var wire 1 g) Q $end

$scope module flop $end
$var wire 1 g) q $end
$var wire 1 ." d $end
$var wire 1 -& wen $end
$var wire 1 !! clk $end
$var wire 1 "! rst $end
$var reg 1 h) state $end
$upscope $end
$upscope $end

$scope module cells[2] $end
$var wire 1 !! clk $end
$var wire 1 "! rst $end
$var wire 1 /" D $end
$var wire 1 -& WriteEnable $end
$var wire 1 k% ReadEnable1 $end
$var wire 1 {% ReadEnable2 $end
$var wire 1 F& Bitline1 $end
$var wire 1 V& Bitline2 $end
$var wire 1 i) Q $end

$scope module flop $end
$var wire 1 i) q $end
$var wire 1 /" d $end
$var wire 1 -& wen $end
$var wire 1 !! clk $end
$var wire 1 "! rst $end
$var reg 1 j) state $end
$upscope $end
$upscope $end

$scope module cells[1] $end
$var wire 1 !! clk $end
$var wire 1 "! rst $end
$var wire 1 0" D $end
$var wire 1 -& WriteEnable $end
$var wire 1 k% ReadEnable1 $end
$var wire 1 {% ReadEnable2 $end
$var wire 1 G& Bitline1 $end
$var wire 1 W& Bitline2 $end
$var wire 1 k) Q $end

$scope module flop $end
$var wire 1 k) q $end
$var wire 1 0" d $end
$var wire 1 -& wen $end
$var wire 1 !! clk $end
$var wire 1 "! rst $end
$var reg 1 l) state $end
$upscope $end
$upscope $end

$scope module cells[0] $end
$var wire 1 !! clk $end
$var wire 1 "! rst $end
$var wire 1 1" D $end
$var wire 1 -& WriteEnable $end
$var wire 1 k% ReadEnable1 $end
$var wire 1 {% ReadEnable2 $end
$var wire 1 H& Bitline1 $end
$var wire 1 X& Bitline2 $end
$var wire 1 m) Q $end

$scope module flop $end
$var wire 1 m) q $end
$var wire 1 1" d $end
$var wire 1 -& wen $end
$var wire 1 !! clk $end
$var wire 1 "! rst $end
$var reg 1 n) state $end
$upscope $end
$upscope $end
$upscope $end

$scope module regs[10] $end
$var wire 1 !! clk $end
$var wire 1 "! rst $end
$var wire 1 "" D [15] $end
$var wire 1 #" D [14] $end
$var wire 1 $" D [13] $end
$var wire 1 %" D [12] $end
$var wire 1 &" D [11] $end
$var wire 1 '" D [10] $end
$var wire 1 (" D [9] $end
$var wire 1 )" D [8] $end
$var wire 1 *" D [7] $end
$var wire 1 +" D [6] $end
$var wire 1 ," D [5] $end
$var wire 1 -" D [4] $end
$var wire 1 ." D [3] $end
$var wire 1 /" D [2] $end
$var wire 1 0" D [1] $end
$var wire 1 1" D [0] $end
$var wire 1 .& WriteReg $end
$var wire 1 l% ReadEnable1 $end
$var wire 1 |% ReadEnable2 $end
$var wire 1 9& Bitline1 [15] $end
$var wire 1 :& Bitline1 [14] $end
$var wire 1 ;& Bitline1 [13] $end
$var wire 1 <& Bitline1 [12] $end
$var wire 1 =& Bitline1 [11] $end
$var wire 1 >& Bitline1 [10] $end
$var wire 1 ?& Bitline1 [9] $end
$var wire 1 @& Bitline1 [8] $end
$var wire 1 A& Bitline1 [7] $end
$var wire 1 B& Bitline1 [6] $end
$var wire 1 C& Bitline1 [5] $end
$var wire 1 D& Bitline1 [4] $end
$var wire 1 E& Bitline1 [3] $end
$var wire 1 F& Bitline1 [2] $end
$var wire 1 G& Bitline1 [1] $end
$var wire 1 H& Bitline1 [0] $end
$var wire 1 I& Bitline2 [15] $end
$var wire 1 J& Bitline2 [14] $end
$var wire 1 K& Bitline2 [13] $end
$var wire 1 L& Bitline2 [12] $end
$var wire 1 M& Bitline2 [11] $end
$var wire 1 N& Bitline2 [10] $end
$var wire 1 O& Bitline2 [9] $end
$var wire 1 P& Bitline2 [8] $end
$var wire 1 Q& Bitline2 [7] $end
$var wire 1 R& Bitline2 [6] $end
$var wire 1 S& Bitline2 [5] $end
$var wire 1 T& Bitline2 [4] $end
$var wire 1 U& Bitline2 [3] $end
$var wire 1 V& Bitline2 [2] $end
$var wire 1 W& Bitline2 [1] $end
$var wire 1 X& Bitline2 [0] $end

$scope module cells[15] $end
$var wire 1 !! clk $end
$var wire 1 "! rst $end
$var wire 1 "" D $end
$var wire 1 .& WriteEnable $end
$var wire 1 l% ReadEnable1 $end
$var wire 1 |% ReadEnable2 $end
$var wire 1 9& Bitline1 $end
$var wire 1 I& Bitline2 $end
$var wire 1 o) Q $end

$scope module flop $end
$var wire 1 o) q $end
$var wire 1 "" d $end
$var wire 1 .& wen $end
$var wire 1 !! clk $end
$var wire 1 "! rst $end
$var reg 1 p) state $end
$upscope $end
$upscope $end

$scope module cells[14] $end
$var wire 1 !! clk $end
$var wire 1 "! rst $end
$var wire 1 #" D $end
$var wire 1 .& WriteEnable $end
$var wire 1 l% ReadEnable1 $end
$var wire 1 |% ReadEnable2 $end
$var wire 1 :& Bitline1 $end
$var wire 1 J& Bitline2 $end
$var wire 1 q) Q $end

$scope module flop $end
$var wire 1 q) q $end
$var wire 1 #" d $end
$var wire 1 .& wen $end
$var wire 1 !! clk $end
$var wire 1 "! rst $end
$var reg 1 r) state $end
$upscope $end
$upscope $end

$scope module cells[13] $end
$var wire 1 !! clk $end
$var wire 1 "! rst $end
$var wire 1 $" D $end
$var wire 1 .& WriteEnable $end
$var wire 1 l% ReadEnable1 $end
$var wire 1 |% ReadEnable2 $end
$var wire 1 ;& Bitline1 $end
$var wire 1 K& Bitline2 $end
$var wire 1 s) Q $end

$scope module flop $end
$var wire 1 s) q $end
$var wire 1 $" d $end
$var wire 1 .& wen $end
$var wire 1 !! clk $end
$var wire 1 "! rst $end
$var reg 1 t) state $end
$upscope $end
$upscope $end

$scope module cells[12] $end
$var wire 1 !! clk $end
$var wire 1 "! rst $end
$var wire 1 %" D $end
$var wire 1 .& WriteEnable $end
$var wire 1 l% ReadEnable1 $end
$var wire 1 |% ReadEnable2 $end
$var wire 1 <& Bitline1 $end
$var wire 1 L& Bitline2 $end
$var wire 1 u) Q $end

$scope module flop $end
$var wire 1 u) q $end
$var wire 1 %" d $end
$var wire 1 .& wen $end
$var wire 1 !! clk $end
$var wire 1 "! rst $end
$var reg 1 v) state $end
$upscope $end
$upscope $end

$scope module cells[11] $end
$var wire 1 !! clk $end
$var wire 1 "! rst $end
$var wire 1 &" D $end
$var wire 1 .& WriteEnable $end
$var wire 1 l% ReadEnable1 $end
$var wire 1 |% ReadEnable2 $end
$var wire 1 =& Bitline1 $end
$var wire 1 M& Bitline2 $end
$var wire 1 w) Q $end

$scope module flop $end
$var wire 1 w) q $end
$var wire 1 &" d $end
$var wire 1 .& wen $end
$var wire 1 !! clk $end
$var wire 1 "! rst $end
$var reg 1 x) state $end
$upscope $end
$upscope $end

$scope module cells[10] $end
$var wire 1 !! clk $end
$var wire 1 "! rst $end
$var wire 1 '" D $end
$var wire 1 .& WriteEnable $end
$var wire 1 l% ReadEnable1 $end
$var wire 1 |% ReadEnable2 $end
$var wire 1 >& Bitline1 $end
$var wire 1 N& Bitline2 $end
$var wire 1 y) Q $end

$scope module flop $end
$var wire 1 y) q $end
$var wire 1 '" d $end
$var wire 1 .& wen $end
$var wire 1 !! clk $end
$var wire 1 "! rst $end
$var reg 1 z) state $end
$upscope $end
$upscope $end

$scope module cells[9] $end
$var wire 1 !! clk $end
$var wire 1 "! rst $end
$var wire 1 (" D $end
$var wire 1 .& WriteEnable $end
$var wire 1 l% ReadEnable1 $end
$var wire 1 |% ReadEnable2 $end
$var wire 1 ?& Bitline1 $end
$var wire 1 O& Bitline2 $end
$var wire 1 {) Q $end

$scope module flop $end
$var wire 1 {) q $end
$var wire 1 (" d $end
$var wire 1 .& wen $end
$var wire 1 !! clk $end
$var wire 1 "! rst $end
$var reg 1 |) state $end
$upscope $end
$upscope $end

$scope module cells[8] $end
$var wire 1 !! clk $end
$var wire 1 "! rst $end
$var wire 1 )" D $end
$var wire 1 .& WriteEnable $end
$var wire 1 l% ReadEnable1 $end
$var wire 1 |% ReadEnable2 $end
$var wire 1 @& Bitline1 $end
$var wire 1 P& Bitline2 $end
$var wire 1 }) Q $end

$scope module flop $end
$var wire 1 }) q $end
$var wire 1 )" d $end
$var wire 1 .& wen $end
$var wire 1 !! clk $end
$var wire 1 "! rst $end
$var reg 1 ~) state $end
$upscope $end
$upscope $end

$scope module cells[7] $end
$var wire 1 !! clk $end
$var wire 1 "! rst $end
$var wire 1 *" D $end
$var wire 1 .& WriteEnable $end
$var wire 1 l% ReadEnable1 $end
$var wire 1 |% ReadEnable2 $end
$var wire 1 A& Bitline1 $end
$var wire 1 Q& Bitline2 $end
$var wire 1 !* Q $end

$scope module flop $end
$var wire 1 !* q $end
$var wire 1 *" d $end
$var wire 1 .& wen $end
$var wire 1 !! clk $end
$var wire 1 "! rst $end
$var reg 1 "* state $end
$upscope $end
$upscope $end

$scope module cells[6] $end
$var wire 1 !! clk $end
$var wire 1 "! rst $end
$var wire 1 +" D $end
$var wire 1 .& WriteEnable $end
$var wire 1 l% ReadEnable1 $end
$var wire 1 |% ReadEnable2 $end
$var wire 1 B& Bitline1 $end
$var wire 1 R& Bitline2 $end
$var wire 1 #* Q $end

$scope module flop $end
$var wire 1 #* q $end
$var wire 1 +" d $end
$var wire 1 .& wen $end
$var wire 1 !! clk $end
$var wire 1 "! rst $end
$var reg 1 $* state $end
$upscope $end
$upscope $end

$scope module cells[5] $end
$var wire 1 !! clk $end
$var wire 1 "! rst $end
$var wire 1 ," D $end
$var wire 1 .& WriteEnable $end
$var wire 1 l% ReadEnable1 $end
$var wire 1 |% ReadEnable2 $end
$var wire 1 C& Bitline1 $end
$var wire 1 S& Bitline2 $end
$var wire 1 %* Q $end

$scope module flop $end
$var wire 1 %* q $end
$var wire 1 ," d $end
$var wire 1 .& wen $end
$var wire 1 !! clk $end
$var wire 1 "! rst $end
$var reg 1 &* state $end
$upscope $end
$upscope $end

$scope module cells[4] $end
$var wire 1 !! clk $end
$var wire 1 "! rst $end
$var wire 1 -" D $end
$var wire 1 .& WriteEnable $end
$var wire 1 l% ReadEnable1 $end
$var wire 1 |% ReadEnable2 $end
$var wire 1 D& Bitline1 $end
$var wire 1 T& Bitline2 $end
$var wire 1 '* Q $end

$scope module flop $end
$var wire 1 '* q $end
$var wire 1 -" d $end
$var wire 1 .& wen $end
$var wire 1 !! clk $end
$var wire 1 "! rst $end
$var reg 1 (* state $end
$upscope $end
$upscope $end

$scope module cells[3] $end
$var wire 1 !! clk $end
$var wire 1 "! rst $end
$var wire 1 ." D $end
$var wire 1 .& WriteEnable $end
$var wire 1 l% ReadEnable1 $end
$var wire 1 |% ReadEnable2 $end
$var wire 1 E& Bitline1 $end
$var wire 1 U& Bitline2 $end
$var wire 1 )* Q $end

$scope module flop $end
$var wire 1 )* q $end
$var wire 1 ." d $end
$var wire 1 .& wen $end
$var wire 1 !! clk $end
$var wire 1 "! rst $end
$var reg 1 ** state $end
$upscope $end
$upscope $end

$scope module cells[2] $end
$var wire 1 !! clk $end
$var wire 1 "! rst $end
$var wire 1 /" D $end
$var wire 1 .& WriteEnable $end
$var wire 1 l% ReadEnable1 $end
$var wire 1 |% ReadEnable2 $end
$var wire 1 F& Bitline1 $end
$var wire 1 V& Bitline2 $end
$var wire 1 +* Q $end

$scope module flop $end
$var wire 1 +* q $end
$var wire 1 /" d $end
$var wire 1 .& wen $end
$var wire 1 !! clk $end
$var wire 1 "! rst $end
$var reg 1 ,* state $end
$upscope $end
$upscope $end

$scope module cells[1] $end
$var wire 1 !! clk $end
$var wire 1 "! rst $end
$var wire 1 0" D $end
$var wire 1 .& WriteEnable $end
$var wire 1 l% ReadEnable1 $end
$var wire 1 |% ReadEnable2 $end
$var wire 1 G& Bitline1 $end
$var wire 1 W& Bitline2 $end
$var wire 1 -* Q $end

$scope module flop $end
$var wire 1 -* q $end
$var wire 1 0" d $end
$var wire 1 .& wen $end
$var wire 1 !! clk $end
$var wire 1 "! rst $end
$var reg 1 .* state $end
$upscope $end
$upscope $end

$scope module cells[0] $end
$var wire 1 !! clk $end
$var wire 1 "! rst $end
$var wire 1 1" D $end
$var wire 1 .& WriteEnable $end
$var wire 1 l% ReadEnable1 $end
$var wire 1 |% ReadEnable2 $end
$var wire 1 H& Bitline1 $end
$var wire 1 X& Bitline2 $end
$var wire 1 /* Q $end

$scope module flop $end
$var wire 1 /* q $end
$var wire 1 1" d $end
$var wire 1 .& wen $end
$var wire 1 !! clk $end
$var wire 1 "! rst $end
$var reg 1 0* state $end
$upscope $end
$upscope $end
$upscope $end

$scope module regs[9] $end
$var wire 1 !! clk $end
$var wire 1 "! rst $end
$var wire 1 "" D [15] $end
$var wire 1 #" D [14] $end
$var wire 1 $" D [13] $end
$var wire 1 %" D [12] $end
$var wire 1 &" D [11] $end
$var wire 1 '" D [10] $end
$var wire 1 (" D [9] $end
$var wire 1 )" D [8] $end
$var wire 1 *" D [7] $end
$var wire 1 +" D [6] $end
$var wire 1 ," D [5] $end
$var wire 1 -" D [4] $end
$var wire 1 ." D [3] $end
$var wire 1 /" D [2] $end
$var wire 1 0" D [1] $end
$var wire 1 1" D [0] $end
$var wire 1 /& WriteReg $end
$var wire 1 m% ReadEnable1 $end
$var wire 1 }% ReadEnable2 $end
$var wire 1 9& Bitline1 [15] $end
$var wire 1 :& Bitline1 [14] $end
$var wire 1 ;& Bitline1 [13] $end
$var wire 1 <& Bitline1 [12] $end
$var wire 1 =& Bitline1 [11] $end
$var wire 1 >& Bitline1 [10] $end
$var wire 1 ?& Bitline1 [9] $end
$var wire 1 @& Bitline1 [8] $end
$var wire 1 A& Bitline1 [7] $end
$var wire 1 B& Bitline1 [6] $end
$var wire 1 C& Bitline1 [5] $end
$var wire 1 D& Bitline1 [4] $end
$var wire 1 E& Bitline1 [3] $end
$var wire 1 F& Bitline1 [2] $end
$var wire 1 G& Bitline1 [1] $end
$var wire 1 H& Bitline1 [0] $end
$var wire 1 I& Bitline2 [15] $end
$var wire 1 J& Bitline2 [14] $end
$var wire 1 K& Bitline2 [13] $end
$var wire 1 L& Bitline2 [12] $end
$var wire 1 M& Bitline2 [11] $end
$var wire 1 N& Bitline2 [10] $end
$var wire 1 O& Bitline2 [9] $end
$var wire 1 P& Bitline2 [8] $end
$var wire 1 Q& Bitline2 [7] $end
$var wire 1 R& Bitline2 [6] $end
$var wire 1 S& Bitline2 [5] $end
$var wire 1 T& Bitline2 [4] $end
$var wire 1 U& Bitline2 [3] $end
$var wire 1 V& Bitline2 [2] $end
$var wire 1 W& Bitline2 [1] $end
$var wire 1 X& Bitline2 [0] $end

$scope module cells[15] $end
$var wire 1 !! clk $end
$var wire 1 "! rst $end
$var wire 1 "" D $end
$var wire 1 /& WriteEnable $end
$var wire 1 m% ReadEnable1 $end
$var wire 1 }% ReadEnable2 $end
$var wire 1 9& Bitline1 $end
$var wire 1 I& Bitline2 $end
$var wire 1 1* Q $end

$scope module flop $end
$var wire 1 1* q $end
$var wire 1 "" d $end
$var wire 1 /& wen $end
$var wire 1 !! clk $end
$var wire 1 "! rst $end
$var reg 1 2* state $end
$upscope $end
$upscope $end

$scope module cells[14] $end
$var wire 1 !! clk $end
$var wire 1 "! rst $end
$var wire 1 #" D $end
$var wire 1 /& WriteEnable $end
$var wire 1 m% ReadEnable1 $end
$var wire 1 }% ReadEnable2 $end
$var wire 1 :& Bitline1 $end
$var wire 1 J& Bitline2 $end
$var wire 1 3* Q $end

$scope module flop $end
$var wire 1 3* q $end
$var wire 1 #" d $end
$var wire 1 /& wen $end
$var wire 1 !! clk $end
$var wire 1 "! rst $end
$var reg 1 4* state $end
$upscope $end
$upscope $end

$scope module cells[13] $end
$var wire 1 !! clk $end
$var wire 1 "! rst $end
$var wire 1 $" D $end
$var wire 1 /& WriteEnable $end
$var wire 1 m% ReadEnable1 $end
$var wire 1 }% ReadEnable2 $end
$var wire 1 ;& Bitline1 $end
$var wire 1 K& Bitline2 $end
$var wire 1 5* Q $end

$scope module flop $end
$var wire 1 5* q $end
$var wire 1 $" d $end
$var wire 1 /& wen $end
$var wire 1 !! clk $end
$var wire 1 "! rst $end
$var reg 1 6* state $end
$upscope $end
$upscope $end

$scope module cells[12] $end
$var wire 1 !! clk $end
$var wire 1 "! rst $end
$var wire 1 %" D $end
$var wire 1 /& WriteEnable $end
$var wire 1 m% ReadEnable1 $end
$var wire 1 }% ReadEnable2 $end
$var wire 1 <& Bitline1 $end
$var wire 1 L& Bitline2 $end
$var wire 1 7* Q $end

$scope module flop $end
$var wire 1 7* q $end
$var wire 1 %" d $end
$var wire 1 /& wen $end
$var wire 1 !! clk $end
$var wire 1 "! rst $end
$var reg 1 8* state $end
$upscope $end
$upscope $end

$scope module cells[11] $end
$var wire 1 !! clk $end
$var wire 1 "! rst $end
$var wire 1 &" D $end
$var wire 1 /& WriteEnable $end
$var wire 1 m% ReadEnable1 $end
$var wire 1 }% ReadEnable2 $end
$var wire 1 =& Bitline1 $end
$var wire 1 M& Bitline2 $end
$var wire 1 9* Q $end

$scope module flop $end
$var wire 1 9* q $end
$var wire 1 &" d $end
$var wire 1 /& wen $end
$var wire 1 !! clk $end
$var wire 1 "! rst $end
$var reg 1 :* state $end
$upscope $end
$upscope $end

$scope module cells[10] $end
$var wire 1 !! clk $end
$var wire 1 "! rst $end
$var wire 1 '" D $end
$var wire 1 /& WriteEnable $end
$var wire 1 m% ReadEnable1 $end
$var wire 1 }% ReadEnable2 $end
$var wire 1 >& Bitline1 $end
$var wire 1 N& Bitline2 $end
$var wire 1 ;* Q $end

$scope module flop $end
$var wire 1 ;* q $end
$var wire 1 '" d $end
$var wire 1 /& wen $end
$var wire 1 !! clk $end
$var wire 1 "! rst $end
$var reg 1 <* state $end
$upscope $end
$upscope $end

$scope module cells[9] $end
$var wire 1 !! clk $end
$var wire 1 "! rst $end
$var wire 1 (" D $end
$var wire 1 /& WriteEnable $end
$var wire 1 m% ReadEnable1 $end
$var wire 1 }% ReadEnable2 $end
$var wire 1 ?& Bitline1 $end
$var wire 1 O& Bitline2 $end
$var wire 1 =* Q $end

$scope module flop $end
$var wire 1 =* q $end
$var wire 1 (" d $end
$var wire 1 /& wen $end
$var wire 1 !! clk $end
$var wire 1 "! rst $end
$var reg 1 >* state $end
$upscope $end
$upscope $end

$scope module cells[8] $end
$var wire 1 !! clk $end
$var wire 1 "! rst $end
$var wire 1 )" D $end
$var wire 1 /& WriteEnable $end
$var wire 1 m% ReadEnable1 $end
$var wire 1 }% ReadEnable2 $end
$var wire 1 @& Bitline1 $end
$var wire 1 P& Bitline2 $end
$var wire 1 ?* Q $end

$scope module flop $end
$var wire 1 ?* q $end
$var wire 1 )" d $end
$var wire 1 /& wen $end
$var wire 1 !! clk $end
$var wire 1 "! rst $end
$var reg 1 @* state $end
$upscope $end
$upscope $end

$scope module cells[7] $end
$var wire 1 !! clk $end
$var wire 1 "! rst $end
$var wire 1 *" D $end
$var wire 1 /& WriteEnable $end
$var wire 1 m% ReadEnable1 $end
$var wire 1 }% ReadEnable2 $end
$var wire 1 A& Bitline1 $end
$var wire 1 Q& Bitline2 $end
$var wire 1 A* Q $end

$scope module flop $end
$var wire 1 A* q $end
$var wire 1 *" d $end
$var wire 1 /& wen $end
$var wire 1 !! clk $end
$var wire 1 "! rst $end
$var reg 1 B* state $end
$upscope $end
$upscope $end

$scope module cells[6] $end
$var wire 1 !! clk $end
$var wire 1 "! rst $end
$var wire 1 +" D $end
$var wire 1 /& WriteEnable $end
$var wire 1 m% ReadEnable1 $end
$var wire 1 }% ReadEnable2 $end
$var wire 1 B& Bitline1 $end
$var wire 1 R& Bitline2 $end
$var wire 1 C* Q $end

$scope module flop $end
$var wire 1 C* q $end
$var wire 1 +" d $end
$var wire 1 /& wen $end
$var wire 1 !! clk $end
$var wire 1 "! rst $end
$var reg 1 D* state $end
$upscope $end
$upscope $end

$scope module cells[5] $end
$var wire 1 !! clk $end
$var wire 1 "! rst $end
$var wire 1 ," D $end
$var wire 1 /& WriteEnable $end
$var wire 1 m% ReadEnable1 $end
$var wire 1 }% ReadEnable2 $end
$var wire 1 C& Bitline1 $end
$var wire 1 S& Bitline2 $end
$var wire 1 E* Q $end

$scope module flop $end
$var wire 1 E* q $end
$var wire 1 ," d $end
$var wire 1 /& wen $end
$var wire 1 !! clk $end
$var wire 1 "! rst $end
$var reg 1 F* state $end
$upscope $end
$upscope $end

$scope module cells[4] $end
$var wire 1 !! clk $end
$var wire 1 "! rst $end
$var wire 1 -" D $end
$var wire 1 /& WriteEnable $end
$var wire 1 m% ReadEnable1 $end
$var wire 1 }% ReadEnable2 $end
$var wire 1 D& Bitline1 $end
$var wire 1 T& Bitline2 $end
$var wire 1 G* Q $end

$scope module flop $end
$var wire 1 G* q $end
$var wire 1 -" d $end
$var wire 1 /& wen $end
$var wire 1 !! clk $end
$var wire 1 "! rst $end
$var reg 1 H* state $end
$upscope $end
$upscope $end

$scope module cells[3] $end
$var wire 1 !! clk $end
$var wire 1 "! rst $end
$var wire 1 ." D $end
$var wire 1 /& WriteEnable $end
$var wire 1 m% ReadEnable1 $end
$var wire 1 }% ReadEnable2 $end
$var wire 1 E& Bitline1 $end
$var wire 1 U& Bitline2 $end
$var wire 1 I* Q $end

$scope module flop $end
$var wire 1 I* q $end
$var wire 1 ." d $end
$var wire 1 /& wen $end
$var wire 1 !! clk $end
$var wire 1 "! rst $end
$var reg 1 J* state $end
$upscope $end
$upscope $end

$scope module cells[2] $end
$var wire 1 !! clk $end
$var wire 1 "! rst $end
$var wire 1 /" D $end
$var wire 1 /& WriteEnable $end
$var wire 1 m% ReadEnable1 $end
$var wire 1 }% ReadEnable2 $end
$var wire 1 F& Bitline1 $end
$var wire 1 V& Bitline2 $end
$var wire 1 K* Q $end

$scope module flop $end
$var wire 1 K* q $end
$var wire 1 /" d $end
$var wire 1 /& wen $end
$var wire 1 !! clk $end
$var wire 1 "! rst $end
$var reg 1 L* state $end
$upscope $end
$upscope $end

$scope module cells[1] $end
$var wire 1 !! clk $end
$var wire 1 "! rst $end
$var wire 1 0" D $end
$var wire 1 /& WriteEnable $end
$var wire 1 m% ReadEnable1 $end
$var wire 1 }% ReadEnable2 $end
$var wire 1 G& Bitline1 $end
$var wire 1 W& Bitline2 $end
$var wire 1 M* Q $end

$scope module flop $end
$var wire 1 M* q $end
$var wire 1 0" d $end
$var wire 1 /& wen $end
$var wire 1 !! clk $end
$var wire 1 "! rst $end
$var reg 1 N* state $end
$upscope $end
$upscope $end

$scope module cells[0] $end
$var wire 1 !! clk $end
$var wire 1 "! rst $end
$var wire 1 1" D $end
$var wire 1 /& WriteEnable $end
$var wire 1 m% ReadEnable1 $end
$var wire 1 }% ReadEnable2 $end
$var wire 1 H& Bitline1 $end
$var wire 1 X& Bitline2 $end
$var wire 1 O* Q $end

$scope module flop $end
$var wire 1 O* q $end
$var wire 1 1" d $end
$var wire 1 /& wen $end
$var wire 1 !! clk $end
$var wire 1 "! rst $end
$var reg 1 P* state $end
$upscope $end
$upscope $end
$upscope $end

$scope module regs[8] $end
$var wire 1 !! clk $end
$var wire 1 "! rst $end
$var wire 1 "" D [15] $end
$var wire 1 #" D [14] $end
$var wire 1 $" D [13] $end
$var wire 1 %" D [12] $end
$var wire 1 &" D [11] $end
$var wire 1 '" D [10] $end
$var wire 1 (" D [9] $end
$var wire 1 )" D [8] $end
$var wire 1 *" D [7] $end
$var wire 1 +" D [6] $end
$var wire 1 ," D [5] $end
$var wire 1 -" D [4] $end
$var wire 1 ." D [3] $end
$var wire 1 /" D [2] $end
$var wire 1 0" D [1] $end
$var wire 1 1" D [0] $end
$var wire 1 0& WriteReg $end
$var wire 1 n% ReadEnable1 $end
$var wire 1 ~% ReadEnable2 $end
$var wire 1 9& Bitline1 [15] $end
$var wire 1 :& Bitline1 [14] $end
$var wire 1 ;& Bitline1 [13] $end
$var wire 1 <& Bitline1 [12] $end
$var wire 1 =& Bitline1 [11] $end
$var wire 1 >& Bitline1 [10] $end
$var wire 1 ?& Bitline1 [9] $end
$var wire 1 @& Bitline1 [8] $end
$var wire 1 A& Bitline1 [7] $end
$var wire 1 B& Bitline1 [6] $end
$var wire 1 C& Bitline1 [5] $end
$var wire 1 D& Bitline1 [4] $end
$var wire 1 E& Bitline1 [3] $end
$var wire 1 F& Bitline1 [2] $end
$var wire 1 G& Bitline1 [1] $end
$var wire 1 H& Bitline1 [0] $end
$var wire 1 I& Bitline2 [15] $end
$var wire 1 J& Bitline2 [14] $end
$var wire 1 K& Bitline2 [13] $end
$var wire 1 L& Bitline2 [12] $end
$var wire 1 M& Bitline2 [11] $end
$var wire 1 N& Bitline2 [10] $end
$var wire 1 O& Bitline2 [9] $end
$var wire 1 P& Bitline2 [8] $end
$var wire 1 Q& Bitline2 [7] $end
$var wire 1 R& Bitline2 [6] $end
$var wire 1 S& Bitline2 [5] $end
$var wire 1 T& Bitline2 [4] $end
$var wire 1 U& Bitline2 [3] $end
$var wire 1 V& Bitline2 [2] $end
$var wire 1 W& Bitline2 [1] $end
$var wire 1 X& Bitline2 [0] $end

$scope module cells[15] $end
$var wire 1 !! clk $end
$var wire 1 "! rst $end
$var wire 1 "" D $end
$var wire 1 0& WriteEnable $end
$var wire 1 n% ReadEnable1 $end
$var wire 1 ~% ReadEnable2 $end
$var wire 1 9& Bitline1 $end
$var wire 1 I& Bitline2 $end
$var wire 1 Q* Q $end

$scope module flop $end
$var wire 1 Q* q $end
$var wire 1 "" d $end
$var wire 1 0& wen $end
$var wire 1 !! clk $end
$var wire 1 "! rst $end
$var reg 1 R* state $end
$upscope $end
$upscope $end

$scope module cells[14] $end
$var wire 1 !! clk $end
$var wire 1 "! rst $end
$var wire 1 #" D $end
$var wire 1 0& WriteEnable $end
$var wire 1 n% ReadEnable1 $end
$var wire 1 ~% ReadEnable2 $end
$var wire 1 :& Bitline1 $end
$var wire 1 J& Bitline2 $end
$var wire 1 S* Q $end

$scope module flop $end
$var wire 1 S* q $end
$var wire 1 #" d $end
$var wire 1 0& wen $end
$var wire 1 !! clk $end
$var wire 1 "! rst $end
$var reg 1 T* state $end
$upscope $end
$upscope $end

$scope module cells[13] $end
$var wire 1 !! clk $end
$var wire 1 "! rst $end
$var wire 1 $" D $end
$var wire 1 0& WriteEnable $end
$var wire 1 n% ReadEnable1 $end
$var wire 1 ~% ReadEnable2 $end
$var wire 1 ;& Bitline1 $end
$var wire 1 K& Bitline2 $end
$var wire 1 U* Q $end

$scope module flop $end
$var wire 1 U* q $end
$var wire 1 $" d $end
$var wire 1 0& wen $end
$var wire 1 !! clk $end
$var wire 1 "! rst $end
$var reg 1 V* state $end
$upscope $end
$upscope $end

$scope module cells[12] $end
$var wire 1 !! clk $end
$var wire 1 "! rst $end
$var wire 1 %" D $end
$var wire 1 0& WriteEnable $end
$var wire 1 n% ReadEnable1 $end
$var wire 1 ~% ReadEnable2 $end
$var wire 1 <& Bitline1 $end
$var wire 1 L& Bitline2 $end
$var wire 1 W* Q $end

$scope module flop $end
$var wire 1 W* q $end
$var wire 1 %" d $end
$var wire 1 0& wen $end
$var wire 1 !! clk $end
$var wire 1 "! rst $end
$var reg 1 X* state $end
$upscope $end
$upscope $end

$scope module cells[11] $end
$var wire 1 !! clk $end
$var wire 1 "! rst $end
$var wire 1 &" D $end
$var wire 1 0& WriteEnable $end
$var wire 1 n% ReadEnable1 $end
$var wire 1 ~% ReadEnable2 $end
$var wire 1 =& Bitline1 $end
$var wire 1 M& Bitline2 $end
$var wire 1 Y* Q $end

$scope module flop $end
$var wire 1 Y* q $end
$var wire 1 &" d $end
$var wire 1 0& wen $end
$var wire 1 !! clk $end
$var wire 1 "! rst $end
$var reg 1 Z* state $end
$upscope $end
$upscope $end

$scope module cells[10] $end
$var wire 1 !! clk $end
$var wire 1 "! rst $end
$var wire 1 '" D $end
$var wire 1 0& WriteEnable $end
$var wire 1 n% ReadEnable1 $end
$var wire 1 ~% ReadEnable2 $end
$var wire 1 >& Bitline1 $end
$var wire 1 N& Bitline2 $end
$var wire 1 [* Q $end

$scope module flop $end
$var wire 1 [* q $end
$var wire 1 '" d $end
$var wire 1 0& wen $end
$var wire 1 !! clk $end
$var wire 1 "! rst $end
$var reg 1 \* state $end
$upscope $end
$upscope $end

$scope module cells[9] $end
$var wire 1 !! clk $end
$var wire 1 "! rst $end
$var wire 1 (" D $end
$var wire 1 0& WriteEnable $end
$var wire 1 n% ReadEnable1 $end
$var wire 1 ~% ReadEnable2 $end
$var wire 1 ?& Bitline1 $end
$var wire 1 O& Bitline2 $end
$var wire 1 ]* Q $end

$scope module flop $end
$var wire 1 ]* q $end
$var wire 1 (" d $end
$var wire 1 0& wen $end
$var wire 1 !! clk $end
$var wire 1 "! rst $end
$var reg 1 ^* state $end
$upscope $end
$upscope $end

$scope module cells[8] $end
$var wire 1 !! clk $end
$var wire 1 "! rst $end
$var wire 1 )" D $end
$var wire 1 0& WriteEnable $end
$var wire 1 n% ReadEnable1 $end
$var wire 1 ~% ReadEnable2 $end
$var wire 1 @& Bitline1 $end
$var wire 1 P& Bitline2 $end
$var wire 1 _* Q $end

$scope module flop $end
$var wire 1 _* q $end
$var wire 1 )" d $end
$var wire 1 0& wen $end
$var wire 1 !! clk $end
$var wire 1 "! rst $end
$var reg 1 `* state $end
$upscope $end
$upscope $end

$scope module cells[7] $end
$var wire 1 !! clk $end
$var wire 1 "! rst $end
$var wire 1 *" D $end
$var wire 1 0& WriteEnable $end
$var wire 1 n% ReadEnable1 $end
$var wire 1 ~% ReadEnable2 $end
$var wire 1 A& Bitline1 $end
$var wire 1 Q& Bitline2 $end
$var wire 1 a* Q $end

$scope module flop $end
$var wire 1 a* q $end
$var wire 1 *" d $end
$var wire 1 0& wen $end
$var wire 1 !! clk $end
$var wire 1 "! rst $end
$var reg 1 b* state $end
$upscope $end
$upscope $end

$scope module cells[6] $end
$var wire 1 !! clk $end
$var wire 1 "! rst $end
$var wire 1 +" D $end
$var wire 1 0& WriteEnable $end
$var wire 1 n% ReadEnable1 $end
$var wire 1 ~% ReadEnable2 $end
$var wire 1 B& Bitline1 $end
$var wire 1 R& Bitline2 $end
$var wire 1 c* Q $end

$scope module flop $end
$var wire 1 c* q $end
$var wire 1 +" d $end
$var wire 1 0& wen $end
$var wire 1 !! clk $end
$var wire 1 "! rst $end
$var reg 1 d* state $end
$upscope $end
$upscope $end

$scope module cells[5] $end
$var wire 1 !! clk $end
$var wire 1 "! rst $end
$var wire 1 ," D $end
$var wire 1 0& WriteEnable $end
$var wire 1 n% ReadEnable1 $end
$var wire 1 ~% ReadEnable2 $end
$var wire 1 C& Bitline1 $end
$var wire 1 S& Bitline2 $end
$var wire 1 e* Q $end

$scope module flop $end
$var wire 1 e* q $end
$var wire 1 ," d $end
$var wire 1 0& wen $end
$var wire 1 !! clk $end
$var wire 1 "! rst $end
$var reg 1 f* state $end
$upscope $end
$upscope $end

$scope module cells[4] $end
$var wire 1 !! clk $end
$var wire 1 "! rst $end
$var wire 1 -" D $end
$var wire 1 0& WriteEnable $end
$var wire 1 n% ReadEnable1 $end
$var wire 1 ~% ReadEnable2 $end
$var wire 1 D& Bitline1 $end
$var wire 1 T& Bitline2 $end
$var wire 1 g* Q $end

$scope module flop $end
$var wire 1 g* q $end
$var wire 1 -" d $end
$var wire 1 0& wen $end
$var wire 1 !! clk $end
$var wire 1 "! rst $end
$var reg 1 h* state $end
$upscope $end
$upscope $end

$scope module cells[3] $end
$var wire 1 !! clk $end
$var wire 1 "! rst $end
$var wire 1 ." D $end
$var wire 1 0& WriteEnable $end
$var wire 1 n% ReadEnable1 $end
$var wire 1 ~% ReadEnable2 $end
$var wire 1 E& Bitline1 $end
$var wire 1 U& Bitline2 $end
$var wire 1 i* Q $end

$scope module flop $end
$var wire 1 i* q $end
$var wire 1 ." d $end
$var wire 1 0& wen $end
$var wire 1 !! clk $end
$var wire 1 "! rst $end
$var reg 1 j* state $end
$upscope $end
$upscope $end

$scope module cells[2] $end
$var wire 1 !! clk $end
$var wire 1 "! rst $end
$var wire 1 /" D $end
$var wire 1 0& WriteEnable $end
$var wire 1 n% ReadEnable1 $end
$var wire 1 ~% ReadEnable2 $end
$var wire 1 F& Bitline1 $end
$var wire 1 V& Bitline2 $end
$var wire 1 k* Q $end

$scope module flop $end
$var wire 1 k* q $end
$var wire 1 /" d $end
$var wire 1 0& wen $end
$var wire 1 !! clk $end
$var wire 1 "! rst $end
$var reg 1 l* state $end
$upscope $end
$upscope $end

$scope module cells[1] $end
$var wire 1 !! clk $end
$var wire 1 "! rst $end
$var wire 1 0" D $end
$var wire 1 0& WriteEnable $end
$var wire 1 n% ReadEnable1 $end
$var wire 1 ~% ReadEnable2 $end
$var wire 1 G& Bitline1 $end
$var wire 1 W& Bitline2 $end
$var wire 1 m* Q $end

$scope module flop $end
$var wire 1 m* q $end
$var wire 1 0" d $end
$var wire 1 0& wen $end
$var wire 1 !! clk $end
$var wire 1 "! rst $end
$var reg 1 n* state $end
$upscope $end
$upscope $end

$scope module cells[0] $end
$var wire 1 !! clk $end
$var wire 1 "! rst $end
$var wire 1 1" D $end
$var wire 1 0& WriteEnable $end
$var wire 1 n% ReadEnable1 $end
$var wire 1 ~% ReadEnable2 $end
$var wire 1 H& Bitline1 $end
$var wire 1 X& Bitline2 $end
$var wire 1 o* Q $end

$scope module flop $end
$var wire 1 o* q $end
$var wire 1 1" d $end
$var wire 1 0& wen $end
$var wire 1 !! clk $end
$var wire 1 "! rst $end
$var reg 1 p* state $end
$upscope $end
$upscope $end
$upscope $end

$scope module regs[7] $end
$var wire 1 !! clk $end
$var wire 1 "! rst $end
$var wire 1 "" D [15] $end
$var wire 1 #" D [14] $end
$var wire 1 $" D [13] $end
$var wire 1 %" D [12] $end
$var wire 1 &" D [11] $end
$var wire 1 '" D [10] $end
$var wire 1 (" D [9] $end
$var wire 1 )" D [8] $end
$var wire 1 *" D [7] $end
$var wire 1 +" D [6] $end
$var wire 1 ," D [5] $end
$var wire 1 -" D [4] $end
$var wire 1 ." D [3] $end
$var wire 1 /" D [2] $end
$var wire 1 0" D [1] $end
$var wire 1 1" D [0] $end
$var wire 1 1& WriteReg $end
$var wire 1 o% ReadEnable1 $end
$var wire 1 !& ReadEnable2 $end
$var wire 1 9& Bitline1 [15] $end
$var wire 1 :& Bitline1 [14] $end
$var wire 1 ;& Bitline1 [13] $end
$var wire 1 <& Bitline1 [12] $end
$var wire 1 =& Bitline1 [11] $end
$var wire 1 >& Bitline1 [10] $end
$var wire 1 ?& Bitline1 [9] $end
$var wire 1 @& Bitline1 [8] $end
$var wire 1 A& Bitline1 [7] $end
$var wire 1 B& Bitline1 [6] $end
$var wire 1 C& Bitline1 [5] $end
$var wire 1 D& Bitline1 [4] $end
$var wire 1 E& Bitline1 [3] $end
$var wire 1 F& Bitline1 [2] $end
$var wire 1 G& Bitline1 [1] $end
$var wire 1 H& Bitline1 [0] $end
$var wire 1 I& Bitline2 [15] $end
$var wire 1 J& Bitline2 [14] $end
$var wire 1 K& Bitline2 [13] $end
$var wire 1 L& Bitline2 [12] $end
$var wire 1 M& Bitline2 [11] $end
$var wire 1 N& Bitline2 [10] $end
$var wire 1 O& Bitline2 [9] $end
$var wire 1 P& Bitline2 [8] $end
$var wire 1 Q& Bitline2 [7] $end
$var wire 1 R& Bitline2 [6] $end
$var wire 1 S& Bitline2 [5] $end
$var wire 1 T& Bitline2 [4] $end
$var wire 1 U& Bitline2 [3] $end
$var wire 1 V& Bitline2 [2] $end
$var wire 1 W& Bitline2 [1] $end
$var wire 1 X& Bitline2 [0] $end

$scope module cells[15] $end
$var wire 1 !! clk $end
$var wire 1 "! rst $end
$var wire 1 "" D $end
$var wire 1 1& WriteEnable $end
$var wire 1 o% ReadEnable1 $end
$var wire 1 !& ReadEnable2 $end
$var wire 1 9& Bitline1 $end
$var wire 1 I& Bitline2 $end
$var wire 1 q* Q $end

$scope module flop $end
$var wire 1 q* q $end
$var wire 1 "" d $end
$var wire 1 1& wen $end
$var wire 1 !! clk $end
$var wire 1 "! rst $end
$var reg 1 r* state $end
$upscope $end
$upscope $end

$scope module cells[14] $end
$var wire 1 !! clk $end
$var wire 1 "! rst $end
$var wire 1 #" D $end
$var wire 1 1& WriteEnable $end
$var wire 1 o% ReadEnable1 $end
$var wire 1 !& ReadEnable2 $end
$var wire 1 :& Bitline1 $end
$var wire 1 J& Bitline2 $end
$var wire 1 s* Q $end

$scope module flop $end
$var wire 1 s* q $end
$var wire 1 #" d $end
$var wire 1 1& wen $end
$var wire 1 !! clk $end
$var wire 1 "! rst $end
$var reg 1 t* state $end
$upscope $end
$upscope $end

$scope module cells[13] $end
$var wire 1 !! clk $end
$var wire 1 "! rst $end
$var wire 1 $" D $end
$var wire 1 1& WriteEnable $end
$var wire 1 o% ReadEnable1 $end
$var wire 1 !& ReadEnable2 $end
$var wire 1 ;& Bitline1 $end
$var wire 1 K& Bitline2 $end
$var wire 1 u* Q $end

$scope module flop $end
$var wire 1 u* q $end
$var wire 1 $" d $end
$var wire 1 1& wen $end
$var wire 1 !! clk $end
$var wire 1 "! rst $end
$var reg 1 v* state $end
$upscope $end
$upscope $end

$scope module cells[12] $end
$var wire 1 !! clk $end
$var wire 1 "! rst $end
$var wire 1 %" D $end
$var wire 1 1& WriteEnable $end
$var wire 1 o% ReadEnable1 $end
$var wire 1 !& ReadEnable2 $end
$var wire 1 <& Bitline1 $end
$var wire 1 L& Bitline2 $end
$var wire 1 w* Q $end

$scope module flop $end
$var wire 1 w* q $end
$var wire 1 %" d $end
$var wire 1 1& wen $end
$var wire 1 !! clk $end
$var wire 1 "! rst $end
$var reg 1 x* state $end
$upscope $end
$upscope $end

$scope module cells[11] $end
$var wire 1 !! clk $end
$var wire 1 "! rst $end
$var wire 1 &" D $end
$var wire 1 1& WriteEnable $end
$var wire 1 o% ReadEnable1 $end
$var wire 1 !& ReadEnable2 $end
$var wire 1 =& Bitline1 $end
$var wire 1 M& Bitline2 $end
$var wire 1 y* Q $end

$scope module flop $end
$var wire 1 y* q $end
$var wire 1 &" d $end
$var wire 1 1& wen $end
$var wire 1 !! clk $end
$var wire 1 "! rst $end
$var reg 1 z* state $end
$upscope $end
$upscope $end

$scope module cells[10] $end
$var wire 1 !! clk $end
$var wire 1 "! rst $end
$var wire 1 '" D $end
$var wire 1 1& WriteEnable $end
$var wire 1 o% ReadEnable1 $end
$var wire 1 !& ReadEnable2 $end
$var wire 1 >& Bitline1 $end
$var wire 1 N& Bitline2 $end
$var wire 1 {* Q $end

$scope module flop $end
$var wire 1 {* q $end
$var wire 1 '" d $end
$var wire 1 1& wen $end
$var wire 1 !! clk $end
$var wire 1 "! rst $end
$var reg 1 |* state $end
$upscope $end
$upscope $end

$scope module cells[9] $end
$var wire 1 !! clk $end
$var wire 1 "! rst $end
$var wire 1 (" D $end
$var wire 1 1& WriteEnable $end
$var wire 1 o% ReadEnable1 $end
$var wire 1 !& ReadEnable2 $end
$var wire 1 ?& Bitline1 $end
$var wire 1 O& Bitline2 $end
$var wire 1 }* Q $end

$scope module flop $end
$var wire 1 }* q $end
$var wire 1 (" d $end
$var wire 1 1& wen $end
$var wire 1 !! clk $end
$var wire 1 "! rst $end
$var reg 1 ~* state $end
$upscope $end
$upscope $end

$scope module cells[8] $end
$var wire 1 !! clk $end
$var wire 1 "! rst $end
$var wire 1 )" D $end
$var wire 1 1& WriteEnable $end
$var wire 1 o% ReadEnable1 $end
$var wire 1 !& ReadEnable2 $end
$var wire 1 @& Bitline1 $end
$var wire 1 P& Bitline2 $end
$var wire 1 !+ Q $end

$scope module flop $end
$var wire 1 !+ q $end
$var wire 1 )" d $end
$var wire 1 1& wen $end
$var wire 1 !! clk $end
$var wire 1 "! rst $end
$var reg 1 "+ state $end
$upscope $end
$upscope $end

$scope module cells[7] $end
$var wire 1 !! clk $end
$var wire 1 "! rst $end
$var wire 1 *" D $end
$var wire 1 1& WriteEnable $end
$var wire 1 o% ReadEnable1 $end
$var wire 1 !& ReadEnable2 $end
$var wire 1 A& Bitline1 $end
$var wire 1 Q& Bitline2 $end
$var wire 1 #+ Q $end

$scope module flop $end
$var wire 1 #+ q $end
$var wire 1 *" d $end
$var wire 1 1& wen $end
$var wire 1 !! clk $end
$var wire 1 "! rst $end
$var reg 1 $+ state $end
$upscope $end
$upscope $end

$scope module cells[6] $end
$var wire 1 !! clk $end
$var wire 1 "! rst $end
$var wire 1 +" D $end
$var wire 1 1& WriteEnable $end
$var wire 1 o% ReadEnable1 $end
$var wire 1 !& ReadEnable2 $end
$var wire 1 B& Bitline1 $end
$var wire 1 R& Bitline2 $end
$var wire 1 %+ Q $end

$scope module flop $end
$var wire 1 %+ q $end
$var wire 1 +" d $end
$var wire 1 1& wen $end
$var wire 1 !! clk $end
$var wire 1 "! rst $end
$var reg 1 &+ state $end
$upscope $end
$upscope $end

$scope module cells[5] $end
$var wire 1 !! clk $end
$var wire 1 "! rst $end
$var wire 1 ," D $end
$var wire 1 1& WriteEnable $end
$var wire 1 o% ReadEnable1 $end
$var wire 1 !& ReadEnable2 $end
$var wire 1 C& Bitline1 $end
$var wire 1 S& Bitline2 $end
$var wire 1 '+ Q $end

$scope module flop $end
$var wire 1 '+ q $end
$var wire 1 ," d $end
$var wire 1 1& wen $end
$var wire 1 !! clk $end
$var wire 1 "! rst $end
$var reg 1 (+ state $end
$upscope $end
$upscope $end

$scope module cells[4] $end
$var wire 1 !! clk $end
$var wire 1 "! rst $end
$var wire 1 -" D $end
$var wire 1 1& WriteEnable $end
$var wire 1 o% ReadEnable1 $end
$var wire 1 !& ReadEnable2 $end
$var wire 1 D& Bitline1 $end
$var wire 1 T& Bitline2 $end
$var wire 1 )+ Q $end

$scope module flop $end
$var wire 1 )+ q $end
$var wire 1 -" d $end
$var wire 1 1& wen $end
$var wire 1 !! clk $end
$var wire 1 "! rst $end
$var reg 1 *+ state $end
$upscope $end
$upscope $end

$scope module cells[3] $end
$var wire 1 !! clk $end
$var wire 1 "! rst $end
$var wire 1 ." D $end
$var wire 1 1& WriteEnable $end
$var wire 1 o% ReadEnable1 $end
$var wire 1 !& ReadEnable2 $end
$var wire 1 E& Bitline1 $end
$var wire 1 U& Bitline2 $end
$var wire 1 ++ Q $end

$scope module flop $end
$var wire 1 ++ q $end
$var wire 1 ." d $end
$var wire 1 1& wen $end
$var wire 1 !! clk $end
$var wire 1 "! rst $end
$var reg 1 ,+ state $end
$upscope $end
$upscope $end

$scope module cells[2] $end
$var wire 1 !! clk $end
$var wire 1 "! rst $end
$var wire 1 /" D $end
$var wire 1 1& WriteEnable $end
$var wire 1 o% ReadEnable1 $end
$var wire 1 !& ReadEnable2 $end
$var wire 1 F& Bitline1 $end
$var wire 1 V& Bitline2 $end
$var wire 1 -+ Q $end

$scope module flop $end
$var wire 1 -+ q $end
$var wire 1 /" d $end
$var wire 1 1& wen $end
$var wire 1 !! clk $end
$var wire 1 "! rst $end
$var reg 1 .+ state $end
$upscope $end
$upscope $end

$scope module cells[1] $end
$var wire 1 !! clk $end
$var wire 1 "! rst $end
$var wire 1 0" D $end
$var wire 1 1& WriteEnable $end
$var wire 1 o% ReadEnable1 $end
$var wire 1 !& ReadEnable2 $end
$var wire 1 G& Bitline1 $end
$var wire 1 W& Bitline2 $end
$var wire 1 /+ Q $end

$scope module flop $end
$var wire 1 /+ q $end
$var wire 1 0" d $end
$var wire 1 1& wen $end
$var wire 1 !! clk $end
$var wire 1 "! rst $end
$var reg 1 0+ state $end
$upscope $end
$upscope $end

$scope module cells[0] $end
$var wire 1 !! clk $end
$var wire 1 "! rst $end
$var wire 1 1" D $end
$var wire 1 1& WriteEnable $end
$var wire 1 o% ReadEnable1 $end
$var wire 1 !& ReadEnable2 $end
$var wire 1 H& Bitline1 $end
$var wire 1 X& Bitline2 $end
$var wire 1 1+ Q $end

$scope module flop $end
$var wire 1 1+ q $end
$var wire 1 1" d $end
$var wire 1 1& wen $end
$var wire 1 !! clk $end
$var wire 1 "! rst $end
$var reg 1 2+ state $end
$upscope $end
$upscope $end
$upscope $end

$scope module regs[6] $end
$var wire 1 !! clk $end
$var wire 1 "! rst $end
$var wire 1 "" D [15] $end
$var wire 1 #" D [14] $end
$var wire 1 $" D [13] $end
$var wire 1 %" D [12] $end
$var wire 1 &" D [11] $end
$var wire 1 '" D [10] $end
$var wire 1 (" D [9] $end
$var wire 1 )" D [8] $end
$var wire 1 *" D [7] $end
$var wire 1 +" D [6] $end
$var wire 1 ," D [5] $end
$var wire 1 -" D [4] $end
$var wire 1 ." D [3] $end
$var wire 1 /" D [2] $end
$var wire 1 0" D [1] $end
$var wire 1 1" D [0] $end
$var wire 1 2& WriteReg $end
$var wire 1 p% ReadEnable1 $end
$var wire 1 "& ReadEnable2 $end
$var wire 1 9& Bitline1 [15] $end
$var wire 1 :& Bitline1 [14] $end
$var wire 1 ;& Bitline1 [13] $end
$var wire 1 <& Bitline1 [12] $end
$var wire 1 =& Bitline1 [11] $end
$var wire 1 >& Bitline1 [10] $end
$var wire 1 ?& Bitline1 [9] $end
$var wire 1 @& Bitline1 [8] $end
$var wire 1 A& Bitline1 [7] $end
$var wire 1 B& Bitline1 [6] $end
$var wire 1 C& Bitline1 [5] $end
$var wire 1 D& Bitline1 [4] $end
$var wire 1 E& Bitline1 [3] $end
$var wire 1 F& Bitline1 [2] $end
$var wire 1 G& Bitline1 [1] $end
$var wire 1 H& Bitline1 [0] $end
$var wire 1 I& Bitline2 [15] $end
$var wire 1 J& Bitline2 [14] $end
$var wire 1 K& Bitline2 [13] $end
$var wire 1 L& Bitline2 [12] $end
$var wire 1 M& Bitline2 [11] $end
$var wire 1 N& Bitline2 [10] $end
$var wire 1 O& Bitline2 [9] $end
$var wire 1 P& Bitline2 [8] $end
$var wire 1 Q& Bitline2 [7] $end
$var wire 1 R& Bitline2 [6] $end
$var wire 1 S& Bitline2 [5] $end
$var wire 1 T& Bitline2 [4] $end
$var wire 1 U& Bitline2 [3] $end
$var wire 1 V& Bitline2 [2] $end
$var wire 1 W& Bitline2 [1] $end
$var wire 1 X& Bitline2 [0] $end

$scope module cells[15] $end
$var wire 1 !! clk $end
$var wire 1 "! rst $end
$var wire 1 "" D $end
$var wire 1 2& WriteEnable $end
$var wire 1 p% ReadEnable1 $end
$var wire 1 "& ReadEnable2 $end
$var wire 1 9& Bitline1 $end
$var wire 1 I& Bitline2 $end
$var wire 1 3+ Q $end

$scope module flop $end
$var wire 1 3+ q $end
$var wire 1 "" d $end
$var wire 1 2& wen $end
$var wire 1 !! clk $end
$var wire 1 "! rst $end
$var reg 1 4+ state $end
$upscope $end
$upscope $end

$scope module cells[14] $end
$var wire 1 !! clk $end
$var wire 1 "! rst $end
$var wire 1 #" D $end
$var wire 1 2& WriteEnable $end
$var wire 1 p% ReadEnable1 $end
$var wire 1 "& ReadEnable2 $end
$var wire 1 :& Bitline1 $end
$var wire 1 J& Bitline2 $end
$var wire 1 5+ Q $end

$scope module flop $end
$var wire 1 5+ q $end
$var wire 1 #" d $end
$var wire 1 2& wen $end
$var wire 1 !! clk $end
$var wire 1 "! rst $end
$var reg 1 6+ state $end
$upscope $end
$upscope $end

$scope module cells[13] $end
$var wire 1 !! clk $end
$var wire 1 "! rst $end
$var wire 1 $" D $end
$var wire 1 2& WriteEnable $end
$var wire 1 p% ReadEnable1 $end
$var wire 1 "& ReadEnable2 $end
$var wire 1 ;& Bitline1 $end
$var wire 1 K& Bitline2 $end
$var wire 1 7+ Q $end

$scope module flop $end
$var wire 1 7+ q $end
$var wire 1 $" d $end
$var wire 1 2& wen $end
$var wire 1 !! clk $end
$var wire 1 "! rst $end
$var reg 1 8+ state $end
$upscope $end
$upscope $end

$scope module cells[12] $end
$var wire 1 !! clk $end
$var wire 1 "! rst $end
$var wire 1 %" D $end
$var wire 1 2& WriteEnable $end
$var wire 1 p% ReadEnable1 $end
$var wire 1 "& ReadEnable2 $end
$var wire 1 <& Bitline1 $end
$var wire 1 L& Bitline2 $end
$var wire 1 9+ Q $end

$scope module flop $end
$var wire 1 9+ q $end
$var wire 1 %" d $end
$var wire 1 2& wen $end
$var wire 1 !! clk $end
$var wire 1 "! rst $end
$var reg 1 :+ state $end
$upscope $end
$upscope $end

$scope module cells[11] $end
$var wire 1 !! clk $end
$var wire 1 "! rst $end
$var wire 1 &" D $end
$var wire 1 2& WriteEnable $end
$var wire 1 p% ReadEnable1 $end
$var wire 1 "& ReadEnable2 $end
$var wire 1 =& Bitline1 $end
$var wire 1 M& Bitline2 $end
$var wire 1 ;+ Q $end

$scope module flop $end
$var wire 1 ;+ q $end
$var wire 1 &" d $end
$var wire 1 2& wen $end
$var wire 1 !! clk $end
$var wire 1 "! rst $end
$var reg 1 <+ state $end
$upscope $end
$upscope $end

$scope module cells[10] $end
$var wire 1 !! clk $end
$var wire 1 "! rst $end
$var wire 1 '" D $end
$var wire 1 2& WriteEnable $end
$var wire 1 p% ReadEnable1 $end
$var wire 1 "& ReadEnable2 $end
$var wire 1 >& Bitline1 $end
$var wire 1 N& Bitline2 $end
$var wire 1 =+ Q $end

$scope module flop $end
$var wire 1 =+ q $end
$var wire 1 '" d $end
$var wire 1 2& wen $end
$var wire 1 !! clk $end
$var wire 1 "! rst $end
$var reg 1 >+ state $end
$upscope $end
$upscope $end

$scope module cells[9] $end
$var wire 1 !! clk $end
$var wire 1 "! rst $end
$var wire 1 (" D $end
$var wire 1 2& WriteEnable $end
$var wire 1 p% ReadEnable1 $end
$var wire 1 "& ReadEnable2 $end
$var wire 1 ?& Bitline1 $end
$var wire 1 O& Bitline2 $end
$var wire 1 ?+ Q $end

$scope module flop $end
$var wire 1 ?+ q $end
$var wire 1 (" d $end
$var wire 1 2& wen $end
$var wire 1 !! clk $end
$var wire 1 "! rst $end
$var reg 1 @+ state $end
$upscope $end
$upscope $end

$scope module cells[8] $end
$var wire 1 !! clk $end
$var wire 1 "! rst $end
$var wire 1 )" D $end
$var wire 1 2& WriteEnable $end
$var wire 1 p% ReadEnable1 $end
$var wire 1 "& ReadEnable2 $end
$var wire 1 @& Bitline1 $end
$var wire 1 P& Bitline2 $end
$var wire 1 A+ Q $end

$scope module flop $end
$var wire 1 A+ q $end
$var wire 1 )" d $end
$var wire 1 2& wen $end
$var wire 1 !! clk $end
$var wire 1 "! rst $end
$var reg 1 B+ state $end
$upscope $end
$upscope $end

$scope module cells[7] $end
$var wire 1 !! clk $end
$var wire 1 "! rst $end
$var wire 1 *" D $end
$var wire 1 2& WriteEnable $end
$var wire 1 p% ReadEnable1 $end
$var wire 1 "& ReadEnable2 $end
$var wire 1 A& Bitline1 $end
$var wire 1 Q& Bitline2 $end
$var wire 1 C+ Q $end

$scope module flop $end
$var wire 1 C+ q $end
$var wire 1 *" d $end
$var wire 1 2& wen $end
$var wire 1 !! clk $end
$var wire 1 "! rst $end
$var reg 1 D+ state $end
$upscope $end
$upscope $end

$scope module cells[6] $end
$var wire 1 !! clk $end
$var wire 1 "! rst $end
$var wire 1 +" D $end
$var wire 1 2& WriteEnable $end
$var wire 1 p% ReadEnable1 $end
$var wire 1 "& ReadEnable2 $end
$var wire 1 B& Bitline1 $end
$var wire 1 R& Bitline2 $end
$var wire 1 E+ Q $end

$scope module flop $end
$var wire 1 E+ q $end
$var wire 1 +" d $end
$var wire 1 2& wen $end
$var wire 1 !! clk $end
$var wire 1 "! rst $end
$var reg 1 F+ state $end
$upscope $end
$upscope $end

$scope module cells[5] $end
$var wire 1 !! clk $end
$var wire 1 "! rst $end
$var wire 1 ," D $end
$var wire 1 2& WriteEnable $end
$var wire 1 p% ReadEnable1 $end
$var wire 1 "& ReadEnable2 $end
$var wire 1 C& Bitline1 $end
$var wire 1 S& Bitline2 $end
$var wire 1 G+ Q $end

$scope module flop $end
$var wire 1 G+ q $end
$var wire 1 ," d $end
$var wire 1 2& wen $end
$var wire 1 !! clk $end
$var wire 1 "! rst $end
$var reg 1 H+ state $end
$upscope $end
$upscope $end

$scope module cells[4] $end
$var wire 1 !! clk $end
$var wire 1 "! rst $end
$var wire 1 -" D $end
$var wire 1 2& WriteEnable $end
$var wire 1 p% ReadEnable1 $end
$var wire 1 "& ReadEnable2 $end
$var wire 1 D& Bitline1 $end
$var wire 1 T& Bitline2 $end
$var wire 1 I+ Q $end

$scope module flop $end
$var wire 1 I+ q $end
$var wire 1 -" d $end
$var wire 1 2& wen $end
$var wire 1 !! clk $end
$var wire 1 "! rst $end
$var reg 1 J+ state $end
$upscope $end
$upscope $end

$scope module cells[3] $end
$var wire 1 !! clk $end
$var wire 1 "! rst $end
$var wire 1 ." D $end
$var wire 1 2& WriteEnable $end
$var wire 1 p% ReadEnable1 $end
$var wire 1 "& ReadEnable2 $end
$var wire 1 E& Bitline1 $end
$var wire 1 U& Bitline2 $end
$var wire 1 K+ Q $end

$scope module flop $end
$var wire 1 K+ q $end
$var wire 1 ." d $end
$var wire 1 2& wen $end
$var wire 1 !! clk $end
$var wire 1 "! rst $end
$var reg 1 L+ state $end
$upscope $end
$upscope $end

$scope module cells[2] $end
$var wire 1 !! clk $end
$var wire 1 "! rst $end
$var wire 1 /" D $end
$var wire 1 2& WriteEnable $end
$var wire 1 p% ReadEnable1 $end
$var wire 1 "& ReadEnable2 $end
$var wire 1 F& Bitline1 $end
$var wire 1 V& Bitline2 $end
$var wire 1 M+ Q $end

$scope module flop $end
$var wire 1 M+ q $end
$var wire 1 /" d $end
$var wire 1 2& wen $end
$var wire 1 !! clk $end
$var wire 1 "! rst $end
$var reg 1 N+ state $end
$upscope $end
$upscope $end

$scope module cells[1] $end
$var wire 1 !! clk $end
$var wire 1 "! rst $end
$var wire 1 0" D $end
$var wire 1 2& WriteEnable $end
$var wire 1 p% ReadEnable1 $end
$var wire 1 "& ReadEnable2 $end
$var wire 1 G& Bitline1 $end
$var wire 1 W& Bitline2 $end
$var wire 1 O+ Q $end

$scope module flop $end
$var wire 1 O+ q $end
$var wire 1 0" d $end
$var wire 1 2& wen $end
$var wire 1 !! clk $end
$var wire 1 "! rst $end
$var reg 1 P+ state $end
$upscope $end
$upscope $end

$scope module cells[0] $end
$var wire 1 !! clk $end
$var wire 1 "! rst $end
$var wire 1 1" D $end
$var wire 1 2& WriteEnable $end
$var wire 1 p% ReadEnable1 $end
$var wire 1 "& ReadEnable2 $end
$var wire 1 H& Bitline1 $end
$var wire 1 X& Bitline2 $end
$var wire 1 Q+ Q $end

$scope module flop $end
$var wire 1 Q+ q $end
$var wire 1 1" d $end
$var wire 1 2& wen $end
$var wire 1 !! clk $end
$var wire 1 "! rst $end
$var reg 1 R+ state $end
$upscope $end
$upscope $end
$upscope $end

$scope module regs[5] $end
$var wire 1 !! clk $end
$var wire 1 "! rst $end
$var wire 1 "" D [15] $end
$var wire 1 #" D [14] $end
$var wire 1 $" D [13] $end
$var wire 1 %" D [12] $end
$var wire 1 &" D [11] $end
$var wire 1 '" D [10] $end
$var wire 1 (" D [9] $end
$var wire 1 )" D [8] $end
$var wire 1 *" D [7] $end
$var wire 1 +" D [6] $end
$var wire 1 ," D [5] $end
$var wire 1 -" D [4] $end
$var wire 1 ." D [3] $end
$var wire 1 /" D [2] $end
$var wire 1 0" D [1] $end
$var wire 1 1" D [0] $end
$var wire 1 3& WriteReg $end
$var wire 1 q% ReadEnable1 $end
$var wire 1 #& ReadEnable2 $end
$var wire 1 9& Bitline1 [15] $end
$var wire 1 :& Bitline1 [14] $end
$var wire 1 ;& Bitline1 [13] $end
$var wire 1 <& Bitline1 [12] $end
$var wire 1 =& Bitline1 [11] $end
$var wire 1 >& Bitline1 [10] $end
$var wire 1 ?& Bitline1 [9] $end
$var wire 1 @& Bitline1 [8] $end
$var wire 1 A& Bitline1 [7] $end
$var wire 1 B& Bitline1 [6] $end
$var wire 1 C& Bitline1 [5] $end
$var wire 1 D& Bitline1 [4] $end
$var wire 1 E& Bitline1 [3] $end
$var wire 1 F& Bitline1 [2] $end
$var wire 1 G& Bitline1 [1] $end
$var wire 1 H& Bitline1 [0] $end
$var wire 1 I& Bitline2 [15] $end
$var wire 1 J& Bitline2 [14] $end
$var wire 1 K& Bitline2 [13] $end
$var wire 1 L& Bitline2 [12] $end
$var wire 1 M& Bitline2 [11] $end
$var wire 1 N& Bitline2 [10] $end
$var wire 1 O& Bitline2 [9] $end
$var wire 1 P& Bitline2 [8] $end
$var wire 1 Q& Bitline2 [7] $end
$var wire 1 R& Bitline2 [6] $end
$var wire 1 S& Bitline2 [5] $end
$var wire 1 T& Bitline2 [4] $end
$var wire 1 U& Bitline2 [3] $end
$var wire 1 V& Bitline2 [2] $end
$var wire 1 W& Bitline2 [1] $end
$var wire 1 X& Bitline2 [0] $end

$scope module cells[15] $end
$var wire 1 !! clk $end
$var wire 1 "! rst $end
$var wire 1 "" D $end
$var wire 1 3& WriteEnable $end
$var wire 1 q% ReadEnable1 $end
$var wire 1 #& ReadEnable2 $end
$var wire 1 9& Bitline1 $end
$var wire 1 I& Bitline2 $end
$var wire 1 S+ Q $end

$scope module flop $end
$var wire 1 S+ q $end
$var wire 1 "" d $end
$var wire 1 3& wen $end
$var wire 1 !! clk $end
$var wire 1 "! rst $end
$var reg 1 T+ state $end
$upscope $end
$upscope $end

$scope module cells[14] $end
$var wire 1 !! clk $end
$var wire 1 "! rst $end
$var wire 1 #" D $end
$var wire 1 3& WriteEnable $end
$var wire 1 q% ReadEnable1 $end
$var wire 1 #& ReadEnable2 $end
$var wire 1 :& Bitline1 $end
$var wire 1 J& Bitline2 $end
$var wire 1 U+ Q $end

$scope module flop $end
$var wire 1 U+ q $end
$var wire 1 #" d $end
$var wire 1 3& wen $end
$var wire 1 !! clk $end
$var wire 1 "! rst $end
$var reg 1 V+ state $end
$upscope $end
$upscope $end

$scope module cells[13] $end
$var wire 1 !! clk $end
$var wire 1 "! rst $end
$var wire 1 $" D $end
$var wire 1 3& WriteEnable $end
$var wire 1 q% ReadEnable1 $end
$var wire 1 #& ReadEnable2 $end
$var wire 1 ;& Bitline1 $end
$var wire 1 K& Bitline2 $end
$var wire 1 W+ Q $end

$scope module flop $end
$var wire 1 W+ q $end
$var wire 1 $" d $end
$var wire 1 3& wen $end
$var wire 1 !! clk $end
$var wire 1 "! rst $end
$var reg 1 X+ state $end
$upscope $end
$upscope $end

$scope module cells[12] $end
$var wire 1 !! clk $end
$var wire 1 "! rst $end
$var wire 1 %" D $end
$var wire 1 3& WriteEnable $end
$var wire 1 q% ReadEnable1 $end
$var wire 1 #& ReadEnable2 $end
$var wire 1 <& Bitline1 $end
$var wire 1 L& Bitline2 $end
$var wire 1 Y+ Q $end

$scope module flop $end
$var wire 1 Y+ q $end
$var wire 1 %" d $end
$var wire 1 3& wen $end
$var wire 1 !! clk $end
$var wire 1 "! rst $end
$var reg 1 Z+ state $end
$upscope $end
$upscope $end

$scope module cells[11] $end
$var wire 1 !! clk $end
$var wire 1 "! rst $end
$var wire 1 &" D $end
$var wire 1 3& WriteEnable $end
$var wire 1 q% ReadEnable1 $end
$var wire 1 #& ReadEnable2 $end
$var wire 1 =& Bitline1 $end
$var wire 1 M& Bitline2 $end
$var wire 1 [+ Q $end

$scope module flop $end
$var wire 1 [+ q $end
$var wire 1 &" d $end
$var wire 1 3& wen $end
$var wire 1 !! clk $end
$var wire 1 "! rst $end
$var reg 1 \+ state $end
$upscope $end
$upscope $end

$scope module cells[10] $end
$var wire 1 !! clk $end
$var wire 1 "! rst $end
$var wire 1 '" D $end
$var wire 1 3& WriteEnable $end
$var wire 1 q% ReadEnable1 $end
$var wire 1 #& ReadEnable2 $end
$var wire 1 >& Bitline1 $end
$var wire 1 N& Bitline2 $end
$var wire 1 ]+ Q $end

$scope module flop $end
$var wire 1 ]+ q $end
$var wire 1 '" d $end
$var wire 1 3& wen $end
$var wire 1 !! clk $end
$var wire 1 "! rst $end
$var reg 1 ^+ state $end
$upscope $end
$upscope $end

$scope module cells[9] $end
$var wire 1 !! clk $end
$var wire 1 "! rst $end
$var wire 1 (" D $end
$var wire 1 3& WriteEnable $end
$var wire 1 q% ReadEnable1 $end
$var wire 1 #& ReadEnable2 $end
$var wire 1 ?& Bitline1 $end
$var wire 1 O& Bitline2 $end
$var wire 1 _+ Q $end

$scope module flop $end
$var wire 1 _+ q $end
$var wire 1 (" d $end
$var wire 1 3& wen $end
$var wire 1 !! clk $end
$var wire 1 "! rst $end
$var reg 1 `+ state $end
$upscope $end
$upscope $end

$scope module cells[8] $end
$var wire 1 !! clk $end
$var wire 1 "! rst $end
$var wire 1 )" D $end
$var wire 1 3& WriteEnable $end
$var wire 1 q% ReadEnable1 $end
$var wire 1 #& ReadEnable2 $end
$var wire 1 @& Bitline1 $end
$var wire 1 P& Bitline2 $end
$var wire 1 a+ Q $end

$scope module flop $end
$var wire 1 a+ q $end
$var wire 1 )" d $end
$var wire 1 3& wen $end
$var wire 1 !! clk $end
$var wire 1 "! rst $end
$var reg 1 b+ state $end
$upscope $end
$upscope $end

$scope module cells[7] $end
$var wire 1 !! clk $end
$var wire 1 "! rst $end
$var wire 1 *" D $end
$var wire 1 3& WriteEnable $end
$var wire 1 q% ReadEnable1 $end
$var wire 1 #& ReadEnable2 $end
$var wire 1 A& Bitline1 $end
$var wire 1 Q& Bitline2 $end
$var wire 1 c+ Q $end

$scope module flop $end
$var wire 1 c+ q $end
$var wire 1 *" d $end
$var wire 1 3& wen $end
$var wire 1 !! clk $end
$var wire 1 "! rst $end
$var reg 1 d+ state $end
$upscope $end
$upscope $end

$scope module cells[6] $end
$var wire 1 !! clk $end
$var wire 1 "! rst $end
$var wire 1 +" D $end
$var wire 1 3& WriteEnable $end
$var wire 1 q% ReadEnable1 $end
$var wire 1 #& ReadEnable2 $end
$var wire 1 B& Bitline1 $end
$var wire 1 R& Bitline2 $end
$var wire 1 e+ Q $end

$scope module flop $end
$var wire 1 e+ q $end
$var wire 1 +" d $end
$var wire 1 3& wen $end
$var wire 1 !! clk $end
$var wire 1 "! rst $end
$var reg 1 f+ state $end
$upscope $end
$upscope $end

$scope module cells[5] $end
$var wire 1 !! clk $end
$var wire 1 "! rst $end
$var wire 1 ," D $end
$var wire 1 3& WriteEnable $end
$var wire 1 q% ReadEnable1 $end
$var wire 1 #& ReadEnable2 $end
$var wire 1 C& Bitline1 $end
$var wire 1 S& Bitline2 $end
$var wire 1 g+ Q $end

$scope module flop $end
$var wire 1 g+ q $end
$var wire 1 ," d $end
$var wire 1 3& wen $end
$var wire 1 !! clk $end
$var wire 1 "! rst $end
$var reg 1 h+ state $end
$upscope $end
$upscope $end

$scope module cells[4] $end
$var wire 1 !! clk $end
$var wire 1 "! rst $end
$var wire 1 -" D $end
$var wire 1 3& WriteEnable $end
$var wire 1 q% ReadEnable1 $end
$var wire 1 #& ReadEnable2 $end
$var wire 1 D& Bitline1 $end
$var wire 1 T& Bitline2 $end
$var wire 1 i+ Q $end

$scope module flop $end
$var wire 1 i+ q $end
$var wire 1 -" d $end
$var wire 1 3& wen $end
$var wire 1 !! clk $end
$var wire 1 "! rst $end
$var reg 1 j+ state $end
$upscope $end
$upscope $end

$scope module cells[3] $end
$var wire 1 !! clk $end
$var wire 1 "! rst $end
$var wire 1 ." D $end
$var wire 1 3& WriteEnable $end
$var wire 1 q% ReadEnable1 $end
$var wire 1 #& ReadEnable2 $end
$var wire 1 E& Bitline1 $end
$var wire 1 U& Bitline2 $end
$var wire 1 k+ Q $end

$scope module flop $end
$var wire 1 k+ q $end
$var wire 1 ." d $end
$var wire 1 3& wen $end
$var wire 1 !! clk $end
$var wire 1 "! rst $end
$var reg 1 l+ state $end
$upscope $end
$upscope $end

$scope module cells[2] $end
$var wire 1 !! clk $end
$var wire 1 "! rst $end
$var wire 1 /" D $end
$var wire 1 3& WriteEnable $end
$var wire 1 q% ReadEnable1 $end
$var wire 1 #& ReadEnable2 $end
$var wire 1 F& Bitline1 $end
$var wire 1 V& Bitline2 $end
$var wire 1 m+ Q $end

$scope module flop $end
$var wire 1 m+ q $end
$var wire 1 /" d $end
$var wire 1 3& wen $end
$var wire 1 !! clk $end
$var wire 1 "! rst $end
$var reg 1 n+ state $end
$upscope $end
$upscope $end

$scope module cells[1] $end
$var wire 1 !! clk $end
$var wire 1 "! rst $end
$var wire 1 0" D $end
$var wire 1 3& WriteEnable $end
$var wire 1 q% ReadEnable1 $end
$var wire 1 #& ReadEnable2 $end
$var wire 1 G& Bitline1 $end
$var wire 1 W& Bitline2 $end
$var wire 1 o+ Q $end

$scope module flop $end
$var wire 1 o+ q $end
$var wire 1 0" d $end
$var wire 1 3& wen $end
$var wire 1 !! clk $end
$var wire 1 "! rst $end
$var reg 1 p+ state $end
$upscope $end
$upscope $end

$scope module cells[0] $end
$var wire 1 !! clk $end
$var wire 1 "! rst $end
$var wire 1 1" D $end
$var wire 1 3& WriteEnable $end
$var wire 1 q% ReadEnable1 $end
$var wire 1 #& ReadEnable2 $end
$var wire 1 H& Bitline1 $end
$var wire 1 X& Bitline2 $end
$var wire 1 q+ Q $end

$scope module flop $end
$var wire 1 q+ q $end
$var wire 1 1" d $end
$var wire 1 3& wen $end
$var wire 1 !! clk $end
$var wire 1 "! rst $end
$var reg 1 r+ state $end
$upscope $end
$upscope $end
$upscope $end

$scope module regs[4] $end
$var wire 1 !! clk $end
$var wire 1 "! rst $end
$var wire 1 "" D [15] $end
$var wire 1 #" D [14] $end
$var wire 1 $" D [13] $end
$var wire 1 %" D [12] $end
$var wire 1 &" D [11] $end
$var wire 1 '" D [10] $end
$var wire 1 (" D [9] $end
$var wire 1 )" D [8] $end
$var wire 1 *" D [7] $end
$var wire 1 +" D [6] $end
$var wire 1 ," D [5] $end
$var wire 1 -" D [4] $end
$var wire 1 ." D [3] $end
$var wire 1 /" D [2] $end
$var wire 1 0" D [1] $end
$var wire 1 1" D [0] $end
$var wire 1 4& WriteReg $end
$var wire 1 r% ReadEnable1 $end
$var wire 1 $& ReadEnable2 $end
$var wire 1 9& Bitline1 [15] $end
$var wire 1 :& Bitline1 [14] $end
$var wire 1 ;& Bitline1 [13] $end
$var wire 1 <& Bitline1 [12] $end
$var wire 1 =& Bitline1 [11] $end
$var wire 1 >& Bitline1 [10] $end
$var wire 1 ?& Bitline1 [9] $end
$var wire 1 @& Bitline1 [8] $end
$var wire 1 A& Bitline1 [7] $end
$var wire 1 B& Bitline1 [6] $end
$var wire 1 C& Bitline1 [5] $end
$var wire 1 D& Bitline1 [4] $end
$var wire 1 E& Bitline1 [3] $end
$var wire 1 F& Bitline1 [2] $end
$var wire 1 G& Bitline1 [1] $end
$var wire 1 H& Bitline1 [0] $end
$var wire 1 I& Bitline2 [15] $end
$var wire 1 J& Bitline2 [14] $end
$var wire 1 K& Bitline2 [13] $end
$var wire 1 L& Bitline2 [12] $end
$var wire 1 M& Bitline2 [11] $end
$var wire 1 N& Bitline2 [10] $end
$var wire 1 O& Bitline2 [9] $end
$var wire 1 P& Bitline2 [8] $end
$var wire 1 Q& Bitline2 [7] $end
$var wire 1 R& Bitline2 [6] $end
$var wire 1 S& Bitline2 [5] $end
$var wire 1 T& Bitline2 [4] $end
$var wire 1 U& Bitline2 [3] $end
$var wire 1 V& Bitline2 [2] $end
$var wire 1 W& Bitline2 [1] $end
$var wire 1 X& Bitline2 [0] $end

$scope module cells[15] $end
$var wire 1 !! clk $end
$var wire 1 "! rst $end
$var wire 1 "" D $end
$var wire 1 4& WriteEnable $end
$var wire 1 r% ReadEnable1 $end
$var wire 1 $& ReadEnable2 $end
$var wire 1 9& Bitline1 $end
$var wire 1 I& Bitline2 $end
$var wire 1 s+ Q $end

$scope module flop $end
$var wire 1 s+ q $end
$var wire 1 "" d $end
$var wire 1 4& wen $end
$var wire 1 !! clk $end
$var wire 1 "! rst $end
$var reg 1 t+ state $end
$upscope $end
$upscope $end

$scope module cells[14] $end
$var wire 1 !! clk $end
$var wire 1 "! rst $end
$var wire 1 #" D $end
$var wire 1 4& WriteEnable $end
$var wire 1 r% ReadEnable1 $end
$var wire 1 $& ReadEnable2 $end
$var wire 1 :& Bitline1 $end
$var wire 1 J& Bitline2 $end
$var wire 1 u+ Q $end

$scope module flop $end
$var wire 1 u+ q $end
$var wire 1 #" d $end
$var wire 1 4& wen $end
$var wire 1 !! clk $end
$var wire 1 "! rst $end
$var reg 1 v+ state $end
$upscope $end
$upscope $end

$scope module cells[13] $end
$var wire 1 !! clk $end
$var wire 1 "! rst $end
$var wire 1 $" D $end
$var wire 1 4& WriteEnable $end
$var wire 1 r% ReadEnable1 $end
$var wire 1 $& ReadEnable2 $end
$var wire 1 ;& Bitline1 $end
$var wire 1 K& Bitline2 $end
$var wire 1 w+ Q $end

$scope module flop $end
$var wire 1 w+ q $end
$var wire 1 $" d $end
$var wire 1 4& wen $end
$var wire 1 !! clk $end
$var wire 1 "! rst $end
$var reg 1 x+ state $end
$upscope $end
$upscope $end

$scope module cells[12] $end
$var wire 1 !! clk $end
$var wire 1 "! rst $end
$var wire 1 %" D $end
$var wire 1 4& WriteEnable $end
$var wire 1 r% ReadEnable1 $end
$var wire 1 $& ReadEnable2 $end
$var wire 1 <& Bitline1 $end
$var wire 1 L& Bitline2 $end
$var wire 1 y+ Q $end

$scope module flop $end
$var wire 1 y+ q $end
$var wire 1 %" d $end
$var wire 1 4& wen $end
$var wire 1 !! clk $end
$var wire 1 "! rst $end
$var reg 1 z+ state $end
$upscope $end
$upscope $end

$scope module cells[11] $end
$var wire 1 !! clk $end
$var wire 1 "! rst $end
$var wire 1 &" D $end
$var wire 1 4& WriteEnable $end
$var wire 1 r% ReadEnable1 $end
$var wire 1 $& ReadEnable2 $end
$var wire 1 =& Bitline1 $end
$var wire 1 M& Bitline2 $end
$var wire 1 {+ Q $end

$scope module flop $end
$var wire 1 {+ q $end
$var wire 1 &" d $end
$var wire 1 4& wen $end
$var wire 1 !! clk $end
$var wire 1 "! rst $end
$var reg 1 |+ state $end
$upscope $end
$upscope $end

$scope module cells[10] $end
$var wire 1 !! clk $end
$var wire 1 "! rst $end
$var wire 1 '" D $end
$var wire 1 4& WriteEnable $end
$var wire 1 r% ReadEnable1 $end
$var wire 1 $& ReadEnable2 $end
$var wire 1 >& Bitline1 $end
$var wire 1 N& Bitline2 $end
$var wire 1 }+ Q $end

$scope module flop $end
$var wire 1 }+ q $end
$var wire 1 '" d $end
$var wire 1 4& wen $end
$var wire 1 !! clk $end
$var wire 1 "! rst $end
$var reg 1 ~+ state $end
$upscope $end
$upscope $end

$scope module cells[9] $end
$var wire 1 !! clk $end
$var wire 1 "! rst $end
$var wire 1 (" D $end
$var wire 1 4& WriteEnable $end
$var wire 1 r% ReadEnable1 $end
$var wire 1 $& ReadEnable2 $end
$var wire 1 ?& Bitline1 $end
$var wire 1 O& Bitline2 $end
$var wire 1 !, Q $end

$scope module flop $end
$var wire 1 !, q $end
$var wire 1 (" d $end
$var wire 1 4& wen $end
$var wire 1 !! clk $end
$var wire 1 "! rst $end
$var reg 1 ", state $end
$upscope $end
$upscope $end

$scope module cells[8] $end
$var wire 1 !! clk $end
$var wire 1 "! rst $end
$var wire 1 )" D $end
$var wire 1 4& WriteEnable $end
$var wire 1 r% ReadEnable1 $end
$var wire 1 $& ReadEnable2 $end
$var wire 1 @& Bitline1 $end
$var wire 1 P& Bitline2 $end
$var wire 1 #, Q $end

$scope module flop $end
$var wire 1 #, q $end
$var wire 1 )" d $end
$var wire 1 4& wen $end
$var wire 1 !! clk $end
$var wire 1 "! rst $end
$var reg 1 $, state $end
$upscope $end
$upscope $end

$scope module cells[7] $end
$var wire 1 !! clk $end
$var wire 1 "! rst $end
$var wire 1 *" D $end
$var wire 1 4& WriteEnable $end
$var wire 1 r% ReadEnable1 $end
$var wire 1 $& ReadEnable2 $end
$var wire 1 A& Bitline1 $end
$var wire 1 Q& Bitline2 $end
$var wire 1 %, Q $end

$scope module flop $end
$var wire 1 %, q $end
$var wire 1 *" d $end
$var wire 1 4& wen $end
$var wire 1 !! clk $end
$var wire 1 "! rst $end
$var reg 1 &, state $end
$upscope $end
$upscope $end

$scope module cells[6] $end
$var wire 1 !! clk $end
$var wire 1 "! rst $end
$var wire 1 +" D $end
$var wire 1 4& WriteEnable $end
$var wire 1 r% ReadEnable1 $end
$var wire 1 $& ReadEnable2 $end
$var wire 1 B& Bitline1 $end
$var wire 1 R& Bitline2 $end
$var wire 1 ', Q $end

$scope module flop $end
$var wire 1 ', q $end
$var wire 1 +" d $end
$var wire 1 4& wen $end
$var wire 1 !! clk $end
$var wire 1 "! rst $end
$var reg 1 (, state $end
$upscope $end
$upscope $end

$scope module cells[5] $end
$var wire 1 !! clk $end
$var wire 1 "! rst $end
$var wire 1 ," D $end
$var wire 1 4& WriteEnable $end
$var wire 1 r% ReadEnable1 $end
$var wire 1 $& ReadEnable2 $end
$var wire 1 C& Bitline1 $end
$var wire 1 S& Bitline2 $end
$var wire 1 ), Q $end

$scope module flop $end
$var wire 1 ), q $end
$var wire 1 ," d $end
$var wire 1 4& wen $end
$var wire 1 !! clk $end
$var wire 1 "! rst $end
$var reg 1 *, state $end
$upscope $end
$upscope $end

$scope module cells[4] $end
$var wire 1 !! clk $end
$var wire 1 "! rst $end
$var wire 1 -" D $end
$var wire 1 4& WriteEnable $end
$var wire 1 r% ReadEnable1 $end
$var wire 1 $& ReadEnable2 $end
$var wire 1 D& Bitline1 $end
$var wire 1 T& Bitline2 $end
$var wire 1 +, Q $end

$scope module flop $end
$var wire 1 +, q $end
$var wire 1 -" d $end
$var wire 1 4& wen $end
$var wire 1 !! clk $end
$var wire 1 "! rst $end
$var reg 1 ,, state $end
$upscope $end
$upscope $end

$scope module cells[3] $end
$var wire 1 !! clk $end
$var wire 1 "! rst $end
$var wire 1 ." D $end
$var wire 1 4& WriteEnable $end
$var wire 1 r% ReadEnable1 $end
$var wire 1 $& ReadEnable2 $end
$var wire 1 E& Bitline1 $end
$var wire 1 U& Bitline2 $end
$var wire 1 -, Q $end

$scope module flop $end
$var wire 1 -, q $end
$var wire 1 ." d $end
$var wire 1 4& wen $end
$var wire 1 !! clk $end
$var wire 1 "! rst $end
$var reg 1 ., state $end
$upscope $end
$upscope $end

$scope module cells[2] $end
$var wire 1 !! clk $end
$var wire 1 "! rst $end
$var wire 1 /" D $end
$var wire 1 4& WriteEnable $end
$var wire 1 r% ReadEnable1 $end
$var wire 1 $& ReadEnable2 $end
$var wire 1 F& Bitline1 $end
$var wire 1 V& Bitline2 $end
$var wire 1 /, Q $end

$scope module flop $end
$var wire 1 /, q $end
$var wire 1 /" d $end
$var wire 1 4& wen $end
$var wire 1 !! clk $end
$var wire 1 "! rst $end
$var reg 1 0, state $end
$upscope $end
$upscope $end

$scope module cells[1] $end
$var wire 1 !! clk $end
$var wire 1 "! rst $end
$var wire 1 0" D $end
$var wire 1 4& WriteEnable $end
$var wire 1 r% ReadEnable1 $end
$var wire 1 $& ReadEnable2 $end
$var wire 1 G& Bitline1 $end
$var wire 1 W& Bitline2 $end
$var wire 1 1, Q $end

$scope module flop $end
$var wire 1 1, q $end
$var wire 1 0" d $end
$var wire 1 4& wen $end
$var wire 1 !! clk $end
$var wire 1 "! rst $end
$var reg 1 2, state $end
$upscope $end
$upscope $end

$scope module cells[0] $end
$var wire 1 !! clk $end
$var wire 1 "! rst $end
$var wire 1 1" D $end
$var wire 1 4& WriteEnable $end
$var wire 1 r% ReadEnable1 $end
$var wire 1 $& ReadEnable2 $end
$var wire 1 H& Bitline1 $end
$var wire 1 X& Bitline2 $end
$var wire 1 3, Q $end

$scope module flop $end
$var wire 1 3, q $end
$var wire 1 1" d $end
$var wire 1 4& wen $end
$var wire 1 !! clk $end
$var wire 1 "! rst $end
$var reg 1 4, state $end
$upscope $end
$upscope $end
$upscope $end

$scope module regs[3] $end
$var wire 1 !! clk $end
$var wire 1 "! rst $end
$var wire 1 "" D [15] $end
$var wire 1 #" D [14] $end
$var wire 1 $" D [13] $end
$var wire 1 %" D [12] $end
$var wire 1 &" D [11] $end
$var wire 1 '" D [10] $end
$var wire 1 (" D [9] $end
$var wire 1 )" D [8] $end
$var wire 1 *" D [7] $end
$var wire 1 +" D [6] $end
$var wire 1 ," D [5] $end
$var wire 1 -" D [4] $end
$var wire 1 ." D [3] $end
$var wire 1 /" D [2] $end
$var wire 1 0" D [1] $end
$var wire 1 1" D [0] $end
$var wire 1 5& WriteReg $end
$var wire 1 s% ReadEnable1 $end
$var wire 1 %& ReadEnable2 $end
$var wire 1 9& Bitline1 [15] $end
$var wire 1 :& Bitline1 [14] $end
$var wire 1 ;& Bitline1 [13] $end
$var wire 1 <& Bitline1 [12] $end
$var wire 1 =& Bitline1 [11] $end
$var wire 1 >& Bitline1 [10] $end
$var wire 1 ?& Bitline1 [9] $end
$var wire 1 @& Bitline1 [8] $end
$var wire 1 A& Bitline1 [7] $end
$var wire 1 B& Bitline1 [6] $end
$var wire 1 C& Bitline1 [5] $end
$var wire 1 D& Bitline1 [4] $end
$var wire 1 E& Bitline1 [3] $end
$var wire 1 F& Bitline1 [2] $end
$var wire 1 G& Bitline1 [1] $end
$var wire 1 H& Bitline1 [0] $end
$var wire 1 I& Bitline2 [15] $end
$var wire 1 J& Bitline2 [14] $end
$var wire 1 K& Bitline2 [13] $end
$var wire 1 L& Bitline2 [12] $end
$var wire 1 M& Bitline2 [11] $end
$var wire 1 N& Bitline2 [10] $end
$var wire 1 O& Bitline2 [9] $end
$var wire 1 P& Bitline2 [8] $end
$var wire 1 Q& Bitline2 [7] $end
$var wire 1 R& Bitline2 [6] $end
$var wire 1 S& Bitline2 [5] $end
$var wire 1 T& Bitline2 [4] $end
$var wire 1 U& Bitline2 [3] $end
$var wire 1 V& Bitline2 [2] $end
$var wire 1 W& Bitline2 [1] $end
$var wire 1 X& Bitline2 [0] $end

$scope module cells[15] $end
$var wire 1 !! clk $end
$var wire 1 "! rst $end
$var wire 1 "" D $end
$var wire 1 5& WriteEnable $end
$var wire 1 s% ReadEnable1 $end
$var wire 1 %& ReadEnable2 $end
$var wire 1 9& Bitline1 $end
$var wire 1 I& Bitline2 $end
$var wire 1 5, Q $end

$scope module flop $end
$var wire 1 5, q $end
$var wire 1 "" d $end
$var wire 1 5& wen $end
$var wire 1 !! clk $end
$var wire 1 "! rst $end
$var reg 1 6, state $end
$upscope $end
$upscope $end

$scope module cells[14] $end
$var wire 1 !! clk $end
$var wire 1 "! rst $end
$var wire 1 #" D $end
$var wire 1 5& WriteEnable $end
$var wire 1 s% ReadEnable1 $end
$var wire 1 %& ReadEnable2 $end
$var wire 1 :& Bitline1 $end
$var wire 1 J& Bitline2 $end
$var wire 1 7, Q $end

$scope module flop $end
$var wire 1 7, q $end
$var wire 1 #" d $end
$var wire 1 5& wen $end
$var wire 1 !! clk $end
$var wire 1 "! rst $end
$var reg 1 8, state $end
$upscope $end
$upscope $end

$scope module cells[13] $end
$var wire 1 !! clk $end
$var wire 1 "! rst $end
$var wire 1 $" D $end
$var wire 1 5& WriteEnable $end
$var wire 1 s% ReadEnable1 $end
$var wire 1 %& ReadEnable2 $end
$var wire 1 ;& Bitline1 $end
$var wire 1 K& Bitline2 $end
$var wire 1 9, Q $end

$scope module flop $end
$var wire 1 9, q $end
$var wire 1 $" d $end
$var wire 1 5& wen $end
$var wire 1 !! clk $end
$var wire 1 "! rst $end
$var reg 1 :, state $end
$upscope $end
$upscope $end

$scope module cells[12] $end
$var wire 1 !! clk $end
$var wire 1 "! rst $end
$var wire 1 %" D $end
$var wire 1 5& WriteEnable $end
$var wire 1 s% ReadEnable1 $end
$var wire 1 %& ReadEnable2 $end
$var wire 1 <& Bitline1 $end
$var wire 1 L& Bitline2 $end
$var wire 1 ;, Q $end

$scope module flop $end
$var wire 1 ;, q $end
$var wire 1 %" d $end
$var wire 1 5& wen $end
$var wire 1 !! clk $end
$var wire 1 "! rst $end
$var reg 1 <, state $end
$upscope $end
$upscope $end

$scope module cells[11] $end
$var wire 1 !! clk $end
$var wire 1 "! rst $end
$var wire 1 &" D $end
$var wire 1 5& WriteEnable $end
$var wire 1 s% ReadEnable1 $end
$var wire 1 %& ReadEnable2 $end
$var wire 1 =& Bitline1 $end
$var wire 1 M& Bitline2 $end
$var wire 1 =, Q $end

$scope module flop $end
$var wire 1 =, q $end
$var wire 1 &" d $end
$var wire 1 5& wen $end
$var wire 1 !! clk $end
$var wire 1 "! rst $end
$var reg 1 >, state $end
$upscope $end
$upscope $end

$scope module cells[10] $end
$var wire 1 !! clk $end
$var wire 1 "! rst $end
$var wire 1 '" D $end
$var wire 1 5& WriteEnable $end
$var wire 1 s% ReadEnable1 $end
$var wire 1 %& ReadEnable2 $end
$var wire 1 >& Bitline1 $end
$var wire 1 N& Bitline2 $end
$var wire 1 ?, Q $end

$scope module flop $end
$var wire 1 ?, q $end
$var wire 1 '" d $end
$var wire 1 5& wen $end
$var wire 1 !! clk $end
$var wire 1 "! rst $end
$var reg 1 @, state $end
$upscope $end
$upscope $end

$scope module cells[9] $end
$var wire 1 !! clk $end
$var wire 1 "! rst $end
$var wire 1 (" D $end
$var wire 1 5& WriteEnable $end
$var wire 1 s% ReadEnable1 $end
$var wire 1 %& ReadEnable2 $end
$var wire 1 ?& Bitline1 $end
$var wire 1 O& Bitline2 $end
$var wire 1 A, Q $end

$scope module flop $end
$var wire 1 A, q $end
$var wire 1 (" d $end
$var wire 1 5& wen $end
$var wire 1 !! clk $end
$var wire 1 "! rst $end
$var reg 1 B, state $end
$upscope $end
$upscope $end

$scope module cells[8] $end
$var wire 1 !! clk $end
$var wire 1 "! rst $end
$var wire 1 )" D $end
$var wire 1 5& WriteEnable $end
$var wire 1 s% ReadEnable1 $end
$var wire 1 %& ReadEnable2 $end
$var wire 1 @& Bitline1 $end
$var wire 1 P& Bitline2 $end
$var wire 1 C, Q $end

$scope module flop $end
$var wire 1 C, q $end
$var wire 1 )" d $end
$var wire 1 5& wen $end
$var wire 1 !! clk $end
$var wire 1 "! rst $end
$var reg 1 D, state $end
$upscope $end
$upscope $end

$scope module cells[7] $end
$var wire 1 !! clk $end
$var wire 1 "! rst $end
$var wire 1 *" D $end
$var wire 1 5& WriteEnable $end
$var wire 1 s% ReadEnable1 $end
$var wire 1 %& ReadEnable2 $end
$var wire 1 A& Bitline1 $end
$var wire 1 Q& Bitline2 $end
$var wire 1 E, Q $end

$scope module flop $end
$var wire 1 E, q $end
$var wire 1 *" d $end
$var wire 1 5& wen $end
$var wire 1 !! clk $end
$var wire 1 "! rst $end
$var reg 1 F, state $end
$upscope $end
$upscope $end

$scope module cells[6] $end
$var wire 1 !! clk $end
$var wire 1 "! rst $end
$var wire 1 +" D $end
$var wire 1 5& WriteEnable $end
$var wire 1 s% ReadEnable1 $end
$var wire 1 %& ReadEnable2 $end
$var wire 1 B& Bitline1 $end
$var wire 1 R& Bitline2 $end
$var wire 1 G, Q $end

$scope module flop $end
$var wire 1 G, q $end
$var wire 1 +" d $end
$var wire 1 5& wen $end
$var wire 1 !! clk $end
$var wire 1 "! rst $end
$var reg 1 H, state $end
$upscope $end
$upscope $end

$scope module cells[5] $end
$var wire 1 !! clk $end
$var wire 1 "! rst $end
$var wire 1 ," D $end
$var wire 1 5& WriteEnable $end
$var wire 1 s% ReadEnable1 $end
$var wire 1 %& ReadEnable2 $end
$var wire 1 C& Bitline1 $end
$var wire 1 S& Bitline2 $end
$var wire 1 I, Q $end

$scope module flop $end
$var wire 1 I, q $end
$var wire 1 ," d $end
$var wire 1 5& wen $end
$var wire 1 !! clk $end
$var wire 1 "! rst $end
$var reg 1 J, state $end
$upscope $end
$upscope $end

$scope module cells[4] $end
$var wire 1 !! clk $end
$var wire 1 "! rst $end
$var wire 1 -" D $end
$var wire 1 5& WriteEnable $end
$var wire 1 s% ReadEnable1 $end
$var wire 1 %& ReadEnable2 $end
$var wire 1 D& Bitline1 $end
$var wire 1 T& Bitline2 $end
$var wire 1 K, Q $end

$scope module flop $end
$var wire 1 K, q $end
$var wire 1 -" d $end
$var wire 1 5& wen $end
$var wire 1 !! clk $end
$var wire 1 "! rst $end
$var reg 1 L, state $end
$upscope $end
$upscope $end

$scope module cells[3] $end
$var wire 1 !! clk $end
$var wire 1 "! rst $end
$var wire 1 ." D $end
$var wire 1 5& WriteEnable $end
$var wire 1 s% ReadEnable1 $end
$var wire 1 %& ReadEnable2 $end
$var wire 1 E& Bitline1 $end
$var wire 1 U& Bitline2 $end
$var wire 1 M, Q $end

$scope module flop $end
$var wire 1 M, q $end
$var wire 1 ." d $end
$var wire 1 5& wen $end
$var wire 1 !! clk $end
$var wire 1 "! rst $end
$var reg 1 N, state $end
$upscope $end
$upscope $end

$scope module cells[2] $end
$var wire 1 !! clk $end
$var wire 1 "! rst $end
$var wire 1 /" D $end
$var wire 1 5& WriteEnable $end
$var wire 1 s% ReadEnable1 $end
$var wire 1 %& ReadEnable2 $end
$var wire 1 F& Bitline1 $end
$var wire 1 V& Bitline2 $end
$var wire 1 O, Q $end

$scope module flop $end
$var wire 1 O, q $end
$var wire 1 /" d $end
$var wire 1 5& wen $end
$var wire 1 !! clk $end
$var wire 1 "! rst $end
$var reg 1 P, state $end
$upscope $end
$upscope $end

$scope module cells[1] $end
$var wire 1 !! clk $end
$var wire 1 "! rst $end
$var wire 1 0" D $end
$var wire 1 5& WriteEnable $end
$var wire 1 s% ReadEnable1 $end
$var wire 1 %& ReadEnable2 $end
$var wire 1 G& Bitline1 $end
$var wire 1 W& Bitline2 $end
$var wire 1 Q, Q $end

$scope module flop $end
$var wire 1 Q, q $end
$var wire 1 0" d $end
$var wire 1 5& wen $end
$var wire 1 !! clk $end
$var wire 1 "! rst $end
$var reg 1 R, state $end
$upscope $end
$upscope $end

$scope module cells[0] $end
$var wire 1 !! clk $end
$var wire 1 "! rst $end
$var wire 1 1" D $end
$var wire 1 5& WriteEnable $end
$var wire 1 s% ReadEnable1 $end
$var wire 1 %& ReadEnable2 $end
$var wire 1 H& Bitline1 $end
$var wire 1 X& Bitline2 $end
$var wire 1 S, Q $end

$scope module flop $end
$var wire 1 S, q $end
$var wire 1 1" d $end
$var wire 1 5& wen $end
$var wire 1 !! clk $end
$var wire 1 "! rst $end
$var reg 1 T, state $end
$upscope $end
$upscope $end
$upscope $end

$scope module regs[2] $end
$var wire 1 !! clk $end
$var wire 1 "! rst $end
$var wire 1 "" D [15] $end
$var wire 1 #" D [14] $end
$var wire 1 $" D [13] $end
$var wire 1 %" D [12] $end
$var wire 1 &" D [11] $end
$var wire 1 '" D [10] $end
$var wire 1 (" D [9] $end
$var wire 1 )" D [8] $end
$var wire 1 *" D [7] $end
$var wire 1 +" D [6] $end
$var wire 1 ," D [5] $end
$var wire 1 -" D [4] $end
$var wire 1 ." D [3] $end
$var wire 1 /" D [2] $end
$var wire 1 0" D [1] $end
$var wire 1 1" D [0] $end
$var wire 1 6& WriteReg $end
$var wire 1 t% ReadEnable1 $end
$var wire 1 && ReadEnable2 $end
$var wire 1 9& Bitline1 [15] $end
$var wire 1 :& Bitline1 [14] $end
$var wire 1 ;& Bitline1 [13] $end
$var wire 1 <& Bitline1 [12] $end
$var wire 1 =& Bitline1 [11] $end
$var wire 1 >& Bitline1 [10] $end
$var wire 1 ?& Bitline1 [9] $end
$var wire 1 @& Bitline1 [8] $end
$var wire 1 A& Bitline1 [7] $end
$var wire 1 B& Bitline1 [6] $end
$var wire 1 C& Bitline1 [5] $end
$var wire 1 D& Bitline1 [4] $end
$var wire 1 E& Bitline1 [3] $end
$var wire 1 F& Bitline1 [2] $end
$var wire 1 G& Bitline1 [1] $end
$var wire 1 H& Bitline1 [0] $end
$var wire 1 I& Bitline2 [15] $end
$var wire 1 J& Bitline2 [14] $end
$var wire 1 K& Bitline2 [13] $end
$var wire 1 L& Bitline2 [12] $end
$var wire 1 M& Bitline2 [11] $end
$var wire 1 N& Bitline2 [10] $end
$var wire 1 O& Bitline2 [9] $end
$var wire 1 P& Bitline2 [8] $end
$var wire 1 Q& Bitline2 [7] $end
$var wire 1 R& Bitline2 [6] $end
$var wire 1 S& Bitline2 [5] $end
$var wire 1 T& Bitline2 [4] $end
$var wire 1 U& Bitline2 [3] $end
$var wire 1 V& Bitline2 [2] $end
$var wire 1 W& Bitline2 [1] $end
$var wire 1 X& Bitline2 [0] $end

$scope module cells[15] $end
$var wire 1 !! clk $end
$var wire 1 "! rst $end
$var wire 1 "" D $end
$var wire 1 6& WriteEnable $end
$var wire 1 t% ReadEnable1 $end
$var wire 1 && ReadEnable2 $end
$var wire 1 9& Bitline1 $end
$var wire 1 I& Bitline2 $end
$var wire 1 U, Q $end

$scope module flop $end
$var wire 1 U, q $end
$var wire 1 "" d $end
$var wire 1 6& wen $end
$var wire 1 !! clk $end
$var wire 1 "! rst $end
$var reg 1 V, state $end
$upscope $end
$upscope $end

$scope module cells[14] $end
$var wire 1 !! clk $end
$var wire 1 "! rst $end
$var wire 1 #" D $end
$var wire 1 6& WriteEnable $end
$var wire 1 t% ReadEnable1 $end
$var wire 1 && ReadEnable2 $end
$var wire 1 :& Bitline1 $end
$var wire 1 J& Bitline2 $end
$var wire 1 W, Q $end

$scope module flop $end
$var wire 1 W, q $end
$var wire 1 #" d $end
$var wire 1 6& wen $end
$var wire 1 !! clk $end
$var wire 1 "! rst $end
$var reg 1 X, state $end
$upscope $end
$upscope $end

$scope module cells[13] $end
$var wire 1 !! clk $end
$var wire 1 "! rst $end
$var wire 1 $" D $end
$var wire 1 6& WriteEnable $end
$var wire 1 t% ReadEnable1 $end
$var wire 1 && ReadEnable2 $end
$var wire 1 ;& Bitline1 $end
$var wire 1 K& Bitline2 $end
$var wire 1 Y, Q $end

$scope module flop $end
$var wire 1 Y, q $end
$var wire 1 $" d $end
$var wire 1 6& wen $end
$var wire 1 !! clk $end
$var wire 1 "! rst $end
$var reg 1 Z, state $end
$upscope $end
$upscope $end

$scope module cells[12] $end
$var wire 1 !! clk $end
$var wire 1 "! rst $end
$var wire 1 %" D $end
$var wire 1 6& WriteEnable $end
$var wire 1 t% ReadEnable1 $end
$var wire 1 && ReadEnable2 $end
$var wire 1 <& Bitline1 $end
$var wire 1 L& Bitline2 $end
$var wire 1 [, Q $end

$scope module flop $end
$var wire 1 [, q $end
$var wire 1 %" d $end
$var wire 1 6& wen $end
$var wire 1 !! clk $end
$var wire 1 "! rst $end
$var reg 1 \, state $end
$upscope $end
$upscope $end

$scope module cells[11] $end
$var wire 1 !! clk $end
$var wire 1 "! rst $end
$var wire 1 &" D $end
$var wire 1 6& WriteEnable $end
$var wire 1 t% ReadEnable1 $end
$var wire 1 && ReadEnable2 $end
$var wire 1 =& Bitline1 $end
$var wire 1 M& Bitline2 $end
$var wire 1 ], Q $end

$scope module flop $end
$var wire 1 ], q $end
$var wire 1 &" d $end
$var wire 1 6& wen $end
$var wire 1 !! clk $end
$var wire 1 "! rst $end
$var reg 1 ^, state $end
$upscope $end
$upscope $end

$scope module cells[10] $end
$var wire 1 !! clk $end
$var wire 1 "! rst $end
$var wire 1 '" D $end
$var wire 1 6& WriteEnable $end
$var wire 1 t% ReadEnable1 $end
$var wire 1 && ReadEnable2 $end
$var wire 1 >& Bitline1 $end
$var wire 1 N& Bitline2 $end
$var wire 1 _, Q $end

$scope module flop $end
$var wire 1 _, q $end
$var wire 1 '" d $end
$var wire 1 6& wen $end
$var wire 1 !! clk $end
$var wire 1 "! rst $end
$var reg 1 `, state $end
$upscope $end
$upscope $end

$scope module cells[9] $end
$var wire 1 !! clk $end
$var wire 1 "! rst $end
$var wire 1 (" D $end
$var wire 1 6& WriteEnable $end
$var wire 1 t% ReadEnable1 $end
$var wire 1 && ReadEnable2 $end
$var wire 1 ?& Bitline1 $end
$var wire 1 O& Bitline2 $end
$var wire 1 a, Q $end

$scope module flop $end
$var wire 1 a, q $end
$var wire 1 (" d $end
$var wire 1 6& wen $end
$var wire 1 !! clk $end
$var wire 1 "! rst $end
$var reg 1 b, state $end
$upscope $end
$upscope $end

$scope module cells[8] $end
$var wire 1 !! clk $end
$var wire 1 "! rst $end
$var wire 1 )" D $end
$var wire 1 6& WriteEnable $end
$var wire 1 t% ReadEnable1 $end
$var wire 1 && ReadEnable2 $end
$var wire 1 @& Bitline1 $end
$var wire 1 P& Bitline2 $end
$var wire 1 c, Q $end

$scope module flop $end
$var wire 1 c, q $end
$var wire 1 )" d $end
$var wire 1 6& wen $end
$var wire 1 !! clk $end
$var wire 1 "! rst $end
$var reg 1 d, state $end
$upscope $end
$upscope $end

$scope module cells[7] $end
$var wire 1 !! clk $end
$var wire 1 "! rst $end
$var wire 1 *" D $end
$var wire 1 6& WriteEnable $end
$var wire 1 t% ReadEnable1 $end
$var wire 1 && ReadEnable2 $end
$var wire 1 A& Bitline1 $end
$var wire 1 Q& Bitline2 $end
$var wire 1 e, Q $end

$scope module flop $end
$var wire 1 e, q $end
$var wire 1 *" d $end
$var wire 1 6& wen $end
$var wire 1 !! clk $end
$var wire 1 "! rst $end
$var reg 1 f, state $end
$upscope $end
$upscope $end

$scope module cells[6] $end
$var wire 1 !! clk $end
$var wire 1 "! rst $end
$var wire 1 +" D $end
$var wire 1 6& WriteEnable $end
$var wire 1 t% ReadEnable1 $end
$var wire 1 && ReadEnable2 $end
$var wire 1 B& Bitline1 $end
$var wire 1 R& Bitline2 $end
$var wire 1 g, Q $end

$scope module flop $end
$var wire 1 g, q $end
$var wire 1 +" d $end
$var wire 1 6& wen $end
$var wire 1 !! clk $end
$var wire 1 "! rst $end
$var reg 1 h, state $end
$upscope $end
$upscope $end

$scope module cells[5] $end
$var wire 1 !! clk $end
$var wire 1 "! rst $end
$var wire 1 ," D $end
$var wire 1 6& WriteEnable $end
$var wire 1 t% ReadEnable1 $end
$var wire 1 && ReadEnable2 $end
$var wire 1 C& Bitline1 $end
$var wire 1 S& Bitline2 $end
$var wire 1 i, Q $end

$scope module flop $end
$var wire 1 i, q $end
$var wire 1 ," d $end
$var wire 1 6& wen $end
$var wire 1 !! clk $end
$var wire 1 "! rst $end
$var reg 1 j, state $end
$upscope $end
$upscope $end

$scope module cells[4] $end
$var wire 1 !! clk $end
$var wire 1 "! rst $end
$var wire 1 -" D $end
$var wire 1 6& WriteEnable $end
$var wire 1 t% ReadEnable1 $end
$var wire 1 && ReadEnable2 $end
$var wire 1 D& Bitline1 $end
$var wire 1 T& Bitline2 $end
$var wire 1 k, Q $end

$scope module flop $end
$var wire 1 k, q $end
$var wire 1 -" d $end
$var wire 1 6& wen $end
$var wire 1 !! clk $end
$var wire 1 "! rst $end
$var reg 1 l, state $end
$upscope $end
$upscope $end

$scope module cells[3] $end
$var wire 1 !! clk $end
$var wire 1 "! rst $end
$var wire 1 ." D $end
$var wire 1 6& WriteEnable $end
$var wire 1 t% ReadEnable1 $end
$var wire 1 && ReadEnable2 $end
$var wire 1 E& Bitline1 $end
$var wire 1 U& Bitline2 $end
$var wire 1 m, Q $end

$scope module flop $end
$var wire 1 m, q $end
$var wire 1 ." d $end
$var wire 1 6& wen $end
$var wire 1 !! clk $end
$var wire 1 "! rst $end
$var reg 1 n, state $end
$upscope $end
$upscope $end

$scope module cells[2] $end
$var wire 1 !! clk $end
$var wire 1 "! rst $end
$var wire 1 /" D $end
$var wire 1 6& WriteEnable $end
$var wire 1 t% ReadEnable1 $end
$var wire 1 && ReadEnable2 $end
$var wire 1 F& Bitline1 $end
$var wire 1 V& Bitline2 $end
$var wire 1 o, Q $end

$scope module flop $end
$var wire 1 o, q $end
$var wire 1 /" d $end
$var wire 1 6& wen $end
$var wire 1 !! clk $end
$var wire 1 "! rst $end
$var reg 1 p, state $end
$upscope $end
$upscope $end

$scope module cells[1] $end
$var wire 1 !! clk $end
$var wire 1 "! rst $end
$var wire 1 0" D $end
$var wire 1 6& WriteEnable $end
$var wire 1 t% ReadEnable1 $end
$var wire 1 && ReadEnable2 $end
$var wire 1 G& Bitline1 $end
$var wire 1 W& Bitline2 $end
$var wire 1 q, Q $end

$scope module flop $end
$var wire 1 q, q $end
$var wire 1 0" d $end
$var wire 1 6& wen $end
$var wire 1 !! clk $end
$var wire 1 "! rst $end
$var reg 1 r, state $end
$upscope $end
$upscope $end

$scope module cells[0] $end
$var wire 1 !! clk $end
$var wire 1 "! rst $end
$var wire 1 1" D $end
$var wire 1 6& WriteEnable $end
$var wire 1 t% ReadEnable1 $end
$var wire 1 && ReadEnable2 $end
$var wire 1 H& Bitline1 $end
$var wire 1 X& Bitline2 $end
$var wire 1 s, Q $end

$scope module flop $end
$var wire 1 s, q $end
$var wire 1 1" d $end
$var wire 1 6& wen $end
$var wire 1 !! clk $end
$var wire 1 "! rst $end
$var reg 1 t, state $end
$upscope $end
$upscope $end
$upscope $end

$scope module regs[1] $end
$var wire 1 !! clk $end
$var wire 1 "! rst $end
$var wire 1 "" D [15] $end
$var wire 1 #" D [14] $end
$var wire 1 $" D [13] $end
$var wire 1 %" D [12] $end
$var wire 1 &" D [11] $end
$var wire 1 '" D [10] $end
$var wire 1 (" D [9] $end
$var wire 1 )" D [8] $end
$var wire 1 *" D [7] $end
$var wire 1 +" D [6] $end
$var wire 1 ," D [5] $end
$var wire 1 -" D [4] $end
$var wire 1 ." D [3] $end
$var wire 1 /" D [2] $end
$var wire 1 0" D [1] $end
$var wire 1 1" D [0] $end
$var wire 1 7& WriteReg $end
$var wire 1 u% ReadEnable1 $end
$var wire 1 '& ReadEnable2 $end
$var wire 1 9& Bitline1 [15] $end
$var wire 1 :& Bitline1 [14] $end
$var wire 1 ;& Bitline1 [13] $end
$var wire 1 <& Bitline1 [12] $end
$var wire 1 =& Bitline1 [11] $end
$var wire 1 >& Bitline1 [10] $end
$var wire 1 ?& Bitline1 [9] $end
$var wire 1 @& Bitline1 [8] $end
$var wire 1 A& Bitline1 [7] $end
$var wire 1 B& Bitline1 [6] $end
$var wire 1 C& Bitline1 [5] $end
$var wire 1 D& Bitline1 [4] $end
$var wire 1 E& Bitline1 [3] $end
$var wire 1 F& Bitline1 [2] $end
$var wire 1 G& Bitline1 [1] $end
$var wire 1 H& Bitline1 [0] $end
$var wire 1 I& Bitline2 [15] $end
$var wire 1 J& Bitline2 [14] $end
$var wire 1 K& Bitline2 [13] $end
$var wire 1 L& Bitline2 [12] $end
$var wire 1 M& Bitline2 [11] $end
$var wire 1 N& Bitline2 [10] $end
$var wire 1 O& Bitline2 [9] $end
$var wire 1 P& Bitline2 [8] $end
$var wire 1 Q& Bitline2 [7] $end
$var wire 1 R& Bitline2 [6] $end
$var wire 1 S& Bitline2 [5] $end
$var wire 1 T& Bitline2 [4] $end
$var wire 1 U& Bitline2 [3] $end
$var wire 1 V& Bitline2 [2] $end
$var wire 1 W& Bitline2 [1] $end
$var wire 1 X& Bitline2 [0] $end

$scope module cells[15] $end
$var wire 1 !! clk $end
$var wire 1 "! rst $end
$var wire 1 "" D $end
$var wire 1 7& WriteEnable $end
$var wire 1 u% ReadEnable1 $end
$var wire 1 '& ReadEnable2 $end
$var wire 1 9& Bitline1 $end
$var wire 1 I& Bitline2 $end
$var wire 1 u, Q $end

$scope module flop $end
$var wire 1 u, q $end
$var wire 1 "" d $end
$var wire 1 7& wen $end
$var wire 1 !! clk $end
$var wire 1 "! rst $end
$var reg 1 v, state $end
$upscope $end
$upscope $end

$scope module cells[14] $end
$var wire 1 !! clk $end
$var wire 1 "! rst $end
$var wire 1 #" D $end
$var wire 1 7& WriteEnable $end
$var wire 1 u% ReadEnable1 $end
$var wire 1 '& ReadEnable2 $end
$var wire 1 :& Bitline1 $end
$var wire 1 J& Bitline2 $end
$var wire 1 w, Q $end

$scope module flop $end
$var wire 1 w, q $end
$var wire 1 #" d $end
$var wire 1 7& wen $end
$var wire 1 !! clk $end
$var wire 1 "! rst $end
$var reg 1 x, state $end
$upscope $end
$upscope $end

$scope module cells[13] $end
$var wire 1 !! clk $end
$var wire 1 "! rst $end
$var wire 1 $" D $end
$var wire 1 7& WriteEnable $end
$var wire 1 u% ReadEnable1 $end
$var wire 1 '& ReadEnable2 $end
$var wire 1 ;& Bitline1 $end
$var wire 1 K& Bitline2 $end
$var wire 1 y, Q $end

$scope module flop $end
$var wire 1 y, q $end
$var wire 1 $" d $end
$var wire 1 7& wen $end
$var wire 1 !! clk $end
$var wire 1 "! rst $end
$var reg 1 z, state $end
$upscope $end
$upscope $end

$scope module cells[12] $end
$var wire 1 !! clk $end
$var wire 1 "! rst $end
$var wire 1 %" D $end
$var wire 1 7& WriteEnable $end
$var wire 1 u% ReadEnable1 $end
$var wire 1 '& ReadEnable2 $end
$var wire 1 <& Bitline1 $end
$var wire 1 L& Bitline2 $end
$var wire 1 {, Q $end

$scope module flop $end
$var wire 1 {, q $end
$var wire 1 %" d $end
$var wire 1 7& wen $end
$var wire 1 !! clk $end
$var wire 1 "! rst $end
$var reg 1 |, state $end
$upscope $end
$upscope $end

$scope module cells[11] $end
$var wire 1 !! clk $end
$var wire 1 "! rst $end
$var wire 1 &" D $end
$var wire 1 7& WriteEnable $end
$var wire 1 u% ReadEnable1 $end
$var wire 1 '& ReadEnable2 $end
$var wire 1 =& Bitline1 $end
$var wire 1 M& Bitline2 $end
$var wire 1 }, Q $end

$scope module flop $end
$var wire 1 }, q $end
$var wire 1 &" d $end
$var wire 1 7& wen $end
$var wire 1 !! clk $end
$var wire 1 "! rst $end
$var reg 1 ~, state $end
$upscope $end
$upscope $end

$scope module cells[10] $end
$var wire 1 !! clk $end
$var wire 1 "! rst $end
$var wire 1 '" D $end
$var wire 1 7& WriteEnable $end
$var wire 1 u% ReadEnable1 $end
$var wire 1 '& ReadEnable2 $end
$var wire 1 >& Bitline1 $end
$var wire 1 N& Bitline2 $end
$var wire 1 !- Q $end

$scope module flop $end
$var wire 1 !- q $end
$var wire 1 '" d $end
$var wire 1 7& wen $end
$var wire 1 !! clk $end
$var wire 1 "! rst $end
$var reg 1 "- state $end
$upscope $end
$upscope $end

$scope module cells[9] $end
$var wire 1 !! clk $end
$var wire 1 "! rst $end
$var wire 1 (" D $end
$var wire 1 7& WriteEnable $end
$var wire 1 u% ReadEnable1 $end
$var wire 1 '& ReadEnable2 $end
$var wire 1 ?& Bitline1 $end
$var wire 1 O& Bitline2 $end
$var wire 1 #- Q $end

$scope module flop $end
$var wire 1 #- q $end
$var wire 1 (" d $end
$var wire 1 7& wen $end
$var wire 1 !! clk $end
$var wire 1 "! rst $end
$var reg 1 $- state $end
$upscope $end
$upscope $end

$scope module cells[8] $end
$var wire 1 !! clk $end
$var wire 1 "! rst $end
$var wire 1 )" D $end
$var wire 1 7& WriteEnable $end
$var wire 1 u% ReadEnable1 $end
$var wire 1 '& ReadEnable2 $end
$var wire 1 @& Bitline1 $end
$var wire 1 P& Bitline2 $end
$var wire 1 %- Q $end

$scope module flop $end
$var wire 1 %- q $end
$var wire 1 )" d $end
$var wire 1 7& wen $end
$var wire 1 !! clk $end
$var wire 1 "! rst $end
$var reg 1 &- state $end
$upscope $end
$upscope $end

$scope module cells[7] $end
$var wire 1 !! clk $end
$var wire 1 "! rst $end
$var wire 1 *" D $end
$var wire 1 7& WriteEnable $end
$var wire 1 u% ReadEnable1 $end
$var wire 1 '& ReadEnable2 $end
$var wire 1 A& Bitline1 $end
$var wire 1 Q& Bitline2 $end
$var wire 1 '- Q $end

$scope module flop $end
$var wire 1 '- q $end
$var wire 1 *" d $end
$var wire 1 7& wen $end
$var wire 1 !! clk $end
$var wire 1 "! rst $end
$var reg 1 (- state $end
$upscope $end
$upscope $end

$scope module cells[6] $end
$var wire 1 !! clk $end
$var wire 1 "! rst $end
$var wire 1 +" D $end
$var wire 1 7& WriteEnable $end
$var wire 1 u% ReadEnable1 $end
$var wire 1 '& ReadEnable2 $end
$var wire 1 B& Bitline1 $end
$var wire 1 R& Bitline2 $end
$var wire 1 )- Q $end

$scope module flop $end
$var wire 1 )- q $end
$var wire 1 +" d $end
$var wire 1 7& wen $end
$var wire 1 !! clk $end
$var wire 1 "! rst $end
$var reg 1 *- state $end
$upscope $end
$upscope $end

$scope module cells[5] $end
$var wire 1 !! clk $end
$var wire 1 "! rst $end
$var wire 1 ," D $end
$var wire 1 7& WriteEnable $end
$var wire 1 u% ReadEnable1 $end
$var wire 1 '& ReadEnable2 $end
$var wire 1 C& Bitline1 $end
$var wire 1 S& Bitline2 $end
$var wire 1 +- Q $end

$scope module flop $end
$var wire 1 +- q $end
$var wire 1 ," d $end
$var wire 1 7& wen $end
$var wire 1 !! clk $end
$var wire 1 "! rst $end
$var reg 1 ,- state $end
$upscope $end
$upscope $end

$scope module cells[4] $end
$var wire 1 !! clk $end
$var wire 1 "! rst $end
$var wire 1 -" D $end
$var wire 1 7& WriteEnable $end
$var wire 1 u% ReadEnable1 $end
$var wire 1 '& ReadEnable2 $end
$var wire 1 D& Bitline1 $end
$var wire 1 T& Bitline2 $end
$var wire 1 -- Q $end

$scope module flop $end
$var wire 1 -- q $end
$var wire 1 -" d $end
$var wire 1 7& wen $end
$var wire 1 !! clk $end
$var wire 1 "! rst $end
$var reg 1 .- state $end
$upscope $end
$upscope $end

$scope module cells[3] $end
$var wire 1 !! clk $end
$var wire 1 "! rst $end
$var wire 1 ." D $end
$var wire 1 7& WriteEnable $end
$var wire 1 u% ReadEnable1 $end
$var wire 1 '& ReadEnable2 $end
$var wire 1 E& Bitline1 $end
$var wire 1 U& Bitline2 $end
$var wire 1 /- Q $end

$scope module flop $end
$var wire 1 /- q $end
$var wire 1 ." d $end
$var wire 1 7& wen $end
$var wire 1 !! clk $end
$var wire 1 "! rst $end
$var reg 1 0- state $end
$upscope $end
$upscope $end

$scope module cells[2] $end
$var wire 1 !! clk $end
$var wire 1 "! rst $end
$var wire 1 /" D $end
$var wire 1 7& WriteEnable $end
$var wire 1 u% ReadEnable1 $end
$var wire 1 '& ReadEnable2 $end
$var wire 1 F& Bitline1 $end
$var wire 1 V& Bitline2 $end
$var wire 1 1- Q $end

$scope module flop $end
$var wire 1 1- q $end
$var wire 1 /" d $end
$var wire 1 7& wen $end
$var wire 1 !! clk $end
$var wire 1 "! rst $end
$var reg 1 2- state $end
$upscope $end
$upscope $end

$scope module cells[1] $end
$var wire 1 !! clk $end
$var wire 1 "! rst $end
$var wire 1 0" D $end
$var wire 1 7& WriteEnable $end
$var wire 1 u% ReadEnable1 $end
$var wire 1 '& ReadEnable2 $end
$var wire 1 G& Bitline1 $end
$var wire 1 W& Bitline2 $end
$var wire 1 3- Q $end

$scope module flop $end
$var wire 1 3- q $end
$var wire 1 0" d $end
$var wire 1 7& wen $end
$var wire 1 !! clk $end
$var wire 1 "! rst $end
$var reg 1 4- state $end
$upscope $end
$upscope $end

$scope module cells[0] $end
$var wire 1 !! clk $end
$var wire 1 "! rst $end
$var wire 1 1" D $end
$var wire 1 7& WriteEnable $end
$var wire 1 u% ReadEnable1 $end
$var wire 1 '& ReadEnable2 $end
$var wire 1 H& Bitline1 $end
$var wire 1 X& Bitline2 $end
$var wire 1 5- Q $end

$scope module flop $end
$var wire 1 5- q $end
$var wire 1 1" d $end
$var wire 1 7& wen $end
$var wire 1 !! clk $end
$var wire 1 "! rst $end
$var reg 1 6- state $end
$upscope $end
$upscope $end
$upscope $end

$scope module regs[0] $end
$var wire 1 !! clk $end
$var wire 1 "! rst $end
$var wire 1 "" D [15] $end
$var wire 1 #" D [14] $end
$var wire 1 $" D [13] $end
$var wire 1 %" D [12] $end
$var wire 1 &" D [11] $end
$var wire 1 '" D [10] $end
$var wire 1 (" D [9] $end
$var wire 1 )" D [8] $end
$var wire 1 *" D [7] $end
$var wire 1 +" D [6] $end
$var wire 1 ," D [5] $end
$var wire 1 -" D [4] $end
$var wire 1 ." D [3] $end
$var wire 1 /" D [2] $end
$var wire 1 0" D [1] $end
$var wire 1 1" D [0] $end
$var wire 1 8& WriteReg $end
$var wire 1 v% ReadEnable1 $end
$var wire 1 (& ReadEnable2 $end
$var wire 1 9& Bitline1 [15] $end
$var wire 1 :& Bitline1 [14] $end
$var wire 1 ;& Bitline1 [13] $end
$var wire 1 <& Bitline1 [12] $end
$var wire 1 =& Bitline1 [11] $end
$var wire 1 >& Bitline1 [10] $end
$var wire 1 ?& Bitline1 [9] $end
$var wire 1 @& Bitline1 [8] $end
$var wire 1 A& Bitline1 [7] $end
$var wire 1 B& Bitline1 [6] $end
$var wire 1 C& Bitline1 [5] $end
$var wire 1 D& Bitline1 [4] $end
$var wire 1 E& Bitline1 [3] $end
$var wire 1 F& Bitline1 [2] $end
$var wire 1 G& Bitline1 [1] $end
$var wire 1 H& Bitline1 [0] $end
$var wire 1 I& Bitline2 [15] $end
$var wire 1 J& Bitline2 [14] $end
$var wire 1 K& Bitline2 [13] $end
$var wire 1 L& Bitline2 [12] $end
$var wire 1 M& Bitline2 [11] $end
$var wire 1 N& Bitline2 [10] $end
$var wire 1 O& Bitline2 [9] $end
$var wire 1 P& Bitline2 [8] $end
$var wire 1 Q& Bitline2 [7] $end
$var wire 1 R& Bitline2 [6] $end
$var wire 1 S& Bitline2 [5] $end
$var wire 1 T& Bitline2 [4] $end
$var wire 1 U& Bitline2 [3] $end
$var wire 1 V& Bitline2 [2] $end
$var wire 1 W& Bitline2 [1] $end
$var wire 1 X& Bitline2 [0] $end

$scope module cells[15] $end
$var wire 1 !! clk $end
$var wire 1 "! rst $end
$var wire 1 "" D $end
$var wire 1 8& WriteEnable $end
$var wire 1 v% ReadEnable1 $end
$var wire 1 (& ReadEnable2 $end
$var wire 1 9& Bitline1 $end
$var wire 1 I& Bitline2 $end
$var wire 1 7- Q $end

$scope module flop $end
$var wire 1 7- q $end
$var wire 1 "" d $end
$var wire 1 8& wen $end
$var wire 1 !! clk $end
$var wire 1 "! rst $end
$var reg 1 8- state $end
$upscope $end
$upscope $end

$scope module cells[14] $end
$var wire 1 !! clk $end
$var wire 1 "! rst $end
$var wire 1 #" D $end
$var wire 1 8& WriteEnable $end
$var wire 1 v% ReadEnable1 $end
$var wire 1 (& ReadEnable2 $end
$var wire 1 :& Bitline1 $end
$var wire 1 J& Bitline2 $end
$var wire 1 9- Q $end

$scope module flop $end
$var wire 1 9- q $end
$var wire 1 #" d $end
$var wire 1 8& wen $end
$var wire 1 !! clk $end
$var wire 1 "! rst $end
$var reg 1 :- state $end
$upscope $end
$upscope $end

$scope module cells[13] $end
$var wire 1 !! clk $end
$var wire 1 "! rst $end
$var wire 1 $" D $end
$var wire 1 8& WriteEnable $end
$var wire 1 v% ReadEnable1 $end
$var wire 1 (& ReadEnable2 $end
$var wire 1 ;& Bitline1 $end
$var wire 1 K& Bitline2 $end
$var wire 1 ;- Q $end

$scope module flop $end
$var wire 1 ;- q $end
$var wire 1 $" d $end
$var wire 1 8& wen $end
$var wire 1 !! clk $end
$var wire 1 "! rst $end
$var reg 1 <- state $end
$upscope $end
$upscope $end

$scope module cells[12] $end
$var wire 1 !! clk $end
$var wire 1 "! rst $end
$var wire 1 %" D $end
$var wire 1 8& WriteEnable $end
$var wire 1 v% ReadEnable1 $end
$var wire 1 (& ReadEnable2 $end
$var wire 1 <& Bitline1 $end
$var wire 1 L& Bitline2 $end
$var wire 1 =- Q $end

$scope module flop $end
$var wire 1 =- q $end
$var wire 1 %" d $end
$var wire 1 8& wen $end
$var wire 1 !! clk $end
$var wire 1 "! rst $end
$var reg 1 >- state $end
$upscope $end
$upscope $end

$scope module cells[11] $end
$var wire 1 !! clk $end
$var wire 1 "! rst $end
$var wire 1 &" D $end
$var wire 1 8& WriteEnable $end
$var wire 1 v% ReadEnable1 $end
$var wire 1 (& ReadEnable2 $end
$var wire 1 =& Bitline1 $end
$var wire 1 M& Bitline2 $end
$var wire 1 ?- Q $end

$scope module flop $end
$var wire 1 ?- q $end
$var wire 1 &" d $end
$var wire 1 8& wen $end
$var wire 1 !! clk $end
$var wire 1 "! rst $end
$var reg 1 @- state $end
$upscope $end
$upscope $end

$scope module cells[10] $end
$var wire 1 !! clk $end
$var wire 1 "! rst $end
$var wire 1 '" D $end
$var wire 1 8& WriteEnable $end
$var wire 1 v% ReadEnable1 $end
$var wire 1 (& ReadEnable2 $end
$var wire 1 >& Bitline1 $end
$var wire 1 N& Bitline2 $end
$var wire 1 A- Q $end

$scope module flop $end
$var wire 1 A- q $end
$var wire 1 '" d $end
$var wire 1 8& wen $end
$var wire 1 !! clk $end
$var wire 1 "! rst $end
$var reg 1 B- state $end
$upscope $end
$upscope $end

$scope module cells[9] $end
$var wire 1 !! clk $end
$var wire 1 "! rst $end
$var wire 1 (" D $end
$var wire 1 8& WriteEnable $end
$var wire 1 v% ReadEnable1 $end
$var wire 1 (& ReadEnable2 $end
$var wire 1 ?& Bitline1 $end
$var wire 1 O& Bitline2 $end
$var wire 1 C- Q $end

$scope module flop $end
$var wire 1 C- q $end
$var wire 1 (" d $end
$var wire 1 8& wen $end
$var wire 1 !! clk $end
$var wire 1 "! rst $end
$var reg 1 D- state $end
$upscope $end
$upscope $end

$scope module cells[8] $end
$var wire 1 !! clk $end
$var wire 1 "! rst $end
$var wire 1 )" D $end
$var wire 1 8& WriteEnable $end
$var wire 1 v% ReadEnable1 $end
$var wire 1 (& ReadEnable2 $end
$var wire 1 @& Bitline1 $end
$var wire 1 P& Bitline2 $end
$var wire 1 E- Q $end

$scope module flop $end
$var wire 1 E- q $end
$var wire 1 )" d $end
$var wire 1 8& wen $end
$var wire 1 !! clk $end
$var wire 1 "! rst $end
$var reg 1 F- state $end
$upscope $end
$upscope $end

$scope module cells[7] $end
$var wire 1 !! clk $end
$var wire 1 "! rst $end
$var wire 1 *" D $end
$var wire 1 8& WriteEnable $end
$var wire 1 v% ReadEnable1 $end
$var wire 1 (& ReadEnable2 $end
$var wire 1 A& Bitline1 $end
$var wire 1 Q& Bitline2 $end
$var wire 1 G- Q $end

$scope module flop $end
$var wire 1 G- q $end
$var wire 1 *" d $end
$var wire 1 8& wen $end
$var wire 1 !! clk $end
$var wire 1 "! rst $end
$var reg 1 H- state $end
$upscope $end
$upscope $end

$scope module cells[6] $end
$var wire 1 !! clk $end
$var wire 1 "! rst $end
$var wire 1 +" D $end
$var wire 1 8& WriteEnable $end
$var wire 1 v% ReadEnable1 $end
$var wire 1 (& ReadEnable2 $end
$var wire 1 B& Bitline1 $end
$var wire 1 R& Bitline2 $end
$var wire 1 I- Q $end

$scope module flop $end
$var wire 1 I- q $end
$var wire 1 +" d $end
$var wire 1 8& wen $end
$var wire 1 !! clk $end
$var wire 1 "! rst $end
$var reg 1 J- state $end
$upscope $end
$upscope $end

$scope module cells[5] $end
$var wire 1 !! clk $end
$var wire 1 "! rst $end
$var wire 1 ," D $end
$var wire 1 8& WriteEnable $end
$var wire 1 v% ReadEnable1 $end
$var wire 1 (& ReadEnable2 $end
$var wire 1 C& Bitline1 $end
$var wire 1 S& Bitline2 $end
$var wire 1 K- Q $end

$scope module flop $end
$var wire 1 K- q $end
$var wire 1 ," d $end
$var wire 1 8& wen $end
$var wire 1 !! clk $end
$var wire 1 "! rst $end
$var reg 1 L- state $end
$upscope $end
$upscope $end

$scope module cells[4] $end
$var wire 1 !! clk $end
$var wire 1 "! rst $end
$var wire 1 -" D $end
$var wire 1 8& WriteEnable $end
$var wire 1 v% ReadEnable1 $end
$var wire 1 (& ReadEnable2 $end
$var wire 1 D& Bitline1 $end
$var wire 1 T& Bitline2 $end
$var wire 1 M- Q $end

$scope module flop $end
$var wire 1 M- q $end
$var wire 1 -" d $end
$var wire 1 8& wen $end
$var wire 1 !! clk $end
$var wire 1 "! rst $end
$var reg 1 N- state $end
$upscope $end
$upscope $end

$scope module cells[3] $end
$var wire 1 !! clk $end
$var wire 1 "! rst $end
$var wire 1 ." D $end
$var wire 1 8& WriteEnable $end
$var wire 1 v% ReadEnable1 $end
$var wire 1 (& ReadEnable2 $end
$var wire 1 E& Bitline1 $end
$var wire 1 U& Bitline2 $end
$var wire 1 O- Q $end

$scope module flop $end
$var wire 1 O- q $end
$var wire 1 ." d $end
$var wire 1 8& wen $end
$var wire 1 !! clk $end
$var wire 1 "! rst $end
$var reg 1 P- state $end
$upscope $end
$upscope $end

$scope module cells[2] $end
$var wire 1 !! clk $end
$var wire 1 "! rst $end
$var wire 1 /" D $end
$var wire 1 8& WriteEnable $end
$var wire 1 v% ReadEnable1 $end
$var wire 1 (& ReadEnable2 $end
$var wire 1 F& Bitline1 $end
$var wire 1 V& Bitline2 $end
$var wire 1 Q- Q $end

$scope module flop $end
$var wire 1 Q- q $end
$var wire 1 /" d $end
$var wire 1 8& wen $end
$var wire 1 !! clk $end
$var wire 1 "! rst $end
$var reg 1 R- state $end
$upscope $end
$upscope $end

$scope module cells[1] $end
$var wire 1 !! clk $end
$var wire 1 "! rst $end
$var wire 1 0" D $end
$var wire 1 8& WriteEnable $end
$var wire 1 v% ReadEnable1 $end
$var wire 1 (& ReadEnable2 $end
$var wire 1 G& Bitline1 $end
$var wire 1 W& Bitline2 $end
$var wire 1 S- Q $end

$scope module flop $end
$var wire 1 S- q $end
$var wire 1 0" d $end
$var wire 1 8& wen $end
$var wire 1 !! clk $end
$var wire 1 "! rst $end
$var reg 1 T- state $end
$upscope $end
$upscope $end

$scope module cells[0] $end
$var wire 1 !! clk $end
$var wire 1 "! rst $end
$var wire 1 1" D $end
$var wire 1 8& WriteEnable $end
$var wire 1 v% ReadEnable1 $end
$var wire 1 (& ReadEnable2 $end
$var wire 1 H& Bitline1 $end
$var wire 1 X& Bitline2 $end
$var wire 1 U- Q $end

$scope module flop $end
$var wire 1 U- q $end
$var wire 1 1" d $end
$var wire 1 8& wen $end
$var wire 1 !! clk $end
$var wire 1 "! rst $end
$var reg 1 V- state $end
$upscope $end
$upscope $end
$upscope $end
$upscope $end

$scope module ex $end
$var wire 1 2" ALU_In1 [15] $end
$var wire 1 3" ALU_In1 [14] $end
$var wire 1 4" ALU_In1 [13] $end
$var wire 1 5" ALU_In1 [12] $end
$var wire 1 6" ALU_In1 [11] $end
$var wire 1 7" ALU_In1 [10] $end
$var wire 1 8" ALU_In1 [9] $end
$var wire 1 9" ALU_In1 [8] $end
$var wire 1 :" ALU_In1 [7] $end
$var wire 1 ;" ALU_In1 [6] $end
$var wire 1 <" ALU_In1 [5] $end
$var wire 1 =" ALU_In1 [4] $end
$var wire 1 >" ALU_In1 [3] $end
$var wire 1 ?" ALU_In1 [2] $end
$var wire 1 @" ALU_In1 [1] $end
$var wire 1 A" ALU_In1 [0] $end
$var wire 1 U" ALU_In2 [15] $end
$var wire 1 V" ALU_In2 [14] $end
$var wire 1 W" ALU_In2 [13] $end
$var wire 1 X" ALU_In2 [12] $end
$var wire 1 Y" ALU_In2 [11] $end
$var wire 1 Z" ALU_In2 [10] $end
$var wire 1 [" ALU_In2 [9] $end
$var wire 1 \" ALU_In2 [8] $end
$var wire 1 ]" ALU_In2 [7] $end
$var wire 1 ^" ALU_In2 [6] $end
$var wire 1 _" ALU_In2 [5] $end
$var wire 1 `" ALU_In2 [4] $end
$var wire 1 a" ALU_In2 [3] $end
$var wire 1 b" ALU_In2 [2] $end
$var wire 1 c" ALU_In2 [1] $end
$var wire 1 d" ALU_In2 [0] $end
$var wire 1 @! ALUOp [3] $end
$var wire 1 A! ALUOp [2] $end
$var wire 1 B! ALUOp [1] $end
$var wire 1 C! ALUOp [0] $end
$var reg 16 W- ALU_Out [15:0] $end
$var reg 3 X- Flags [2:0] $end
$var reg 1 Y- Error $end
$var wire 1 Z- addsub_res [15] $end
$var wire 1 [- addsub_res [14] $end
$var wire 1 \- addsub_res [13] $end
$var wire 1 ]- addsub_res [12] $end
$var wire 1 ^- addsub_res [11] $end
$var wire 1 _- addsub_res [10] $end
$var wire 1 `- addsub_res [9] $end
$var wire 1 a- addsub_res [8] $end
$var wire 1 b- addsub_res [7] $end
$var wire 1 c- addsub_res [6] $end
$var wire 1 d- addsub_res [5] $end
$var wire 1 e- addsub_res [4] $end
$var wire 1 f- addsub_res [3] $end
$var wire 1 g- addsub_res [2] $end
$var wire 1 h- addsub_res [1] $end
$var wire 1 i- addsub_res [0] $end
$var wire 1 j- Shift_Out [15] $end
$var wire 1 k- Shift_Out [14] $end
$var wire 1 l- Shift_Out [13] $end
$var wire 1 m- Shift_Out [12] $end
$var wire 1 n- Shift_Out [11] $end
$var wire 1 o- Shift_Out [10] $end
$var wire 1 p- Shift_Out [9] $end
$var wire 1 q- Shift_Out [8] $end
$var wire 1 r- Shift_Out [7] $end
$var wire 1 s- Shift_Out [6] $end
$var wire 1 t- Shift_Out [5] $end
$var wire 1 u- Shift_Out [4] $end
$var wire 1 v- Shift_Out [3] $end
$var wire 1 w- Shift_Out [2] $end
$var wire 1 x- Shift_Out [1] $end
$var wire 1 y- Shift_Out [0] $end
$var wire 1 z- RedSum [15] $end
$var wire 1 {- RedSum [14] $end
$var wire 1 |- RedSum [13] $end
$var wire 1 }- RedSum [12] $end
$var wire 1 ~- RedSum [11] $end
$var wire 1 !. RedSum [10] $end
$var wire 1 ". RedSum [9] $end
$var wire 1 #. RedSum [8] $end
$var wire 1 $. RedSum [7] $end
$var wire 1 %. RedSum [6] $end
$var wire 1 &. RedSum [5] $end
$var wire 1 '. RedSum [4] $end
$var wire 1 (. RedSum [3] $end
$var wire 1 ). RedSum [2] $end
$var wire 1 *. RedSum [1] $end
$var wire 1 +. RedSum [0] $end
$var wire 1 ,. PaddSum [15] $end
$var wire 1 -. PaddSum [14] $end
$var wire 1 .. PaddSum [13] $end
$var wire 1 /. PaddSum [12] $end
$var wire 1 0. PaddSum [11] $end
$var wire 1 1. PaddSum [10] $end
$var wire 1 2. PaddSum [9] $end
$var wire 1 3. PaddSum [8] $end
$var wire 1 4. PaddSum [7] $end
$var wire 1 5. PaddSum [6] $end
$var wire 1 6. PaddSum [5] $end
$var wire 1 7. PaddSum [4] $end
$var wire 1 8. PaddSum [3] $end
$var wire 1 9. PaddSum [2] $end
$var wire 1 :. PaddSum [1] $end
$var wire 1 ;. PaddSum [0] $end
$var wire 1 <. ovfl_res $end
$var wire 1 =. sat $end

$scope module UUD $end
$var wire 1 2" A [15] $end
$var wire 1 3" A [14] $end
$var wire 1 4" A [13] $end
$var wire 1 5" A [12] $end
$var wire 1 6" A [11] $end
$var wire 1 7" A [10] $end
$var wire 1 8" A [9] $end
$var wire 1 9" A [8] $end
$var wire 1 :" A [7] $end
$var wire 1 ;" A [6] $end
$var wire 1 <" A [5] $end
$var wire 1 =" A [4] $end
$var wire 1 >" A [3] $end
$var wire 1 ?" A [2] $end
$var wire 1 @" A [1] $end
$var wire 1 A" A [0] $end
$var wire 1 U" B [15] $end
$var wire 1 V" B [14] $end
$var wire 1 W" B [13] $end
$var wire 1 X" B [12] $end
$var wire 1 Y" B [11] $end
$var wire 1 Z" B [10] $end
$var wire 1 [" B [9] $end
$var wire 1 \" B [8] $end
$var wire 1 ]" B [7] $end
$var wire 1 ^" B [6] $end
$var wire 1 _" B [5] $end
$var wire 1 `" B [4] $end
$var wire 1 a" B [3] $end
$var wire 1 b" B [2] $end
$var wire 1 c" B [1] $end
$var wire 1 d" B [0] $end
$var wire 1 C! sub $end
$var wire 1 Z- Sum [15] $end
$var wire 1 [- Sum [14] $end
$var wire 1 \- Sum [13] $end
$var wire 1 ]- Sum [12] $end
$var wire 1 ^- Sum [11] $end
$var wire 1 _- Sum [10] $end
$var wire 1 `- Sum [9] $end
$var wire 1 a- Sum [8] $end
$var wire 1 b- Sum [7] $end
$var wire 1 c- Sum [6] $end
$var wire 1 d- Sum [5] $end
$var wire 1 e- Sum [4] $end
$var wire 1 f- Sum [3] $end
$var wire 1 g- Sum [2] $end
$var wire 1 h- Sum [1] $end
$var wire 1 i- Sum [0] $end
$var wire 1 =. sat $end
$var wire 1 >. B_comp [15] $end
$var wire 1 ?. B_comp [14] $end
$var wire 1 @. B_comp [13] $end
$var wire 1 A. B_comp [12] $end
$var wire 1 B. B_comp [11] $end
$var wire 1 C. B_comp [10] $end
$var wire 1 D. B_comp [9] $end
$var wire 1 E. B_comp [8] $end
$var wire 1 F. B_comp [7] $end
$var wire 1 G. B_comp [6] $end
$var wire 1 H. B_comp [5] $end
$var wire 1 I. B_comp [4] $end
$var wire 1 J. B_comp [3] $end
$var wire 1 K. B_comp [2] $end
$var wire 1 L. B_comp [1] $end
$var wire 1 M. B_comp [0] $end
$var wire 1 N. C [3] $end
$var wire 1 O. C [2] $end
$var wire 1 P. C [1] $end
$var wire 1 Q. C [0] $end
$var wire 1 R. sum_res [15] $end
$var wire 1 S. sum_res [14] $end
$var wire 1 T. sum_res [13] $end
$var wire 1 U. sum_res [12] $end
$var wire 1 V. sum_res [11] $end
$var wire 1 W. sum_res [10] $end
$var wire 1 X. sum_res [9] $end
$var wire 1 Y. sum_res [8] $end
$var wire 1 Z. sum_res [7] $end
$var wire 1 [. sum_res [6] $end
$var wire 1 \. sum_res [5] $end
$var wire 1 ]. sum_res [4] $end
$var wire 1 ^. sum_res [3] $end
$var wire 1 _. sum_res [2] $end
$var wire 1 `. sum_res [1] $end
$var wire 1 a. sum_res [0] $end
$var wire 1 b. ovfl_pos $end
$var wire 1 c. ovfl_neg $end
$var wire 1 d. G $end
$var wire 1 e. P $end

$scope module lsb $end
$var wire 1 >" A [3] $end
$var wire 1 ?" A [2] $end
$var wire 1 @" A [1] $end
$var wire 1 A" A [0] $end
$var wire 1 J. B [3] $end
$var wire 1 K. B [2] $end
$var wire 1 L. B [1] $end
$var wire 1 M. B [0] $end
$var wire 1 ^. Sum [3] $end
$var wire 1 _. Sum [2] $end
$var wire 1 `. Sum [1] $end
$var wire 1 a. Sum [0] $end
$var wire 1 C! Cin $end
$var wire 1 Q. Cout $end
$var wire 1 f. C [3] $end
$var wire 1 g. C [2] $end
$var wire 1 h. C [1] $end
$var wire 1 i. C [0] $end
$var wire 1 j. ovfl_pos $end
$var wire 1 k. ovfl_neg $end
$var wire 1 l. P [3] $end
$var wire 1 m. P [2] $end
$var wire 1 n. P [1] $end
$var wire 1 o. P [0] $end
$var wire 1 p. G [3] $end
$var wire 1 q. G [2] $end
$var wire 1 r. G [1] $end
$var wire 1 s. G [0] $end
$upscope $end

$scope module mb1 $end
$var wire 1 :" A [3] $end
$var wire 1 ;" A [2] $end
$var wire 1 <" A [1] $end
$var wire 1 =" A [0] $end
$var wire 1 F. B [3] $end
$var wire 1 G. B [2] $end
$var wire 1 H. B [1] $end
$var wire 1 I. B [0] $end
$var wire 1 Z. Sum [3] $end
$var wire 1 [. Sum [2] $end
$var wire 1 \. Sum [1] $end
$var wire 1 ]. Sum [0] $end
$var wire 1 Q. Cin $end
$var wire 1 P. Cout $end
$var wire 1 t. C [3] $end
$var wire 1 u. C [2] $end
$var wire 1 v. C [1] $end
$var wire 1 w. C [0] $end
$var wire 1 x. ovfl_pos $end
$var wire 1 y. ovfl_neg $end
$var wire 1 z. P [3] $end
$var wire 1 {. P [2] $end
$var wire 1 |. P [1] $end
$var wire 1 }. P [0] $end
$var wire 1 ~. G [3] $end
$var wire 1 !/ G [2] $end
$var wire 1 "/ G [1] $end
$var wire 1 #/ G [0] $end
$upscope $end

$scope module mb2 $end
$var wire 1 6" A [3] $end
$var wire 1 7" A [2] $end
$var wire 1 8" A [1] $end
$var wire 1 9" A [0] $end
$var wire 1 B. B [3] $end
$var wire 1 C. B [2] $end
$var wire 1 D. B [1] $end
$var wire 1 E. B [0] $end
$var wire 1 V. Sum [3] $end
$var wire 1 W. Sum [2] $end
$var wire 1 X. Sum [1] $end
$var wire 1 Y. Sum [0] $end
$var wire 1 P. Cin $end
$var wire 1 O. Cout $end
$var wire 1 $/ C [3] $end
$var wire 1 %/ C [2] $end
$var wire 1 &/ C [1] $end
$var wire 1 '/ C [0] $end
$var wire 1 (/ ovfl_pos $end
$var wire 1 )/ ovfl_neg $end
$var wire 1 */ P [3] $end
$var wire 1 +/ P [2] $end
$var wire 1 ,/ P [1] $end
$var wire 1 -/ P [0] $end
$var wire 1 ./ G [3] $end
$var wire 1 // G [2] $end
$var wire 1 0/ G [1] $end
$var wire 1 1/ G [0] $end
$upscope $end

$scope module msb $end
$var wire 1 2" A [3] $end
$var wire 1 3" A [2] $end
$var wire 1 4" A [1] $end
$var wire 1 5" A [0] $end
$var wire 1 >. B [3] $end
$var wire 1 ?. B [2] $end
$var wire 1 @. B [1] $end
$var wire 1 A. B [0] $end
$var wire 1 R. Sum [3] $end
$var wire 1 S. Sum [2] $end
$var wire 1 T. Sum [1] $end
$var wire 1 U. Sum [0] $end
$var wire 1 O. Cin $end
$var wire 1 N. Cout $end
$var wire 1 2/ C [3] $end
$var wire 1 3/ C [2] $end
$var wire 1 4/ C [1] $end
$var wire 1 5/ C [0] $end
$var wire 1 6/ ovfl_pos $end
$var wire 1 7/ ovfl_neg $end
$var wire 1 8/ P [3] $end
$var wire 1 9/ P [2] $end
$var wire 1 :/ P [1] $end
$var wire 1 ;/ P [0] $end
$var wire 1 </ G [3] $end
$var wire 1 =/ G [2] $end
$var wire 1 >/ G [1] $end
$var wire 1 ?/ G [0] $end
$upscope $end
$upscope $end

$scope module shifter $end
$var wire 1 2" Shift_In [15] $end
$var wire 1 3" Shift_In [14] $end
$var wire 1 4" Shift_In [13] $end
$var wire 1 5" Shift_In [12] $end
$var wire 1 6" Shift_In [11] $end
$var wire 1 7" Shift_In [10] $end
$var wire 1 8" Shift_In [9] $end
$var wire 1 9" Shift_In [8] $end
$var wire 1 :" Shift_In [7] $end
$var wire 1 ;" Shift_In [6] $end
$var wire 1 <" Shift_In [5] $end
$var wire 1 =" Shift_In [4] $end
$var wire 1 >" Shift_In [3] $end
$var wire 1 ?" Shift_In [2] $end
$var wire 1 @" Shift_In [1] $end
$var wire 1 A" Shift_In [0] $end
$var wire 1 a" Shift_Val [3] $end
$var wire 1 b" Shift_Val [2] $end
$var wire 1 c" Shift_Val [1] $end
$var wire 1 d" Shift_Val [0] $end
$var wire 1 B! Mode [1] $end
$var wire 1 C! Mode [0] $end
$var wire 1 j- Shift_Out [15] $end
$var wire 1 k- Shift_Out [14] $end
$var wire 1 l- Shift_Out [13] $end
$var wire 1 m- Shift_Out [12] $end
$var wire 1 n- Shift_Out [11] $end
$var wire 1 o- Shift_Out [10] $end
$var wire 1 p- Shift_Out [9] $end
$var wire 1 q- Shift_Out [8] $end
$var wire 1 r- Shift_Out [7] $end
$var wire 1 s- Shift_Out [6] $end
$var wire 1 t- Shift_Out [5] $end
$var wire 1 u- Shift_Out [4] $end
$var wire 1 v- Shift_Out [3] $end
$var wire 1 w- Shift_Out [2] $end
$var wire 1 x- Shift_Out [1] $end
$var wire 1 y- Shift_Out [0] $end
$var wire 1 @/ shift8 [15] $end
$var wire 1 A/ shift8 [14] $end
$var wire 1 B/ shift8 [13] $end
$var wire 1 C/ shift8 [12] $end
$var wire 1 D/ shift8 [11] $end
$var wire 1 E/ shift8 [10] $end
$var wire 1 F/ shift8 [9] $end
$var wire 1 G/ shift8 [8] $end
$var wire 1 H/ shift8 [7] $end
$var wire 1 I/ shift8 [6] $end
$var wire 1 J/ shift8 [5] $end
$var wire 1 K/ shift8 [4] $end
$var wire 1 L/ shift8 [3] $end
$var wire 1 M/ shift8 [2] $end
$var wire 1 N/ shift8 [1] $end
$var wire 1 O/ shift8 [0] $end
$var wire 1 P/ shift4 [15] $end
$var wire 1 Q/ shift4 [14] $end
$var wire 1 R/ shift4 [13] $end
$var wire 1 S/ shift4 [12] $end
$var wire 1 T/ shift4 [11] $end
$var wire 1 U/ shift4 [10] $end
$var wire 1 V/ shift4 [9] $end
$var wire 1 W/ shift4 [8] $end
$var wire 1 X/ shift4 [7] $end
$var wire 1 Y/ shift4 [6] $end
$var wire 1 Z/ shift4 [5] $end
$var wire 1 [/ shift4 [4] $end
$var wire 1 \/ shift4 [3] $end
$var wire 1 ]/ shift4 [2] $end
$var wire 1 ^/ shift4 [1] $end
$var wire 1 _/ shift4 [0] $end
$var wire 1 `/ shift2 [15] $end
$var wire 1 a/ shift2 [14] $end
$var wire 1 b/ shift2 [13] $end
$var wire 1 c/ shift2 [12] $end
$var wire 1 d/ shift2 [11] $end
$var wire 1 e/ shift2 [10] $end
$var wire 1 f/ shift2 [9] $end
$var wire 1 g/ shift2 [8] $end
$var wire 1 h/ shift2 [7] $end
$var wire 1 i/ shift2 [6] $end
$var wire 1 j/ shift2 [5] $end
$var wire 1 k/ shift2 [4] $end
$var wire 1 l/ shift2 [3] $end
$var wire 1 m/ shift2 [2] $end
$var wire 1 n/ shift2 [1] $end
$var wire 1 o/ shift2 [0] $end
$upscope $end

$scope module red $end
$var wire 1 2" In1 [15] $end
$var wire 1 3" In1 [14] $end
$var wire 1 4" In1 [13] $end
$var wire 1 5" In1 [12] $end
$var wire 1 6" In1 [11] $end
$var wire 1 7" In1 [10] $end
$var wire 1 8" In1 [9] $end
$var wire 1 9" In1 [8] $end
$var wire 1 :" In1 [7] $end
$var wire 1 ;" In1 [6] $end
$var wire 1 <" In1 [5] $end
$var wire 1 =" In1 [4] $end
$var wire 1 >" In1 [3] $end
$var wire 1 ?" In1 [2] $end
$var wire 1 @" In1 [1] $end
$var wire 1 A" In1 [0] $end
$var wire 1 U" In2 [15] $end
$var wire 1 V" In2 [14] $end
$var wire 1 W" In2 [13] $end
$var wire 1 X" In2 [12] $end
$var wire 1 Y" In2 [11] $end
$var wire 1 Z" In2 [10] $end
$var wire 1 [" In2 [9] $end
$var wire 1 \" In2 [8] $end
$var wire 1 ]" In2 [7] $end
$var wire 1 ^" In2 [6] $end
$var wire 1 _" In2 [5] $end
$var wire 1 `" In2 [4] $end
$var wire 1 a" In2 [3] $end
$var wire 1 b" In2 [2] $end
$var wire 1 c" In2 [1] $end
$var wire 1 d" In2 [0] $end
$var wire 1 z- Sum [15] $end
$var wire 1 {- Sum [14] $end
$var wire 1 |- Sum [13] $end
$var wire 1 }- Sum [12] $end
$var wire 1 ~- Sum [11] $end
$var wire 1 !. Sum [10] $end
$var wire 1 ". Sum [9] $end
$var wire 1 #. Sum [8] $end
$var wire 1 $. Sum [7] $end
$var wire 1 %. Sum [6] $end
$var wire 1 &. Sum [5] $end
$var wire 1 '. Sum [4] $end
$var wire 1 (. Sum [3] $end
$var wire 1 ). Sum [2] $end
$var wire 1 *. Sum [1] $end
$var wire 1 +. Sum [0] $end
$var wire 1 p/ ac1 [3] $end
$var wire 1 q/ ac1 [2] $end
$var wire 1 r/ ac1 [1] $end
$var wire 1 s/ ac1 [0] $end
$var wire 1 t/ ac2 [3] $end
$var wire 1 u/ ac2 [2] $end
$var wire 1 v/ ac2 [1] $end
$var wire 1 w/ ac2 [0] $end
$var wire 1 x/ acc [3] $end
$var wire 1 y/ acc [2] $end
$var wire 1 z/ acc [1] $end
$var wire 1 {/ acc [0] $end
$var wire 1 |/ bd1 [3] $end
$var wire 1 }/ bd1 [2] $end
$var wire 1 ~/ bd1 [1] $end
$var wire 1 !0 bd1 [0] $end
$var wire 1 "0 bd2 [3] $end
$var wire 1 #0 bd2 [2] $end
$var wire 1 $0 bd2 [1] $end
$var wire 1 %0 bd2 [0] $end
$var wire 1 &0 bdc [3] $end
$var wire 1 '0 bdc [2] $end
$var wire 1 (0 bdc [1] $end
$var wire 1 )0 bdc [0] $end
$var wire 1 *0 accarry [1] $end
$var wire 1 +0 accarry [0] $end
$var wire 1 ,0 bdcarry [1] $end
$var wire 1 -0 bdcarry [0] $end
$var wire 1 .0 rescarry [1] $end
$var wire 1 /0 rescarry [0] $end
$var wire 1 00 out $end
$var wire 1 10 sum1 [3] $end
$var wire 1 20 sum1 [2] $end
$var wire 1 30 sum1 [1] $end
$var wire 1 40 sum1 [0] $end
$var wire 1 50 sum2 [3] $end
$var wire 1 60 sum2 [2] $end
$var wire 1 70 sum2 [1] $end
$var wire 1 80 sum2 [0] $end
$var wire 1 90 sum3 [3] $end
$var wire 1 :0 sum3 [2] $end
$var wire 1 ;0 sum3 [1] $end
$var wire 1 <0 sum3 [0] $end

$scope module AClsb $end
$var wire 1 6" A [3] $end
$var wire 1 7" A [2] $end
$var wire 1 8" A [1] $end
$var wire 1 9" A [0] $end
$var wire 1 Y" B [3] $end
$var wire 1 Z" B [2] $end
$var wire 1 [" B [1] $end
$var wire 1 \" B [0] $end
$var wire 1 p/ Sum [3] $end
$var wire 1 q/ Sum [2] $end
$var wire 1 r/ Sum [1] $end
$var wire 1 s/ Sum [0] $end
$var wire 1 =0 Cin $end
$var wire 1 +0 Cout $end
$var wire 1 >0 C [3] $end
$var wire 1 ?0 C [2] $end
$var wire 1 @0 C [1] $end
$var wire 1 A0 C [0] $end
$var wire 1 B0 ovfl_pos $end
$var wire 1 C0 ovfl_neg $end
$var wire 1 D0 P [3] $end
$var wire 1 E0 P [2] $end
$var wire 1 F0 P [1] $end
$var wire 1 G0 P [0] $end
$var wire 1 H0 G [3] $end
$var wire 1 I0 G [2] $end
$var wire 1 J0 G [1] $end
$var wire 1 K0 G [0] $end
$upscope $end

$scope module ACmsb $end
$var wire 1 2" A [3] $end
$var wire 1 3" A [2] $end
$var wire 1 4" A [1] $end
$var wire 1 5" A [0] $end
$var wire 1 U" B [3] $end
$var wire 1 V" B [2] $end
$var wire 1 W" B [1] $end
$var wire 1 X" B [0] $end
$var wire 1 t/ Sum [3] $end
$var wire 1 u/ Sum [2] $end
$var wire 1 v/ Sum [1] $end
$var wire 1 w/ Sum [0] $end
$var wire 1 +0 Cin $end
$var wire 1 *0 Cout $end
$var wire 1 L0 C [3] $end
$var wire 1 M0 C [2] $end
$var wire 1 N0 C [1] $end
$var wire 1 O0 C [0] $end
$var wire 1 P0 ovfl_pos $end
$var wire 1 Q0 ovfl_neg $end
$var wire 1 R0 P [3] $end
$var wire 1 S0 P [2] $end
$var wire 1 T0 P [1] $end
$var wire 1 U0 P [0] $end
$var wire 1 V0 G [3] $end
$var wire 1 W0 G [2] $end
$var wire 1 X0 G [1] $end
$var wire 1 Y0 G [0] $end
$upscope $end

$scope module BDlsb $end
$var wire 1 >" A [3] $end
$var wire 1 ?" A [2] $end
$var wire 1 @" A [1] $end
$var wire 1 A" A [0] $end
$var wire 1 a" B [3] $end
$var wire 1 b" B [2] $end
$var wire 1 c" B [1] $end
$var wire 1 d" B [0] $end
$var wire 1 |/ Sum [3] $end
$var wire 1 }/ Sum [2] $end
$var wire 1 ~/ Sum [1] $end
$var wire 1 !0 Sum [0] $end
$var wire 1 Z0 Cin $end
$var wire 1 -0 Cout $end
$var wire 1 [0 C [3] $end
$var wire 1 \0 C [2] $end
$var wire 1 ]0 C [1] $end
$var wire 1 ^0 C [0] $end
$var wire 1 _0 ovfl_pos $end
$var wire 1 `0 ovfl_neg $end
$var wire 1 a0 P [3] $end
$var wire 1 b0 P [2] $end
$var wire 1 c0 P [1] $end
$var wire 1 d0 P [0] $end
$var wire 1 e0 G [3] $end
$var wire 1 f0 G [2] $end
$var wire 1 g0 G [1] $end
$var wire 1 h0 G [0] $end
$upscope $end

$scope module BDmsb $end
$var wire 1 :" A [3] $end
$var wire 1 ;" A [2] $end
$var wire 1 <" A [1] $end
$var wire 1 =" A [0] $end
$var wire 1 ]" B [3] $end
$var wire 1 ^" B [2] $end
$var wire 1 _" B [1] $end
$var wire 1 `" B [0] $end
$var wire 1 "0 Sum [3] $end
$var wire 1 #0 Sum [2] $end
$var wire 1 $0 Sum [1] $end
$var wire 1 %0 Sum [0] $end
$var wire 1 -0 Cin $end
$var wire 1 ,0 Cout $end
$var wire 1 i0 C [3] $end
$var wire 1 j0 C [2] $end
$var wire 1 k0 C [1] $end
$var wire 1 l0 C [0] $end
$var wire 1 m0 ovfl_pos $end
$var wire 1 n0 ovfl_neg $end
$var wire 1 o0 P [3] $end
$var wire 1 p0 P [2] $end
$var wire 1 q0 P [1] $end
$var wire 1 r0 P [0] $end
$var wire 1 s0 G [3] $end
$var wire 1 t0 G [2] $end
$var wire 1 u0 G [1] $end
$var wire 1 v0 G [0] $end
$upscope $end

$scope module reslsb $end
$var wire 1 p/ A [3] $end
$var wire 1 q/ A [2] $end
$var wire 1 r/ A [1] $end
$var wire 1 s/ A [0] $end
$var wire 1 |/ B [3] $end
$var wire 1 }/ B [2] $end
$var wire 1 ~/ B [1] $end
$var wire 1 !0 B [0] $end
$var wire 1 10 Sum [3] $end
$var wire 1 20 Sum [2] $end
$var wire 1 30 Sum [1] $end
$var wire 1 40 Sum [0] $end
$var wire 1 w0 Cin $end
$var wire 1 /0 Cout $end
$var wire 1 x0 C [3] $end
$var wire 1 y0 C [2] $end
$var wire 1 z0 C [1] $end
$var wire 1 {0 C [0] $end
$var wire 1 |0 ovfl_pos $end
$var wire 1 }0 ovfl_neg $end
$var wire 1 ~0 P [3] $end
$var wire 1 !1 P [2] $end
$var wire 1 "1 P [1] $end
$var wire 1 #1 P [0] $end
$var wire 1 $1 G [3] $end
$var wire 1 %1 G [2] $end
$var wire 1 &1 G [1] $end
$var wire 1 '1 G [0] $end
$upscope $end

$scope module resmsb $end
$var wire 1 t/ A [3] $end
$var wire 1 u/ A [2] $end
$var wire 1 v/ A [1] $end
$var wire 1 w/ A [0] $end
$var wire 1 "0 B [3] $end
$var wire 1 #0 B [2] $end
$var wire 1 $0 B [1] $end
$var wire 1 %0 B [0] $end
$var wire 1 50 Sum [3] $end
$var wire 1 60 Sum [2] $end
$var wire 1 70 Sum [1] $end
$var wire 1 80 Sum [0] $end
$var wire 1 /0 Cin $end
$var wire 1 .0 Cout $end
$var wire 1 (1 C [3] $end
$var wire 1 )1 C [2] $end
$var wire 1 *1 C [1] $end
$var wire 1 +1 C [0] $end
$var wire 1 ,1 ovfl_pos $end
$var wire 1 -1 ovfl_neg $end
$var wire 1 .1 P [3] $end
$var wire 1 /1 P [2] $end
$var wire 1 01 P [1] $end
$var wire 1 11 P [0] $end
$var wire 1 21 G [3] $end
$var wire 1 31 G [2] $end
$var wire 1 41 G [1] $end
$var wire 1 51 G [0] $end
$upscope $end

$scope module rescarry1 $end
$var wire 1 61 A [3] $end
$var wire 1 71 A [2] $end
$var wire 1 81 A [1] $end
$var wire 1 *0 A [0] $end
$var wire 1 91 B [3] $end
$var wire 1 :1 B [2] $end
$var wire 1 ;1 B [1] $end
$var wire 1 ,0 B [0] $end
$var wire 1 90 Sum [3] $end
$var wire 1 :0 Sum [2] $end
$var wire 1 ;0 Sum [1] $end
$var wire 1 <0 Sum [0] $end
$var wire 1 .0 Cin $end
$var wire 1 00 Cout $end
$var wire 1 <1 C [3] $end
$var wire 1 =1 C [2] $end
$var wire 1 >1 C [1] $end
$var wire 1 ?1 C [0] $end
$var wire 1 @1 ovfl_pos $end
$var wire 1 A1 ovfl_neg $end
$var wire 1 B1 P [3] $end
$var wire 1 C1 P [2] $end
$var wire 1 D1 P [1] $end
$var wire 1 E1 P [0] $end
$var wire 1 F1 G [3] $end
$var wire 1 G1 G [2] $end
$var wire 1 H1 G [1] $end
$var wire 1 I1 G [0] $end
$upscope $end
$upscope $end

$scope module padd $end
$var wire 1 2" A [15] $end
$var wire 1 3" A [14] $end
$var wire 1 4" A [13] $end
$var wire 1 5" A [12] $end
$var wire 1 6" A [11] $end
$var wire 1 7" A [10] $end
$var wire 1 8" A [9] $end
$var wire 1 9" A [8] $end
$var wire 1 :" A [7] $end
$var wire 1 ;" A [6] $end
$var wire 1 <" A [5] $end
$var wire 1 =" A [4] $end
$var wire 1 >" A [3] $end
$var wire 1 ?" A [2] $end
$var wire 1 @" A [1] $end
$var wire 1 A" A [0] $end
$var wire 1 U" B [15] $end
$var wire 1 V" B [14] $end
$var wire 1 W" B [13] $end
$var wire 1 X" B [12] $end
$var wire 1 Y" B [11] $end
$var wire 1 Z" B [10] $end
$var wire 1 [" B [9] $end
$var wire 1 \" B [8] $end
$var wire 1 ]" B [7] $end
$var wire 1 ^" B [6] $end
$var wire 1 _" B [5] $end
$var wire 1 `" B [4] $end
$var wire 1 a" B [3] $end
$var wire 1 b" B [2] $end
$var wire 1 c" B [1] $end
$var wire 1 d" B [0] $end
$var wire 1 ,. Sum [15] $end
$var wire 1 -. Sum [14] $end
$var wire 1 .. Sum [13] $end
$var wire 1 /. Sum [12] $end
$var wire 1 0. Sum [11] $end
$var wire 1 1. Sum [10] $end
$var wire 1 2. Sum [9] $end
$var wire 1 3. Sum [8] $end
$var wire 1 4. Sum [7] $end
$var wire 1 5. Sum [6] $end
$var wire 1 6. Sum [5] $end
$var wire 1 7. Sum [4] $end
$var wire 1 8. Sum [3] $end
$var wire 1 9. Sum [2] $end
$var wire 1 :. Sum [1] $end
$var wire 1 ;. Sum [0] $end
$var wire 1 J1 b15to12 [3] $end
$var wire 1 K1 b15to12 [2] $end
$var wire 1 L1 b15to12 [1] $end
$var wire 1 M1 b15to12 [0] $end
$var wire 1 N1 b11to8 [3] $end
$var wire 1 O1 b11to8 [2] $end
$var wire 1 P1 b11to8 [1] $end
$var wire 1 Q1 b11to8 [0] $end
$var wire 1 R1 b7to4 [3] $end
$var wire 1 S1 b7to4 [2] $end
$var wire 1 T1 b7to4 [1] $end
$var wire 1 U1 b7to4 [0] $end
$var wire 1 V1 b3to0 [3] $end
$var wire 1 W1 b3to0 [2] $end
$var wire 1 X1 b3to0 [1] $end
$var wire 1 Y1 b3to0 [0] $end
$var wire 1 Z1 ov15to12 $end
$var wire 1 [1 ov11to8 $end
$var wire 1 \1 ov7to4 $end
$var wire 1 ]1 ov3to0 $end
$var wire 1 ^1 carryout [3] $end
$var wire 1 _1 carryout [2] $end
$var wire 1 `1 carryout [1] $end
$var wire 1 a1 carryout [0] $end

$scope module add15to12 $end
$var wire 1 2" A [3] $end
$var wire 1 3" A [2] $end
$var wire 1 4" A [1] $end
$var wire 1 5" A [0] $end
$var wire 1 U" B [3] $end
$var wire 1 V" B [2] $end
$var wire 1 W" B [1] $end
$var wire 1 X" B [0] $end
$var wire 1 J1 Sum [3] $end
$var wire 1 K1 Sum [2] $end
$var wire 1 L1 Sum [1] $end
$var wire 1 M1 Sum [0] $end
$var wire 1 b1 Cin $end
$var wire 1 c1 C [3] $end
$var wire 1 d1 C [2] $end
$var wire 1 e1 C [1] $end
$var wire 1 f1 C [0] $end
$var wire 1 g1 sum_res [3] $end
$var wire 1 h1 sum_res [2] $end
$var wire 1 i1 sum_res [1] $end
$var wire 1 j1 sum_res [0] $end
$var wire 1 k1 ovfl_pos $end
$var wire 1 l1 ovfl_neg $end
$var wire 1 m1 P [3] $end
$var wire 1 n1 P [2] $end
$var wire 1 o1 P [1] $end
$var wire 1 p1 P [0] $end
$var wire 1 q1 G [3] $end
$var wire 1 r1 G [2] $end
$var wire 1 s1 G [1] $end
$var wire 1 t1 G [0] $end
$upscope $end

$scope module add11to8 $end
$var wire 1 6" A [3] $end
$var wire 1 7" A [2] $end
$var wire 1 8" A [1] $end
$var wire 1 9" A [0] $end
$var wire 1 Y" B [3] $end
$var wire 1 Z" B [2] $end
$var wire 1 [" B [1] $end
$var wire 1 \" B [0] $end
$var wire 1 N1 Sum [3] $end
$var wire 1 O1 Sum [2] $end
$var wire 1 P1 Sum [1] $end
$var wire 1 Q1 Sum [0] $end
$var wire 1 u1 Cin $end
$var wire 1 v1 C [3] $end
$var wire 1 w1 C [2] $end
$var wire 1 x1 C [1] $end
$var wire 1 y1 C [0] $end
$var wire 1 z1 sum_res [3] $end
$var wire 1 {1 sum_res [2] $end
$var wire 1 |1 sum_res [1] $end
$var wire 1 }1 sum_res [0] $end
$var wire 1 ~1 ovfl_pos $end
$var wire 1 !2 ovfl_neg $end
$var wire 1 "2 P [3] $end
$var wire 1 #2 P [2] $end
$var wire 1 $2 P [1] $end
$var wire 1 %2 P [0] $end
$var wire 1 &2 G [3] $end
$var wire 1 '2 G [2] $end
$var wire 1 (2 G [1] $end
$var wire 1 )2 G [0] $end
$upscope $end

$scope module add7to4 $end
$var wire 1 :" A [3] $end
$var wire 1 ;" A [2] $end
$var wire 1 <" A [1] $end
$var wire 1 =" A [0] $end
$var wire 1 ]" B [3] $end
$var wire 1 ^" B [2] $end
$var wire 1 _" B [1] $end
$var wire 1 `" B [0] $end
$var wire 1 R1 Sum [3] $end
$var wire 1 S1 Sum [2] $end
$var wire 1 T1 Sum [1] $end
$var wire 1 U1 Sum [0] $end
$var wire 1 *2 Cin $end
$var wire 1 +2 C [3] $end
$var wire 1 ,2 C [2] $end
$var wire 1 -2 C [1] $end
$var wire 1 .2 C [0] $end
$var wire 1 /2 sum_res [3] $end
$var wire 1 02 sum_res [2] $end
$var wire 1 12 sum_res [1] $end
$var wire 1 22 sum_res [0] $end
$var wire 1 32 ovfl_pos $end
$var wire 1 42 ovfl_neg $end
$var wire 1 52 P [3] $end
$var wire 1 62 P [2] $end
$var wire 1 72 P [1] $end
$var wire 1 82 P [0] $end
$var wire 1 92 G [3] $end
$var wire 1 :2 G [2] $end
$var wire 1 ;2 G [1] $end
$var wire 1 <2 G [0] $end
$upscope $end

$scope module add3to0 $end
$var wire 1 >" A [3] $end
$var wire 1 ?" A [2] $end
$var wire 1 @" A [1] $end
$var wire 1 A" A [0] $end
$var wire 1 a" B [3] $end
$var wire 1 b" B [2] $end
$var wire 1 c" B [1] $end
$var wire 1 d" B [0] $end
$var wire 1 V1 Sum [3] $end
$var wire 1 W1 Sum [2] $end
$var wire 1 X1 Sum [1] $end
$var wire 1 Y1 Sum [0] $end
$var wire 1 =2 Cin $end
$var wire 1 >2 C [3] $end
$var wire 1 ?2 C [2] $end
$var wire 1 @2 C [1] $end
$var wire 1 A2 C [0] $end
$var wire 1 B2 sum_res [3] $end
$var wire 1 C2 sum_res [2] $end
$var wire 1 D2 sum_res [1] $end
$var wire 1 E2 sum_res [0] $end
$var wire 1 F2 ovfl_pos $end
$var wire 1 G2 ovfl_neg $end
$var wire 1 H2 P [3] $end
$var wire 1 I2 P [2] $end
$var wire 1 J2 P [1] $end
$var wire 1 K2 P [0] $end
$var wire 1 L2 G [3] $end
$var wire 1 M2 G [2] $end
$var wire 1 N2 G [1] $end
$var wire 1 O2 G [0] $end
$upscope $end
$upscope $end
$upscope $end

$scope module dmem $end
$var parameter 32 P2 ADDR_WIDTH $end
$var wire 1 P! data_out [15] $end
$var wire 1 Q! data_out [14] $end
$var wire 1 R! data_out [13] $end
$var wire 1 S! data_out [12] $end
$var wire 1 T! data_out [11] $end
$var wire 1 U! data_out [10] $end
$var wire 1 V! data_out [9] $end
$var wire 1 W! data_out [8] $end
$var wire 1 X! data_out [7] $end
$var wire 1 Y! data_out [6] $end
$var wire 1 Z! data_out [5] $end
$var wire 1 [! data_out [4] $end
$var wire 1 \! data_out [3] $end
$var wire 1 ]! data_out [2] $end
$var wire 1 ^! data_out [1] $end
$var wire 1 _! data_out [0] $end
$var wire 1 B" data_in [15] $end
$var wire 1 C" data_in [14] $end
$var wire 1 D" data_in [13] $end
$var wire 1 E" data_in [12] $end
$var wire 1 F" data_in [11] $end
$var wire 1 G" data_in [10] $end
$var wire 1 H" data_in [9] $end
$var wire 1 I" data_in [8] $end
$var wire 1 J" data_in [7] $end
$var wire 1 K" data_in [6] $end
$var wire 1 L" data_in [5] $end
$var wire 1 M" data_in [4] $end
$var wire 1 N" data_in [3] $end
$var wire 1 O" data_in [2] $end
$var wire 1 P" data_in [1] $end
$var wire 1 Q" data_in [0] $end
$var wire 1 e" addr [15] $end
$var wire 1 f" addr [14] $end
$var wire 1 g" addr [13] $end
$var wire 1 h" addr [12] $end
$var wire 1 i" addr [11] $end
$var wire 1 j" addr [10] $end
$var wire 1 k" addr [9] $end
$var wire 1 l" addr [8] $end
$var wire 1 m" addr [7] $end
$var wire 1 n" addr [6] $end
$var wire 1 o" addr [5] $end
$var wire 1 p" addr [4] $end
$var wire 1 q" addr [3] $end
$var wire 1 r" addr [2] $end
$var wire 1 s" addr [1] $end
$var wire 1 t" addr [0] $end
$var wire 1 $! enable $end
$var wire 1 %! wr $end
$var wire 1 !! clk $end
$var wire 1 "! rst $end
$var reg 1 Q2 loaded $end
$upscope $end
$upscope $end
$upscope $end
$enddefinitions $end
#0
$dumpvars
1}
0~
0+#
bx @$
xQ$
x]%
x^%
x_%
x`%
xa%
xb%
xc%
xd%
xe%
xf%
xV-
xT-
xR-
xP-
xN-
xL-
xJ-
xH-
xF-
xD-
xB-
x@-
x>-
x<-
x:-
x8-
x6-
x4-
x2-
x0-
x.-
x,-
x*-
x(-
x&-
x$-
x"-
x~,
x|,
xz,
xx,
xv,
xt,
xr,
xp,
xn,
xl,
xj,
xh,
xf,
xd,
xb,
x`,
x^,
x\,
xZ,
xX,
xV,
xT,
xR,
xP,
xN,
xL,
xJ,
xH,
xF,
xD,
xB,
x@,
x>,
x<,
x:,
x8,
x6,
x4,
x2,
x0,
x.,
x,,
x*,
x(,
x&,
x$,
x",
x~+
x|+
xz+
xx+
xv+
xt+
xr+
xp+
xn+
xl+
xj+
xh+
xf+
xd+
xb+
x`+
x^+
x\+
xZ+
xX+
xV+
xT+
xR+
xP+
xN+
xL+
xJ+
xH+
xF+
xD+
xB+
x@+
x>+
x<+
x:+
x8+
x6+
x4+
x2+
x0+
x.+
x,+
x*+
x(+
x&+
x$+
x"+
x~*
x|*
xz*
xx*
xv*
xt*
xr*
xp*
xn*
xl*
xj*
xh*
xf*
xd*
xb*
x`*
x^*
x\*
xZ*
xX*
xV*
xT*
xR*
xP*
xN*
xL*
xJ*
xH*
xF*
xD*
xB*
x@*
x>*
x<*
x:*
x8*
x6*
x4*
x2*
x0*
x.*
x,*
x**
x(*
x&*
x$*
x"*
x~)
x|)
xz)
xx)
xv)
xt)
xr)
xp)
xn)
xl)
xj)
xh)
xf)
xd)
xb)
x`)
x^)
x\)
xZ)
xX)
xV)
xT)
xR)
xP)
xN)
xL)
xJ)
xH)
xF)
xD)
xB)
x@)
x>)
x<)
x:)
x8)
x6)
x4)
x2)
x0)
x.)
x,)
x*)
x()
x&)
x$)
x")
x~(
x|(
xz(
xx(
xv(
xt(
xr(
xp(
xn(
xl(
xj(
xh(
xf(
xd(
xb(
x`(
x^(
x\(
xZ(
xX(
xV(
xT(
xR(
xP(
xN(
xL(
xJ(
xH(
xF(
xD(
xB(
x@(
x>(
x<(
x:(
x8(
x6(
x4(
x2(
x0(
x.(
bx W-
bx X-
xY-
0Q2
b10000 v"
b10000 P2
b0 y
b1 z
b10 {
b100 |
x0
x/
x.
x-
x,
x+
x*
x)
x(
x'
x&
x%
x$
x#
x"
x!
x@
x?
x>
x=
x<
x;
x:
x9
x8
x7
x6
x5
x4
x3
x2
x1
xA
xE
xD
xC
xB
xU
xT
xS
xR
xQ
xP
xO
xN
xM
xL
xK
xJ
xI
xH
xG
xF
xV
xW
xg
xf
xe
xd
xc
xb
xa
x`
x_
x^
x]
x\
x[
xZ
xY
xX
zw
zv
zu
zt
zs
zr
zq
zp
zo
zn
zm
zl
zk
zj
zi
zh
zx
x#!
x$!
x%!
x&!
x'!
x(!
z,!
z+!
z*!
z)!
x-!
x.!
x/!
z?!
z>!
z=!
z<!
z;!
z:!
z9!
z8!
z7!
z6!
z5!
z4!
z3!
z2!
z1!
z0!
xO!
xN!
xM!
xL!
xK!
xJ!
xI!
xH!
xG!
xF!
xE!
xD!
xC!
xB!
xA!
x@!
x_!
x^!
x]!
x\!
x[!
xZ!
xY!
xX!
xW!
xV!
xU!
xT!
xS!
xR!
xQ!
xP!
xo!
xn!
xm!
xl!
xk!
xj!
xi!
xh!
xg!
xf!
xe!
xd!
xc!
xb!
xa!
x`!
x!"
x~!
x}!
x|!
x{!
xz!
xy!
xx!
xw!
xv!
xu!
xt!
xs!
xr!
xq!
xp!
x1"
x0"
x/"
x."
x-"
x,"
x+"
x*"
x)"
x("
x'"
x&"
x%"
x$"
x#"
x""
zA"
z@"
z?"
z>"
z="
z<"
z;"
z:"
z9"
z8"
z7"
z6"
z5"
z4"
z3"
z2"
zQ"
zP"
zO"
zN"
zM"
zL"
zK"
zJ"
zI"
zH"
zG"
zF"
zE"
zD"
zC"
zB"
xT"
xS"
xR"
xd"
xc"
xb"
xa"
x`"
x_"
x^"
x]"
x\"
x["
xZ"
xY"
xX"
xW"
xV"
xU"
xt"
xs"
xr"
xq"
xp"
xo"
xn"
xm"
xl"
xk"
xj"
xi"
xh"
xg"
xf"
xe"
xu"
0M#
1L#
0K#
0J#
0I#
0H#
0G#
0F#
0E#
0D#
0C#
0B#
0A#
0@#
0?#
0>#
xQ#
xP#
xO#
xN#
xa#
x`#
x_#
x^#
x]#
x\#
x[#
xZ#
xY#
xX#
xW#
xV#
xU#
xT#
xS#
xR#
xb#
0c#
0d#
xe#
0i#
0h#
xg#
xf#
xj#
0k#
xo#
xn#
xm#
xl#
0s#
xr#
0q#
0p#
xw#
xv#
xu#
xt#
xx#
0y#
x}#
x|#
x{#
xz#
0#$
0"$
0!$
0~#
x'$
x&$
x%$
x$$
x($
0)$
x-$
x,$
x+$
x*$
01$
00$
0/$
0.$
x5$
x4$
x3$
x2$
x6$
07$
x;$
x:$
x9$
x8$
0?$
0>$
0=$
0<$
xP$
xO$
xN$
xM$
xL$
xK$
xJ$
xI$
xH$
xG$
xF$
xE$
xD$
xC$
xB$
xA$
0j$
xi$
xh$
xg$
xf$
xe$
xd$
xc$
xb$
xa$
0`$
0_$
0^$
0]$
0\$
0[$
xn$
xm$
xl$
xk$
x~$
x}$
x|$
x{$
xz$
xy$
xx$
xw$
xv$
xu$
xt$
xs$
xr$
xq$
xp$
xo$
x!%
0"%
0#%
x$%
0(%
0'%
x&%
x%%
x)%
x*%
x.%
x-%
x,%
x+%
02%
x1%
x0%
x/%
x6%
x5%
x4%
x3%
x7%
x8%
x<%
x;%
x:%
x9%
x@%
x?%
x>%
x=%
xD%
xC%
xB%
xA%
xE%
0F%
xJ%
xI%
xH%
xG%
xN%
xM%
0L%
0K%
xR%
xQ%
xP%
xO%
xS%
0T%
xX%
xW%
xV%
xU%
0\%
0[%
0Z%
0Y%
xv%
xu%
xt%
xs%
xr%
xq%
xp%
xo%
xn%
xm%
xl%
xk%
xj%
xi%
xh%
xg%
x(&
x'&
x&&
x%&
x$&
x#&
x"&
x!&
x~%
x}%
x|%
x{%
xz%
xy%
xx%
xw%
x8&
x7&
x6&
x5&
x4&
x3&
x2&
x1&
x0&
x/&
x.&
x-&
x,&
x+&
x*&
x)&
xH&
xG&
xF&
xE&
xD&
xC&
xB&
xA&
x@&
x?&
x>&
x=&
x<&
x;&
x:&
x9&
xX&
xW&
xV&
xU&
xT&
xS&
xR&
xQ&
xP&
xO&
xN&
xM&
xL&
xK&
xJ&
xI&
xh&
xg&
0f&
0e&
0d&
0c&
0b&
0a&
0`&
0_&
0^&
0]&
0\&
0[&
0Z&
0Y&
xx&
xw&
xv&
xu&
0t&
0s&
0r&
0q&
0p&
0o&
0n&
0m&
0l&
0k&
0j&
0i&
x*'
x)'
x('
x''
x&'
x%'
x$'
x#'
0"'
0!'
0~&
0}&
0|&
0{&
0z&
0y&
x:'
x9'
08'
07'
06'
05'
04'
03'
02'
01'
00'
0/'
0.'
0-'
0,'
0+'
xJ'
xI'
xH'
xG'
0F'
0E'
0D'
0C'
0B'
0A'
0@'
0?'
0>'
0='
0<'
0;'
xZ'
xY'
xX'
xW'
xV'
xU'
xT'
xS'
0R'
0Q'
0P'
0O'
0N'
0M'
0L'
0K'
xj'
xi'
0h'
0g'
0f'
0e'
0d'
0c'
0b'
0a'
0`'
0_'
0^'
0]'
0\'
0['
xz'
xy'
xx'
xw'
0v'
0u'
0t'
0s'
0r'
0q'
0p'
0o'
0n'
0m'
0l'
0k'
x,(
x+(
x*(
x)(
x((
x'(
x&(
x%(
0$(
0#(
0"(
0!(
0~'
0}'
0|'
0{'
xU-
xS-
xQ-
xO-
xM-
xK-
xI-
xG-
xE-
xC-
xA-
x?-
x=-
x;-
x9-
x7-
x5-
x3-
x1-
x/-
x--
x+-
x)-
x'-
x%-
x#-
x!-
x},
x{,
xy,
xw,
xu,
xs,
xq,
xo,
xm,
xk,
xi,
xg,
xe,
xc,
xa,
x_,
x],
x[,
xY,
xW,
xU,
xS,
xQ,
xO,
xM,
xK,
xI,
xG,
xE,
xC,
xA,
x?,
x=,
x;,
x9,
x7,
x5,
x3,
x1,
x/,
x-,
x+,
x),
x',
x%,
x#,
x!,
x}+
x{+
xy+
xw+
xu+
xs+
xq+
xo+
xm+
xk+
xi+
xg+
xe+
xc+
xa+
x_+
x]+
x[+
xY+
xW+
xU+
xS+
xQ+
xO+
xM+
xK+
xI+
xG+
xE+
xC+
xA+
x?+
x=+
x;+
x9+
x7+
x5+
x3+
x1+
x/+
x-+
x++
x)+
x'+
x%+
x#+
x!+
x}*
x{*
xy*
xw*
xu*
xs*
xq*
xo*
xm*
xk*
xi*
xg*
xe*
xc*
xa*
x_*
x]*
x[*
xY*
xW*
xU*
xS*
xQ*
xO*
xM*
xK*
xI*
xG*
xE*
xC*
xA*
x?*
x=*
x;*
x9*
x7*
x5*
x3*
x1*
x/*
x-*
x+*
x)*
x'*
x%*
x#*
x!*
x})
x{)
xy)
xw)
xu)
xs)
xq)
xo)
xm)
xk)
xi)
xg)
xe)
xc)
xa)
x_)
x])
x[)
xY)
xW)
xU)
xS)
xQ)
xO)
xM)
xK)
xI)
xG)
xE)
xC)
xA)
x?)
x=)
x;)
x9)
x7)
x5)
x3)
x1)
x/)
x-)
x+)
x))
x')
x%)
x#)
x!)
x}(
x{(
xy(
xw(
xu(
xs(
xq(
xo(
xm(
xk(
xi(
xg(
xe(
xc(
xa(
x_(
x](
x[(
xY(
xW(
xU(
xS(
xQ(
xO(
xM(
xK(
xI(
xG(
xE(
xC(
xA(
x?(
x=(
x;(
x9(
x7(
x5(
x3(
x1(
x/(
x-(
xi-
xh-
xg-
xf-
xe-
xd-
xc-
xb-
xa-
x`-
x_-
x^-
x]-
x\-
x[-
xZ-
xy-
xx-
xw-
xv-
xu-
xt-
xs-
xr-
xq-
xp-
xo-
xn-
xm-
xl-
xk-
xj-
x+.
x*.
x).
x(.
x'.
x&.
x%.
x$.
x#.
x".
x!.
x~-
x}-
x|-
x{-
xz-
x;.
x:.
x9.
x8.
x7.
x6.
x5.
x4.
x3.
x2.
x1.
x0.
x/.
x..
x-.
x,.
z<.
x=.
xM.
xL.
xK.
xJ.
xI.
xH.
xG.
xF.
xE.
xD.
xC.
xB.
xA.
x@.
x?.
x>.
xQ.
xP.
xO.
xN.
xa.
x`.
x_.
x^.
x].
x\.
x[.
xZ.
xY.
xX.
xW.
xV.
xU.
xT.
xS.
xR.
xb.
xc.
xd.
xe.
xi.
xh.
xg.
xf.
xj.
xk.
xo.
xn.
xm.
xl.
xs.
xr.
xq.
xp.
xw.
xv.
xu.
xt.
xx.
xy.
x}.
x|.
x{.
xz.
x#/
x"/
x!/
x~.
x'/
x&/
x%/
x$/
x(/
x)/
x-/
x,/
x+/
x*/
x1/
x0/
x//
x./
x5/
x4/
x3/
x2/
x6/
x7/
x;/
x:/
x9/
x8/
x?/
x>/
x=/
x</
xO/
xN/
xM/
xL/
xK/
xJ/
xI/
xH/
xG/
xF/
xE/
xD/
xC/
xB/
xA/
x@/
x_/
x^/
x]/
x\/
x[/
xZ/
xY/
xX/
xW/
xV/
xU/
xT/
xS/
xR/
xQ/
xP/
xo/
xn/
xm/
xl/
xk/
xj/
xi/
xh/
xg/
xf/
xe/
xd/
xc/
xb/
xa/
x`/
xs/
xr/
xq/
xp/
xw/
xv/
xu/
xt/
z{/
zz/
zy/
zx/
x!0
x~/
x}/
x|/
x%0
x$0
x#0
x"0
z)0
z(0
z'0
z&0
x+0
x*0
x-0
x,0
x/0
x.0
000
x40
x30
x20
x10
x80
x70
x60
x50
x<0
x;0
0:0
090
0A0
x@0
x?0
x>0
xB0
xC0
xG0
xF0
xE0
xD0
xK0
xJ0
xI0
xH0
xO0
xN0
xM0
xL0
xP0
xQ0
xU0
xT0
xS0
xR0
xY0
xX0
xW0
xV0
0^0
x]0
x\0
x[0
x_0
x`0
xd0
xc0
xb0
xa0
xh0
xg0
xf0
xe0
xl0
xk0
xj0
xi0
xm0
xn0
xr0
xq0
xp0
xo0
xv0
xu0
xt0
xs0
0{0
xz0
xy0
xx0
x|0
x}0
x#1
x"1
x!1
x~0
x'1
x&1
x%1
x$1
x+1
x*1
x)1
x(1
x,1
x-1
x11
x01
x/1
x.1
x51
x41
x31
x21
x?1
x>1
0=1
0<1
0@1
0A1
xE1
0D1
0C1
0B1
xI1
0H1
0G1
0F1
xM1
xL1
xK1
xJ1
xQ1
xP1
xO1
xN1
xU1
xT1
xS1
xR1
xY1
xX1
xW1
xV1
zZ1
z[1
z\1
z]1
za1
z`1
z_1
z^1
0f1
xe1
xd1
xc1
xj1
xi1
xh1
xg1
xk1
xl1
xp1
xo1
xn1
xm1
xt1
xs1
xr1
xq1
0y1
xx1
xw1
xv1
x}1
x|1
x{1
xz1
x~1
x!2
x%2
x$2
x#2
x"2
x)2
x(2
x'2
x&2
0.2
x-2
x,2
x+2
x22
x12
x02
x/2
x32
x42
x82
x72
x62
x52
x<2
x;2
x:2
x92
0A2
x@2
x?2
x>2
xE2
xD2
xC2
xB2
xF2
xG2
xK2
xJ2
xI2
xH2
xO2
xN2
xM2
xL2
0"!
1!!
0<#
0;#
1:#
09#
08#
07#
06#
05#
04#
03#
02#
01#
00#
0/#
0.#
0-#
0,#
0*#
1)#
0(#
0'#
0&#
0%#
0$#
0##
0"#
0!#
0~"
0}"
0|"
0{"
0z"
0y"
0x"
0w"
x=#
0Y$
0W$
0V$
0U$
0T$
0S$
0R$
0X$
xZ$
0;1
0:1
091
081
071
061
0w0
0Z0
0=0
0=2
0*2
0u1
0b1
$end
#50
0}
0!!
#100
1}
1!!
b10 z
#150
0}
0!!
#200
1}
1!!
b11 z
#201
1~
1"!
#250
0}
0!!
#300
1}
1!!
1+#
0V-
0T-
0R-
0P-
0N-
0L-
0J-
0H-
0F-
0D-
0B-
0@-
0>-
0<-
0:-
08-
06-
04-
02-
00-
0.-
0,-
0*-
0(-
0&-
0$-
0"-
0~,
0|,
0z,
0x,
0v,
0t,
0r,
0p,
0n,
0l,
0j,
0h,
0f,
0d,
0b,
0`,
0^,
0\,
0Z,
0X,
0V,
0T,
0R,
0P,
0N,
0L,
0J,
0H,
0F,
0D,
0B,
0@,
0>,
0<,
0:,
08,
06,
04,
02,
00,
0.,
0,,
0*,
0(,
0&,
0$,
0",
0~+
0|+
0z+
0x+
0v+
0t+
0r+
0p+
0n+
0l+
0j+
0h+
0f+
0d+
0b+
0`+
0^+
0\+
0Z+
0X+
0V+
0T+
0R+
0P+
0N+
0L+
0J+
0H+
0F+
0D+
0B+
0@+
0>+
0<+
0:+
08+
06+
04+
02+
00+
0.+
0,+
0*+
0(+
0&+
0$+
0"+
0~*
0|*
0z*
0x*
0v*
0t*
0r*
0p*
0n*
0l*
0j*
0h*
0f*
0d*
0b*
0`*
0^*
0\*
0Z*
0X*
0V*
0T*
0R*
0P*
0N*
0L*
0J*
0H*
0F*
0D*
0B*
0@*
0>*
0<*
0:*
08*
06*
04*
02*
00*
0.*
0,*
0**
0(*
0&*
0$*
0"*
0~)
0|)
0z)
0x)
0v)
0t)
0r)
0p)
0n)
0l)
0j)
0h)
0f)
0d)
0b)
0`)
0^)
0\)
0Z)
0X)
0V)
0T)
0R)
0P)
0N)
0L)
0J)
0H)
0F)
0D)
0B)
0@)
0>)
0<)
0:)
08)
06)
04)
02)
00)
0.)
0,)
0*)
0()
0&)
0$)
0")
0~(
0|(
0z(
0x(
0v(
0t(
0r(
0p(
0n(
0l(
0j(
0h(
0f(
0d(
0b(
0`(
0^(
0\(
0Z(
0X(
0V(
0T(
0R(
0P(
0N(
0L(
0J(
0H(
0F(
0D(
0B(
0@(
0>(
0<(
0:(
08(
06(
04(
02(
00(
0.(
1Q2
b100 z
b1 y
0U-
0S-
0Q-
0O-
0M-
0K-
0I-
0G-
0E-
0C-
0A-
0?-
0=-
0;-
09-
07-
05-
03-
01-
0/-
0--
0+-
0)-
0'-
0%-
0#-
0!-
0},
0{,
0y,
0w,
0u,
0s,
0q,
0o,
0m,
0k,
0i,
0g,
0e,
0c,
0a,
0_,
0],
0[,
0Y,
0W,
0U,
0S,
0Q,
0O,
0M,
0K,
0I,
0G,
0E,
0C,
0A,
0?,
0=,
0;,
09,
07,
05,
03,
01,
0/,
0-,
0+,
0),
0',
0%,
0#,
0!,
0}+
0{+
0y+
0w+
0u+
0s+
0q+
0o+
0m+
0k+
0i+
0g+
0e+
0c+
0a+
0_+
0]+
0[+
0Y+
0W+
0U+
0S+
0Q+
0O+
0M+
0K+
0I+
0G+
0E+
0C+
0A+
0?+
0=+
0;+
09+
07+
05+
03+
01+
0/+
0-+
0++
0)+
0'+
0%+
0#+
0!+
0}*
0{*
0y*
0w*
0u*
0s*
0q*
0o*
0m*
0k*
0i*
0g*
0e*
0c*
0a*
0_*
0]*
0[*
0Y*
0W*
0U*
0S*
0Q*
0O*
0M*
0K*
0I*
0G*
0E*
0C*
0A*
0?*
0=*
0;*
09*
07*
05*
03*
01*
0/*
0-*
0+*
0)*
0'*
0%*
0#*
0!*
0})
0{)
0y)
0w)
0u)
0s)
0q)
0o)
0m)
0k)
0i)
0g)
0e)
0c)
0a)
0_)
0])
0[)
0Y)
0W)
0U)
0S)
0Q)
0O)
0M)
0K)
0I)
0G)
0E)
0C)
0A)
0?)
0=)
0;)
09)
07)
05)
03)
01)
0/)
0-)
0+)
0))
0')
0%)
0#)
0!)
0}(
0{(
0y(
0w(
0u(
0s(
0q(
0o(
0m(
0k(
0i(
0g(
0e(
0c(
0a(
0_(
0](
0[(
0Y(
0W(
0U(
0S(
0Q(
0O(
0M(
0K(
0I(
0G(
0E(
0C(
0A(
0?(
0=(
0;(
09(
07(
05(
03(
01(
0/(
0-(
